
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003934  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003b24  08003b24  00013b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bec  08003bec  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003bec  08003bec  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bec  08003bec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bec  08003bec  00013bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010a4  20000074  08003c68  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001118  08003c68  00021118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e7d  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d83  00000000  00000000  00034f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00037ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  00038d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bfa7  00000000  00000000  00039c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120b4  00000000  00000000  00055bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1728  00000000  00000000  00067ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001093cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004740  00000000  00000000  00109420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000074 	.word	0x20000074
 800020c:	00000000 	.word	0x00000000
 8000210:	08003b0c 	.word	0x08003b0c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000078 	.word	0x20000078
 800022c:	08003b0c 	.word	0x08003b0c

08000230 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	4a06      	ldr	r2, [pc, #24]	; (8000258 <vApplicationGetIdleTaskMemory+0x28>)
 8000240:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	4a05      	ldr	r2, [pc, #20]	; (800025c <vApplicationGetIdleTaskMemory+0x2c>)
 8000246:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2280      	movs	r2, #128	; 0x80
 800024c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800024e:	bf00      	nop
 8000250:	3714      	adds	r7, #20
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	20000090 	.word	0x20000090
 800025c:	200000e4 	.word	0x200000e4

08000260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000260:	b5b0      	push	{r4, r5, r7, lr}
 8000262:	b08e      	sub	sp, #56	; 0x38
 8000264:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000266:	f000 fa79 	bl	800075c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026a:	f000 f833 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026e:	f000 f8a1 	bl	80003b4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000272:	f000 f875 	bl	8000360 <MX_USART1_UART_Init>

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartTask01, 3, 0, 128);
 8000276:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <main+0x64>)
 8000278:	f107 041c 	add.w	r4, r7, #28
 800027c:	461d      	mov	r5, r3
 800027e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000282:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000286:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 800028a:	f107 031c 	add.w	r3, r7, #28
 800028e:	2100      	movs	r1, #0
 8000290:	4618      	mov	r0, r3
 8000292:	f001 fded 	bl	8001e70 <osThreadCreate>
 8000296:	4603      	mov	r3, r0
 8000298:	4a0b      	ldr	r2, [pc, #44]	; (80002c8 <main+0x68>)
 800029a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(myTask02, StartTask02, 2, 0, 128);
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <main+0x6c>)
 800029e:	463c      	mov	r4, r7
 80002a0:	461d      	mov	r5, r3
 80002a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80002ae:	463b      	mov	r3, r7
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 fddc 	bl	8001e70 <osThreadCreate>
 80002b8:	4603      	mov	r3, r0
 80002ba:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <main+0x70>)
 80002bc:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002be:	f001 fdd0 	bl	8001e62 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002c2:	e7fe      	b.n	80002c2 <main+0x62>
 80002c4:	08003b3c 	.word	0x08003b3c
 80002c8:	20001090 	.word	0x20001090
 80002cc:	08003b58 	.word	0x08003b58
 80002d0:	2000108c 	.word	0x2000108c

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b090      	sub	sp, #64	; 0x40
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	2228      	movs	r2, #40	; 0x28
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 ffc4 	bl	8003270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f6:	2301      	movs	r3, #1
 80002f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	2301      	movs	r3, #1
 8000306:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000308:	2302      	movs	r3, #2
 800030a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800030c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000310:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000312:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000316:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000318:	f107 0318 	add.w	r3, r7, #24
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fcc3 	bl	8000ca8 <HAL_RCC_OscConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000328:	f000 f894 	bl	8000454 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032c:	230f      	movs	r3, #15
 800032e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000330:	2302      	movs	r3, #2
 8000332:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2102      	movs	r1, #2
 8000346:	4618      	mov	r0, r3
 8000348:	f000 ff2e 	bl	80011a8 <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000352:	f000 f87f 	bl	8000454 <Error_Handler>
  }
}
 8000356:	bf00      	nop
 8000358:	3740      	adds	r7, #64	; 0x40
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000364:	4b11      	ldr	r3, [pc, #68]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 8000366:	4a12      	ldr	r2, [pc, #72]	; (80003b0 <MX_USART1_UART_Init+0x50>)
 8000368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800036a:	4b10      	ldr	r3, [pc, #64]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 800036c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000370:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000378:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 8000386:	220c      	movs	r2, #12
 8000388:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000396:	4805      	ldr	r0, [pc, #20]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 8000398:	f001 fb28 	bl	80019ec <HAL_UART_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003a2:	f000 f857 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20001044 	.word	0x20001044
 80003b0:	40013800 	.word	0x40013800

080003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <MX_GPIO_Init+0x40>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <MX_GPIO_Init+0x40>)
 80003c0:	f043 0320 	orr.w	r3, r3, #32
 80003c4:	6193      	str	r3, [r2, #24]
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <MX_GPIO_Init+0x40>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	f003 0320 	and.w	r3, r3, #32
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <MX_GPIO_Init+0x40>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4a07      	ldr	r2, [pc, #28]	; (80003f4 <MX_GPIO_Init+0x40>)
 80003d8:	f043 0304 	orr.w	r3, r3, #4
 80003dc:	6193      	str	r3, [r2, #24]
 80003de:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <MX_GPIO_Init+0x40>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	f003 0304 	and.w	r3, r3, #4
 80003e6:	603b      	str	r3, [r7, #0]
 80003e8:	683b      	ldr	r3, [r7, #0]

}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr
 80003f4:	40021000 	.word	0x40021000

080003f8 <StartTask02>:

/* USER CODE BEGIN 4 */
void StartTask02(void const * argument)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for(;;)
  {
	  mprintf("Task 2");
 8000400:	4803      	ldr	r0, [pc, #12]	; (8000410 <StartTask02+0x18>)
 8000402:	f000 f82d 	bl	8000460 <mprintf>
    osDelay(1000);
 8000406:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800040a:	f001 fd7d 	bl	8001f08 <osDelay>
	  mprintf("Task 2");
 800040e:	e7f7      	b.n	8000400 <StartTask02+0x8>
 8000410:	08003b74 	.word	0x08003b74

08000414 <StartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for(;;)
  {
	mprintf("Task 1");
 800041c:	4803      	ldr	r0, [pc, #12]	; (800042c <StartTask01+0x18>)
 800041e:	f000 f81f 	bl	8000460 <mprintf>
    osDelay(1000);
 8000422:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000426:	f001 fd6f 	bl	8001f08 <osDelay>
	mprintf("Task 1");
 800042a:	e7f7      	b.n	800041c <StartTask01+0x8>
 800042c:	08003b7c 	.word	0x08003b7c

08000430 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d101      	bne.n	8000446 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000442:	f000 f9a1 	bl	8000788 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40000800 	.word	0x40000800

08000454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000458:	b672      	cpsid	i
}
 800045a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800045c:	e7fe      	b.n	800045c <Error_Handler+0x8>
	...

08000460 <mprintf>:

UART_HandleTypeDef huart1;

char buff[40];

void mprintf(const char* format,...){
 8000460:	b40f      	push	{r0, r1, r2, r3}
 8000462:	b580      	push	{r7, lr}
 8000464:	b082      	sub	sp, #8
 8000466:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args,format);
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	607b      	str	r3, [r7, #4]
	vsnprintf(buff,sizeof(buff), format,args);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	693a      	ldr	r2, [r7, #16]
 8000472:	2128      	movs	r1, #40	; 0x28
 8000474:	4808      	ldr	r0, [pc, #32]	; (8000498 <mprintf+0x38>)
 8000476:	f002 ff2f 	bl	80032d8 <vsniprintf>
	va_end(args);

	HAL_UART_Transmit(&huart1, (uint8_t*)buff, 40, 1000);
 800047a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800047e:	2228      	movs	r2, #40	; 0x28
 8000480:	4905      	ldr	r1, [pc, #20]	; (8000498 <mprintf+0x38>)
 8000482:	4806      	ldr	r0, [pc, #24]	; (800049c <mprintf+0x3c>)
 8000484:	f001 fb02 	bl	8001a8c <HAL_UART_Transmit>
}
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000492:	b004      	add	sp, #16
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	20001094 	.word	0x20001094
 800049c:	20001044 	.word	0x20001044

080004a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004a6:	4b18      	ldr	r3, [pc, #96]	; (8000508 <HAL_MspInit+0x68>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	4a17      	ldr	r2, [pc, #92]	; (8000508 <HAL_MspInit+0x68>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6193      	str	r3, [r2, #24]
 80004b2:	4b15      	ldr	r3, [pc, #84]	; (8000508 <HAL_MspInit+0x68>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004be:	4b12      	ldr	r3, [pc, #72]	; (8000508 <HAL_MspInit+0x68>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	4a11      	ldr	r2, [pc, #68]	; (8000508 <HAL_MspInit+0x68>)
 80004c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c8:	61d3      	str	r3, [r2, #28]
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <HAL_MspInit+0x68>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	210f      	movs	r1, #15
 80004da:	f06f 0001 	mvn.w	r0, #1
 80004de:	f000 fa24 	bl	800092a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004e2:	4b0a      	ldr	r3, [pc, #40]	; (800050c <HAL_MspInit+0x6c>)
 80004e4:	685b      	ldr	r3, [r3, #4]
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <HAL_MspInit+0x6c>)
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fe:	bf00      	nop
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000
 800050c:	40010000 	.word	0x40010000

08000510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a1c      	ldr	r2, [pc, #112]	; (800059c <HAL_UART_MspInit+0x8c>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d131      	bne.n	8000594 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000530:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <HAL_UART_MspInit+0x90>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a1a      	ldr	r2, [pc, #104]	; (80005a0 <HAL_UART_MspInit+0x90>)
 8000536:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <HAL_UART_MspInit+0x90>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <HAL_UART_MspInit+0x90>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a14      	ldr	r2, [pc, #80]	; (80005a0 <HAL_UART_MspInit+0x90>)
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_UART_MspInit+0x90>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0304 	and.w	r3, r3, #4
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000564:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000566:	2302      	movs	r3, #2
 8000568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800056a:	2303      	movs	r3, #3
 800056c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	4619      	mov	r1, r3
 8000574:	480b      	ldr	r0, [pc, #44]	; (80005a4 <HAL_UART_MspInit+0x94>)
 8000576:	f000 fa03 	bl	8000980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800057a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	4619      	mov	r1, r3
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <HAL_UART_MspInit+0x94>)
 8000590:	f000 f9f6 	bl	8000980 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000594:	bf00      	nop
 8000596:	3720      	adds	r7, #32
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40013800 	.word	0x40013800
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40010800 	.word	0x40010800

080005a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08c      	sub	sp, #48	; 0x30
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	201e      	movs	r0, #30
 80005be:	f000 f9b4 	bl	800092a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80005c2:	201e      	movs	r0, #30
 80005c4:	f000 f9cd 	bl	8000962 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <HAL_InitTick+0xa0>)
 80005ca:	69db      	ldr	r3, [r3, #28]
 80005cc:	4a1e      	ldr	r2, [pc, #120]	; (8000648 <HAL_InitTick+0xa0>)
 80005ce:	f043 0304 	orr.w	r3, r3, #4
 80005d2:	61d3      	str	r3, [r2, #28]
 80005d4:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <HAL_InitTick+0xa0>)
 80005d6:	69db      	ldr	r3, [r3, #28]
 80005d8:	f003 0304 	and.w	r3, r3, #4
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005e0:	f107 0210 	add.w	r2, r7, #16
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4611      	mov	r1, r2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 ff4c 	bl	8001488 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80005f0:	f000 ff22 	bl	8001438 <HAL_RCC_GetPCLK1Freq>
 80005f4:	4603      	mov	r3, r0
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005fc:	4a13      	ldr	r2, [pc, #76]	; (800064c <HAL_InitTick+0xa4>)
 80005fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000602:	0c9b      	lsrs	r3, r3, #18
 8000604:	3b01      	subs	r3, #1
 8000606:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <HAL_InitTick+0xa8>)
 800060a:	4a12      	ldr	r2, [pc, #72]	; (8000654 <HAL_InitTick+0xac>)
 800060c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <HAL_InitTick+0xa8>)
 8000610:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000614:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000616:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <HAL_InitTick+0xa8>)
 8000618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800061a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <HAL_InitTick+0xa8>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <HAL_InitTick+0xa8>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000628:	4809      	ldr	r0, [pc, #36]	; (8000650 <HAL_InitTick+0xa8>)
 800062a:	f000 ff7b 	bl	8001524 <HAL_TIM_Base_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d104      	bne.n	800063e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000634:	4806      	ldr	r0, [pc, #24]	; (8000650 <HAL_InitTick+0xa8>)
 8000636:	f000 ffcd 	bl	80015d4 <HAL_TIM_Base_Start_IT>
 800063a:	4603      	mov	r3, r0
 800063c:	e000      	b.n	8000640 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
}
 8000640:	4618      	mov	r0, r3
 8000642:	3730      	adds	r7, #48	; 0x30
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40021000 	.word	0x40021000
 800064c:	431bde83 	.word	0x431bde83
 8000650:	200010bc 	.word	0x200010bc
 8000654:	40000800 	.word	0x40000800

08000658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800065c:	e7fe      	b.n	800065c <NMI_Handler+0x4>

0800065e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <HardFault_Handler+0x4>

08000664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <MemManage_Handler+0x4>

0800066a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <BusFault_Handler+0x4>

08000670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <UsageFault_Handler+0x4>

08000676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
	...

08000684 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000688:	4802      	ldr	r0, [pc, #8]	; (8000694 <TIM4_IRQHandler+0x10>)
 800068a:	f001 f803 	bl	8001694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200010bc 	.word	0x200010bc

08000698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006a0:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <_sbrk+0x5c>)
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <_sbrk+0x60>)
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <_sbrk+0x64>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d102      	bne.n	80006ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <_sbrk+0x64>)
 80006b6:	4a12      	ldr	r2, [pc, #72]	; (8000700 <_sbrk+0x68>)
 80006b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <_sbrk+0x64>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4413      	add	r3, r2
 80006c2:	693a      	ldr	r2, [r7, #16]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d207      	bcs.n	80006d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006c8:	f002 fd9a 	bl	8003200 <__errno>
 80006cc:	4603      	mov	r3, r0
 80006ce:	220c      	movs	r2, #12
 80006d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295
 80006d6:	e009      	b.n	80006ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <_sbrk+0x64>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006de:	4b07      	ldr	r3, [pc, #28]	; (80006fc <_sbrk+0x64>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	4a05      	ldr	r2, [pc, #20]	; (80006fc <_sbrk+0x64>)
 80006e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ea:	68fb      	ldr	r3, [r7, #12]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000c000 	.word	0x2000c000
 80006f8:	00000400 	.word	0x00000400
 80006fc:	200002e4 	.word	0x200002e4
 8000700:	20001118 	.word	0x20001118

08000704 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000710:	f7ff fff8 	bl	8000704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000714:	480b      	ldr	r0, [pc, #44]	; (8000744 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000716:	490c      	ldr	r1, [pc, #48]	; (8000748 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000718:	4a0c      	ldr	r2, [pc, #48]	; (800074c <LoopFillZerobss+0x16>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800071c:	e002      	b.n	8000724 <LoopCopyDataInit>

0800071e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000722:	3304      	adds	r3, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000728:	d3f9      	bcc.n	800071e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072a:	4a09      	ldr	r2, [pc, #36]	; (8000750 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800072c:	4c09      	ldr	r4, [pc, #36]	; (8000754 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000730:	e001      	b.n	8000736 <LoopFillZerobss>

08000732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000734:	3204      	adds	r2, #4

08000736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000738:	d3fb      	bcc.n	8000732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073a:	f002 fd67 	bl	800320c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800073e:	f7ff fd8f 	bl	8000260 <main>
  bx lr
 8000742:	4770      	bx	lr
  ldr r0, =_sdata
 8000744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000748:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800074c:	08003bf4 	.word	0x08003bf4
  ldr r2, =_sbss
 8000750:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000754:	20001118 	.word	0x20001118

08000758 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <ADC1_2_IRQHandler>
	...

0800075c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <HAL_Init+0x28>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a07      	ldr	r2, [pc, #28]	; (8000784 <HAL_Init+0x28>)
 8000766:	f043 0310 	orr.w	r3, r3, #16
 800076a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800076c:	2003      	movs	r0, #3
 800076e:	f000 f8d1 	bl	8000914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000772:	200f      	movs	r0, #15
 8000774:	f7ff ff18 	bl	80005a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000778:	f7ff fe92 	bl	80004a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40022000 	.word	0x40022000

08000788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <HAL_IncTick+0x1c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <HAL_IncTick+0x20>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4413      	add	r3, r2
 8000798:	4a03      	ldr	r2, [pc, #12]	; (80007a8 <HAL_IncTick+0x20>)
 800079a:	6013      	str	r3, [r2, #0]
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	20000008 	.word	0x20000008
 80007a8:	20001104 	.word	0x20001104

080007ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return uwTick;
 80007b0:	4b02      	ldr	r3, [pc, #8]	; (80007bc <HAL_GetTick+0x10>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	20001104 	.word	0x20001104

080007c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <__NVIC_SetPriorityGrouping+0x44>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007dc:	4013      	ands	r3, r2
 80007de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f2:	4a04      	ldr	r2, [pc, #16]	; (8000804 <__NVIC_SetPriorityGrouping+0x44>)
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	60d3      	str	r3, [r2, #12]
}
 80007f8:	bf00      	nop
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800080c:	4b04      	ldr	r3, [pc, #16]	; (8000820 <__NVIC_GetPriorityGrouping+0x18>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	f003 0307 	and.w	r3, r3, #7
}
 8000816:	4618      	mov	r0, r3
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	2b00      	cmp	r3, #0
 8000834:	db0b      	blt.n	800084e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	f003 021f 	and.w	r2, r3, #31
 800083c:	4906      	ldr	r1, [pc, #24]	; (8000858 <__NVIC_EnableIRQ+0x34>)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	095b      	lsrs	r3, r3, #5
 8000844:	2001      	movs	r0, #1
 8000846:	fa00 f202 	lsl.w	r2, r0, r2
 800084a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	e000e100 	.word	0xe000e100

0800085c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	6039      	str	r1, [r7, #0]
 8000866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086c:	2b00      	cmp	r3, #0
 800086e:	db0a      	blt.n	8000886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	b2da      	uxtb	r2, r3
 8000874:	490c      	ldr	r1, [pc, #48]	; (80008a8 <__NVIC_SetPriority+0x4c>)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	0112      	lsls	r2, r2, #4
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	440b      	add	r3, r1
 8000880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000884:	e00a      	b.n	800089c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4908      	ldr	r1, [pc, #32]	; (80008ac <__NVIC_SetPriority+0x50>)
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	f003 030f 	and.w	r3, r3, #15
 8000892:	3b04      	subs	r3, #4
 8000894:	0112      	lsls	r2, r2, #4
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	440b      	add	r3, r1
 800089a:	761a      	strb	r2, [r3, #24]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000e100 	.word	0xe000e100
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b089      	sub	sp, #36	; 0x24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	f1c3 0307 	rsb	r3, r3, #7
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	bf28      	it	cs
 80008ce:	2304      	movcs	r3, #4
 80008d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	3304      	adds	r3, #4
 80008d6:	2b06      	cmp	r3, #6
 80008d8:	d902      	bls.n	80008e0 <NVIC_EncodePriority+0x30>
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3b03      	subs	r3, #3
 80008de:	e000      	b.n	80008e2 <NVIC_EncodePriority+0x32>
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	f04f 32ff 	mov.w	r2, #4294967295
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43da      	mvns	r2, r3
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	401a      	ands	r2, r3
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008f8:	f04f 31ff 	mov.w	r1, #4294967295
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000902:	43d9      	mvns	r1, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000908:	4313      	orrs	r3, r2
         );
}
 800090a:	4618      	mov	r0, r3
 800090c:	3724      	adds	r7, #36	; 0x24
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff ff4f 	bl	80007c0 <__NVIC_SetPriorityGrouping>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800092a:	b580      	push	{r7, lr}
 800092c:	b086      	sub	sp, #24
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
 8000936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800093c:	f7ff ff64 	bl	8000808 <__NVIC_GetPriorityGrouping>
 8000940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	68b9      	ldr	r1, [r7, #8]
 8000946:	6978      	ldr	r0, [r7, #20]
 8000948:	f7ff ffb2 	bl	80008b0 <NVIC_EncodePriority>
 800094c:	4602      	mov	r2, r0
 800094e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff81 	bl	800085c <__NVIC_SetPriority>
}
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	4603      	mov	r3, r0
 800096a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800096c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff57 	bl	8000824 <__NVIC_EnableIRQ>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000980:	b480      	push	{r7}
 8000982:	b08b      	sub	sp, #44	; 0x2c
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000992:	e179      	b.n	8000c88 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000994:	2201      	movs	r2, #1
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	69fa      	ldr	r2, [r7, #28]
 80009a4:	4013      	ands	r3, r2
 80009a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	f040 8168 	bne.w	8000c82 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	4aa0      	ldr	r2, [pc, #640]	; (8000c38 <HAL_GPIO_Init+0x2b8>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d05e      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
 80009bc:	4a9e      	ldr	r2, [pc, #632]	; (8000c38 <HAL_GPIO_Init+0x2b8>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d875      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009c2:	4a9e      	ldr	r2, [pc, #632]	; (8000c3c <HAL_GPIO_Init+0x2bc>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d058      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
 80009c8:	4a9c      	ldr	r2, [pc, #624]	; (8000c3c <HAL_GPIO_Init+0x2bc>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d86f      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009ce:	4a9c      	ldr	r2, [pc, #624]	; (8000c40 <HAL_GPIO_Init+0x2c0>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d052      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
 80009d4:	4a9a      	ldr	r2, [pc, #616]	; (8000c40 <HAL_GPIO_Init+0x2c0>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d869      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009da:	4a9a      	ldr	r2, [pc, #616]	; (8000c44 <HAL_GPIO_Init+0x2c4>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d04c      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
 80009e0:	4a98      	ldr	r2, [pc, #608]	; (8000c44 <HAL_GPIO_Init+0x2c4>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d863      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009e6:	4a98      	ldr	r2, [pc, #608]	; (8000c48 <HAL_GPIO_Init+0x2c8>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d046      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
 80009ec:	4a96      	ldr	r2, [pc, #600]	; (8000c48 <HAL_GPIO_Init+0x2c8>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d85d      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009f2:	2b12      	cmp	r3, #18
 80009f4:	d82a      	bhi.n	8000a4c <HAL_GPIO_Init+0xcc>
 80009f6:	2b12      	cmp	r3, #18
 80009f8:	d859      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009fa:	a201      	add	r2, pc, #4	; (adr r2, 8000a00 <HAL_GPIO_Init+0x80>)
 80009fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a00:	08000a7b 	.word	0x08000a7b
 8000a04:	08000a55 	.word	0x08000a55
 8000a08:	08000a67 	.word	0x08000a67
 8000a0c:	08000aa9 	.word	0x08000aa9
 8000a10:	08000aaf 	.word	0x08000aaf
 8000a14:	08000aaf 	.word	0x08000aaf
 8000a18:	08000aaf 	.word	0x08000aaf
 8000a1c:	08000aaf 	.word	0x08000aaf
 8000a20:	08000aaf 	.word	0x08000aaf
 8000a24:	08000aaf 	.word	0x08000aaf
 8000a28:	08000aaf 	.word	0x08000aaf
 8000a2c:	08000aaf 	.word	0x08000aaf
 8000a30:	08000aaf 	.word	0x08000aaf
 8000a34:	08000aaf 	.word	0x08000aaf
 8000a38:	08000aaf 	.word	0x08000aaf
 8000a3c:	08000aaf 	.word	0x08000aaf
 8000a40:	08000aaf 	.word	0x08000aaf
 8000a44:	08000a5d 	.word	0x08000a5d
 8000a48:	08000a71 	.word	0x08000a71
 8000a4c:	4a7f      	ldr	r2, [pc, #508]	; (8000c4c <HAL_GPIO_Init+0x2cc>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d013      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a52:	e02c      	b.n	8000aae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	623b      	str	r3, [r7, #32]
          break;
 8000a5a:	e029      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	3304      	adds	r3, #4
 8000a62:	623b      	str	r3, [r7, #32]
          break;
 8000a64:	e024      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	3308      	adds	r3, #8
 8000a6c:	623b      	str	r3, [r7, #32]
          break;
 8000a6e:	e01f      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	330c      	adds	r3, #12
 8000a76:	623b      	str	r3, [r7, #32]
          break;
 8000a78:	e01a      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d102      	bne.n	8000a88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a82:	2304      	movs	r3, #4
 8000a84:	623b      	str	r3, [r7, #32]
          break;
 8000a86:	e013      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d105      	bne.n	8000a9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a90:	2308      	movs	r3, #8
 8000a92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	69fa      	ldr	r2, [r7, #28]
 8000a98:	611a      	str	r2, [r3, #16]
          break;
 8000a9a:	e009      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	69fa      	ldr	r2, [r7, #28]
 8000aa4:	615a      	str	r2, [r3, #20]
          break;
 8000aa6:	e003      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
          break;
 8000aac:	e000      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          break;
 8000aae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	2bff      	cmp	r3, #255	; 0xff
 8000ab4:	d801      	bhi.n	8000aba <HAL_GPIO_Init+0x13a>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	e001      	b.n	8000abe <HAL_GPIO_Init+0x13e>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3304      	adds	r3, #4
 8000abe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	2bff      	cmp	r3, #255	; 0xff
 8000ac4:	d802      	bhi.n	8000acc <HAL_GPIO_Init+0x14c>
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	e002      	b.n	8000ad2 <HAL_GPIO_Init+0x152>
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	3b08      	subs	r3, #8
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	210f      	movs	r1, #15
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	6a39      	ldr	r1, [r7, #32]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aec:	431a      	orrs	r2, r3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 80c1 	beq.w	8000c82 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b00:	4b53      	ldr	r3, [pc, #332]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a52      	ldr	r2, [pc, #328]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b50      	ldr	r3, [pc, #320]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b18:	4a4e      	ldr	r2, [pc, #312]	; (8000c54 <HAL_GPIO_Init+0x2d4>)
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1c:	089b      	lsrs	r3, r3, #2
 8000b1e:	3302      	adds	r3, #2
 8000b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	f003 0303 	and.w	r3, r3, #3
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	220f      	movs	r2, #15
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a46      	ldr	r2, [pc, #280]	; (8000c58 <HAL_GPIO_Init+0x2d8>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d01f      	beq.n	8000b84 <HAL_GPIO_Init+0x204>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a45      	ldr	r2, [pc, #276]	; (8000c5c <HAL_GPIO_Init+0x2dc>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d019      	beq.n	8000b80 <HAL_GPIO_Init+0x200>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a44      	ldr	r2, [pc, #272]	; (8000c60 <HAL_GPIO_Init+0x2e0>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d013      	beq.n	8000b7c <HAL_GPIO_Init+0x1fc>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a43      	ldr	r2, [pc, #268]	; (8000c64 <HAL_GPIO_Init+0x2e4>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d00d      	beq.n	8000b78 <HAL_GPIO_Init+0x1f8>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a42      	ldr	r2, [pc, #264]	; (8000c68 <HAL_GPIO_Init+0x2e8>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d007      	beq.n	8000b74 <HAL_GPIO_Init+0x1f4>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a41      	ldr	r2, [pc, #260]	; (8000c6c <HAL_GPIO_Init+0x2ec>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d101      	bne.n	8000b70 <HAL_GPIO_Init+0x1f0>
 8000b6c:	2305      	movs	r3, #5
 8000b6e:	e00a      	b.n	8000b86 <HAL_GPIO_Init+0x206>
 8000b70:	2306      	movs	r3, #6
 8000b72:	e008      	b.n	8000b86 <HAL_GPIO_Init+0x206>
 8000b74:	2304      	movs	r3, #4
 8000b76:	e006      	b.n	8000b86 <HAL_GPIO_Init+0x206>
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e004      	b.n	8000b86 <HAL_GPIO_Init+0x206>
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	e002      	b.n	8000b86 <HAL_GPIO_Init+0x206>
 8000b80:	2301      	movs	r3, #1
 8000b82:	e000      	b.n	8000b86 <HAL_GPIO_Init+0x206>
 8000b84:	2300      	movs	r3, #0
 8000b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b88:	f002 0203 	and.w	r2, r2, #3
 8000b8c:	0092      	lsls	r2, r2, #2
 8000b8e:	4093      	lsls	r3, r2
 8000b90:	68fa      	ldr	r2, [r7, #12]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b96:	492f      	ldr	r1, [pc, #188]	; (8000c54 <HAL_GPIO_Init+0x2d4>)
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	089b      	lsrs	r3, r3, #2
 8000b9c:	3302      	adds	r3, #2
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d006      	beq.n	8000bbe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bb0:	4b2f      	ldr	r3, [pc, #188]	; (8000c70 <HAL_GPIO_Init+0x2f0>)
 8000bb2:	689a      	ldr	r2, [r3, #8]
 8000bb4:	492e      	ldr	r1, [pc, #184]	; (8000c70 <HAL_GPIO_Init+0x2f0>)
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	608b      	str	r3, [r1, #8]
 8000bbc:	e006      	b.n	8000bcc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bbe:	4b2c      	ldr	r3, [pc, #176]	; (8000c70 <HAL_GPIO_Init+0x2f0>)
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	492a      	ldr	r1, [pc, #168]	; (8000c70 <HAL_GPIO_Init+0x2f0>)
 8000bc8:	4013      	ands	r3, r2
 8000bca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d006      	beq.n	8000be6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bd8:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <HAL_GPIO_Init+0x2f0>)
 8000bda:	68da      	ldr	r2, [r3, #12]
 8000bdc:	4924      	ldr	r1, [pc, #144]	; (8000c70 <HAL_GPIO_Init+0x2f0>)
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	60cb      	str	r3, [r1, #12]
 8000be4:	e006      	b.n	8000bf4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000be6:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <HAL_GPIO_Init+0x2f0>)
 8000be8:	68da      	ldr	r2, [r3, #12]
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	4920      	ldr	r1, [pc, #128]	; (8000c70 <HAL_GPIO_Init+0x2f0>)
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d006      	beq.n	8000c0e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <HAL_GPIO_Init+0x2f0>)
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	491a      	ldr	r1, [pc, #104]	; (8000c70 <HAL_GPIO_Init+0x2f0>)
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	604b      	str	r3, [r1, #4]
 8000c0c:	e006      	b.n	8000c1c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <HAL_GPIO_Init+0x2f0>)
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	43db      	mvns	r3, r3
 8000c16:	4916      	ldr	r1, [pc, #88]	; (8000c70 <HAL_GPIO_Init+0x2f0>)
 8000c18:	4013      	ands	r3, r2
 8000c1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d025      	beq.n	8000c74 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_GPIO_Init+0x2f0>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4910      	ldr	r1, [pc, #64]	; (8000c70 <HAL_GPIO_Init+0x2f0>)
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	600b      	str	r3, [r1, #0]
 8000c34:	e025      	b.n	8000c82 <HAL_GPIO_Init+0x302>
 8000c36:	bf00      	nop
 8000c38:	10320000 	.word	0x10320000
 8000c3c:	10310000 	.word	0x10310000
 8000c40:	10220000 	.word	0x10220000
 8000c44:	10210000 	.word	0x10210000
 8000c48:	10120000 	.word	0x10120000
 8000c4c:	10110000 	.word	0x10110000
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40010000 	.word	0x40010000
 8000c58:	40010800 	.word	0x40010800
 8000c5c:	40010c00 	.word	0x40010c00
 8000c60:	40011000 	.word	0x40011000
 8000c64:	40011400 	.word	0x40011400
 8000c68:	40011800 	.word	0x40011800
 8000c6c:	40011c00 	.word	0x40011c00
 8000c70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <HAL_GPIO_Init+0x324>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	4909      	ldr	r1, [pc, #36]	; (8000ca4 <HAL_GPIO_Init+0x324>)
 8000c7e:	4013      	ands	r3, r2
 8000c80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	3301      	adds	r3, #1
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f47f ae7e 	bne.w	8000994 <HAL_GPIO_Init+0x14>
  }
}
 8000c98:	bf00      	nop
 8000c9a:	bf00      	nop
 8000c9c:	372c      	adds	r7, #44	; 0x2c
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	40010400 	.word	0x40010400

08000ca8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d101      	bne.n	8000cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e26c      	b.n	8001194 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 8087 	beq.w	8000dd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cc8:	4b92      	ldr	r3, [pc, #584]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 030c 	and.w	r3, r3, #12
 8000cd0:	2b04      	cmp	r3, #4
 8000cd2:	d00c      	beq.n	8000cee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cd4:	4b8f      	ldr	r3, [pc, #572]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 030c 	and.w	r3, r3, #12
 8000cdc:	2b08      	cmp	r3, #8
 8000cde:	d112      	bne.n	8000d06 <HAL_RCC_OscConfig+0x5e>
 8000ce0:	4b8c      	ldr	r3, [pc, #560]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cec:	d10b      	bne.n	8000d06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cee:	4b89      	ldr	r3, [pc, #548]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d06c      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x12c>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d168      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e246      	b.n	8001194 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d0e:	d106      	bne.n	8000d1e <HAL_RCC_OscConfig+0x76>
 8000d10:	4b80      	ldr	r3, [pc, #512]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a7f      	ldr	r2, [pc, #508]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d1a:	6013      	str	r3, [r2, #0]
 8000d1c:	e02e      	b.n	8000d7c <HAL_RCC_OscConfig+0xd4>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d10c      	bne.n	8000d40 <HAL_RCC_OscConfig+0x98>
 8000d26:	4b7b      	ldr	r3, [pc, #492]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a7a      	ldr	r2, [pc, #488]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d30:	6013      	str	r3, [r2, #0]
 8000d32:	4b78      	ldr	r3, [pc, #480]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a77      	ldr	r2, [pc, #476]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	e01d      	b.n	8000d7c <HAL_RCC_OscConfig+0xd4>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d48:	d10c      	bne.n	8000d64 <HAL_RCC_OscConfig+0xbc>
 8000d4a:	4b72      	ldr	r3, [pc, #456]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a71      	ldr	r2, [pc, #452]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	4b6f      	ldr	r3, [pc, #444]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a6e      	ldr	r2, [pc, #440]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	e00b      	b.n	8000d7c <HAL_RCC_OscConfig+0xd4>
 8000d64:	4b6b      	ldr	r3, [pc, #428]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a6a      	ldr	r2, [pc, #424]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	4b68      	ldr	r3, [pc, #416]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a67      	ldr	r2, [pc, #412]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d013      	beq.n	8000dac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d84:	f7ff fd12 	bl	80007ac <HAL_GetTick>
 8000d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8a:	e008      	b.n	8000d9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d8c:	f7ff fd0e 	bl	80007ac <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b64      	cmp	r3, #100	; 0x64
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e1fa      	b.n	8001194 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9e:	4b5d      	ldr	r3, [pc, #372]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f0      	beq.n	8000d8c <HAL_RCC_OscConfig+0xe4>
 8000daa:	e014      	b.n	8000dd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dac:	f7ff fcfe 	bl	80007ac <HAL_GetTick>
 8000db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000db2:	e008      	b.n	8000dc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db4:	f7ff fcfa 	bl	80007ac <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b64      	cmp	r3, #100	; 0x64
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e1e6      	b.n	8001194 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dc6:	4b53      	ldr	r3, [pc, #332]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1f0      	bne.n	8000db4 <HAL_RCC_OscConfig+0x10c>
 8000dd2:	e000      	b.n	8000dd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d063      	beq.n	8000eaa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000de2:	4b4c      	ldr	r3, [pc, #304]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 030c 	and.w	r3, r3, #12
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d00b      	beq.n	8000e06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dee:	4b49      	ldr	r3, [pc, #292]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 030c 	and.w	r3, r3, #12
 8000df6:	2b08      	cmp	r3, #8
 8000df8:	d11c      	bne.n	8000e34 <HAL_RCC_OscConfig+0x18c>
 8000dfa:	4b46      	ldr	r3, [pc, #280]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d116      	bne.n	8000e34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e06:	4b43      	ldr	r3, [pc, #268]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d005      	beq.n	8000e1e <HAL_RCC_OscConfig+0x176>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d001      	beq.n	8000e1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e1ba      	b.n	8001194 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e1e:	4b3d      	ldr	r3, [pc, #244]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	4939      	ldr	r1, [pc, #228]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e32:	e03a      	b.n	8000eaa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	691b      	ldr	r3, [r3, #16]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d020      	beq.n	8000e7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e3c:	4b36      	ldr	r3, [pc, #216]	; (8000f18 <HAL_RCC_OscConfig+0x270>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e42:	f7ff fcb3 	bl	80007ac <HAL_GetTick>
 8000e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e48:	e008      	b.n	8000e5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e4a:	f7ff fcaf 	bl	80007ac <HAL_GetTick>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d901      	bls.n	8000e5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e19b      	b.n	8001194 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e5c:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d0f0      	beq.n	8000e4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e68:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	4927      	ldr	r1, [pc, #156]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	600b      	str	r3, [r1, #0]
 8000e7c:	e015      	b.n	8000eaa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e7e:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <HAL_RCC_OscConfig+0x270>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e84:	f7ff fc92 	bl	80007ac <HAL_GetTick>
 8000e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e8a:	e008      	b.n	8000e9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e8c:	f7ff fc8e 	bl	80007ac <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d901      	bls.n	8000e9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e17a      	b.n	8001194 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d1f0      	bne.n	8000e8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d03a      	beq.n	8000f2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d019      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_RCC_OscConfig+0x274>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec4:	f7ff fc72 	bl	80007ac <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eca:	e008      	b.n	8000ede <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ecc:	f7ff fc6e 	bl	80007ac <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e15a      	b.n	8001194 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f0      	beq.n	8000ecc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f000 fafc 	bl	80014e8 <RCC_Delay>
 8000ef0:	e01c      	b.n	8000f2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_RCC_OscConfig+0x274>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef8:	f7ff fc58 	bl	80007ac <HAL_GetTick>
 8000efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000efe:	e00f      	b.n	8000f20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f00:	f7ff fc54 	bl	80007ac <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d908      	bls.n	8000f20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e140      	b.n	8001194 <HAL_RCC_OscConfig+0x4ec>
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000
 8000f18:	42420000 	.word	0x42420000
 8000f1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f20:	4b9e      	ldr	r3, [pc, #632]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8000f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1e9      	bne.n	8000f00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f000 80a6 	beq.w	8001086 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f3e:	4b97      	ldr	r3, [pc, #604]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10d      	bne.n	8000f66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b94      	ldr	r3, [pc, #592]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	4a93      	ldr	r2, [pc, #588]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f54:	61d3      	str	r3, [r2, #28]
 8000f56:	4b91      	ldr	r3, [pc, #580]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f62:	2301      	movs	r3, #1
 8000f64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f66:	4b8e      	ldr	r3, [pc, #568]	; (80011a0 <HAL_RCC_OscConfig+0x4f8>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d118      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f72:	4b8b      	ldr	r3, [pc, #556]	; (80011a0 <HAL_RCC_OscConfig+0x4f8>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a8a      	ldr	r2, [pc, #552]	; (80011a0 <HAL_RCC_OscConfig+0x4f8>)
 8000f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f7e:	f7ff fc15 	bl	80007ac <HAL_GetTick>
 8000f82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f84:	e008      	b.n	8000f98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f86:	f7ff fc11 	bl	80007ac <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b64      	cmp	r3, #100	; 0x64
 8000f92:	d901      	bls.n	8000f98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e0fd      	b.n	8001194 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f98:	4b81      	ldr	r3, [pc, #516]	; (80011a0 <HAL_RCC_OscConfig+0x4f8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0f0      	beq.n	8000f86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d106      	bne.n	8000fba <HAL_RCC_OscConfig+0x312>
 8000fac:	4b7b      	ldr	r3, [pc, #492]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8000fae:	6a1b      	ldr	r3, [r3, #32]
 8000fb0:	4a7a      	ldr	r2, [pc, #488]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6213      	str	r3, [r2, #32]
 8000fb8:	e02d      	b.n	8001016 <HAL_RCC_OscConfig+0x36e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10c      	bne.n	8000fdc <HAL_RCC_OscConfig+0x334>
 8000fc2:	4b76      	ldr	r3, [pc, #472]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8000fc4:	6a1b      	ldr	r3, [r3, #32]
 8000fc6:	4a75      	ldr	r2, [pc, #468]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8000fc8:	f023 0301 	bic.w	r3, r3, #1
 8000fcc:	6213      	str	r3, [r2, #32]
 8000fce:	4b73      	ldr	r3, [pc, #460]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8000fd0:	6a1b      	ldr	r3, [r3, #32]
 8000fd2:	4a72      	ldr	r2, [pc, #456]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8000fd4:	f023 0304 	bic.w	r3, r3, #4
 8000fd8:	6213      	str	r3, [r2, #32]
 8000fda:	e01c      	b.n	8001016 <HAL_RCC_OscConfig+0x36e>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	2b05      	cmp	r3, #5
 8000fe2:	d10c      	bne.n	8000ffe <HAL_RCC_OscConfig+0x356>
 8000fe4:	4b6d      	ldr	r3, [pc, #436]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8000fe6:	6a1b      	ldr	r3, [r3, #32]
 8000fe8:	4a6c      	ldr	r2, [pc, #432]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8000fea:	f043 0304 	orr.w	r3, r3, #4
 8000fee:	6213      	str	r3, [r2, #32]
 8000ff0:	4b6a      	ldr	r3, [pc, #424]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	4a69      	ldr	r2, [pc, #420]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6213      	str	r3, [r2, #32]
 8000ffc:	e00b      	b.n	8001016 <HAL_RCC_OscConfig+0x36e>
 8000ffe:	4b67      	ldr	r3, [pc, #412]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8001000:	6a1b      	ldr	r3, [r3, #32]
 8001002:	4a66      	ldr	r2, [pc, #408]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8001004:	f023 0301 	bic.w	r3, r3, #1
 8001008:	6213      	str	r3, [r2, #32]
 800100a:	4b64      	ldr	r3, [pc, #400]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	4a63      	ldr	r2, [pc, #396]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8001010:	f023 0304 	bic.w	r3, r3, #4
 8001014:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d015      	beq.n	800104a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800101e:	f7ff fbc5 	bl	80007ac <HAL_GetTick>
 8001022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001024:	e00a      	b.n	800103c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001026:	f7ff fbc1 	bl	80007ac <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	f241 3288 	movw	r2, #5000	; 0x1388
 8001034:	4293      	cmp	r3, r2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e0ab      	b.n	8001194 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800103c:	4b57      	ldr	r3, [pc, #348]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0ee      	beq.n	8001026 <HAL_RCC_OscConfig+0x37e>
 8001048:	e014      	b.n	8001074 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104a:	f7ff fbaf 	bl	80007ac <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001050:	e00a      	b.n	8001068 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001052:	f7ff fbab 	bl	80007ac <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001060:	4293      	cmp	r3, r2
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e095      	b.n	8001194 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001068:	4b4c      	ldr	r3, [pc, #304]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1ee      	bne.n	8001052 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d105      	bne.n	8001086 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800107a:	4b48      	ldr	r3, [pc, #288]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	4a47      	ldr	r2, [pc, #284]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8001080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001084:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 8081 	beq.w	8001192 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001090:	4b42      	ldr	r3, [pc, #264]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 030c 	and.w	r3, r3, #12
 8001098:	2b08      	cmp	r3, #8
 800109a:	d061      	beq.n	8001160 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d146      	bne.n	8001132 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010a4:	4b3f      	ldr	r3, [pc, #252]	; (80011a4 <HAL_RCC_OscConfig+0x4fc>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010aa:	f7ff fb7f 	bl	80007ac <HAL_GetTick>
 80010ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010b2:	f7ff fb7b 	bl	80007ac <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e067      	b.n	8001194 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c4:	4b35      	ldr	r3, [pc, #212]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1f0      	bne.n	80010b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d8:	d108      	bne.n	80010ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010da:	4b30      	ldr	r3, [pc, #192]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	492d      	ldr	r1, [pc, #180]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010ec:	4b2b      	ldr	r3, [pc, #172]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a19      	ldr	r1, [r3, #32]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	430b      	orrs	r3, r1
 80010fe:	4927      	ldr	r1, [pc, #156]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8001100:	4313      	orrs	r3, r2
 8001102:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001104:	4b27      	ldr	r3, [pc, #156]	; (80011a4 <HAL_RCC_OscConfig+0x4fc>)
 8001106:	2201      	movs	r2, #1
 8001108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110a:	f7ff fb4f 	bl	80007ac <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001112:	f7ff fb4b 	bl	80007ac <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e037      	b.n	8001194 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001124:	4b1d      	ldr	r3, [pc, #116]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0f0      	beq.n	8001112 <HAL_RCC_OscConfig+0x46a>
 8001130:	e02f      	b.n	8001192 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <HAL_RCC_OscConfig+0x4fc>)
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001138:	f7ff fb38 	bl	80007ac <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001140:	f7ff fb34 	bl	80007ac <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e020      	b.n	8001194 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1f0      	bne.n	8001140 <HAL_RCC_OscConfig+0x498>
 800115e:	e018      	b.n	8001192 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69db      	ldr	r3, [r3, #28]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d101      	bne.n	800116c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e013      	b.n	8001194 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <HAL_RCC_OscConfig+0x4f4>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	429a      	cmp	r2, r3
 800117e:	d106      	bne.n	800118e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800118a:	429a      	cmp	r2, r3
 800118c:	d001      	beq.n	8001192 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40021000 	.word	0x40021000
 80011a0:	40007000 	.word	0x40007000
 80011a4:	42420060 	.word	0x42420060

080011a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e0d0      	b.n	800135e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011bc:	4b6a      	ldr	r3, [pc, #424]	; (8001368 <HAL_RCC_ClockConfig+0x1c0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d910      	bls.n	80011ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ca:	4b67      	ldr	r3, [pc, #412]	; (8001368 <HAL_RCC_ClockConfig+0x1c0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f023 0207 	bic.w	r2, r3, #7
 80011d2:	4965      	ldr	r1, [pc, #404]	; (8001368 <HAL_RCC_ClockConfig+0x1c0>)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011da:	4b63      	ldr	r3, [pc, #396]	; (8001368 <HAL_RCC_ClockConfig+0x1c0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d001      	beq.n	80011ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e0b8      	b.n	800135e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d020      	beq.n	800123a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001204:	4b59      	ldr	r3, [pc, #356]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	4a58      	ldr	r2, [pc, #352]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 800120a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800120e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	2b00      	cmp	r3, #0
 800121a:	d005      	beq.n	8001228 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800121c:	4b53      	ldr	r3, [pc, #332]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	4a52      	ldr	r2, [pc, #328]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001226:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001228:	4b50      	ldr	r3, [pc, #320]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	494d      	ldr	r1, [pc, #308]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	4313      	orrs	r3, r2
 8001238:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d040      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d107      	bne.n	800125e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124e:	4b47      	ldr	r3, [pc, #284]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d115      	bne.n	8001286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e07f      	b.n	800135e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d107      	bne.n	8001276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001266:	4b41      	ldr	r3, [pc, #260]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d109      	bne.n	8001286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e073      	b.n	800135e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001276:	4b3d      	ldr	r3, [pc, #244]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e06b      	b.n	800135e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001286:	4b39      	ldr	r3, [pc, #228]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f023 0203 	bic.w	r2, r3, #3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	4936      	ldr	r1, [pc, #216]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001294:	4313      	orrs	r3, r2
 8001296:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001298:	f7ff fa88 	bl	80007ac <HAL_GetTick>
 800129c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800129e:	e00a      	b.n	80012b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a0:	f7ff fa84 	bl	80007ac <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e053      	b.n	800135e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b6:	4b2d      	ldr	r3, [pc, #180]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 020c 	and.w	r2, r3, #12
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d1eb      	bne.n	80012a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012c8:	4b27      	ldr	r3, [pc, #156]	; (8001368 <HAL_RCC_ClockConfig+0x1c0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d210      	bcs.n	80012f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <HAL_RCC_ClockConfig+0x1c0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 0207 	bic.w	r2, r3, #7
 80012de:	4922      	ldr	r1, [pc, #136]	; (8001368 <HAL_RCC_ClockConfig+0x1c0>)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <HAL_RCC_ClockConfig+0x1c0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d001      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e032      	b.n	800135e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	d008      	beq.n	8001316 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	4916      	ldr	r1, [pc, #88]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001312:	4313      	orrs	r3, r2
 8001314:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	2b00      	cmp	r3, #0
 8001320:	d009      	beq.n	8001336 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	490e      	ldr	r1, [pc, #56]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001332:	4313      	orrs	r3, r2
 8001334:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001336:	f000 f821 	bl	800137c <HAL_RCC_GetSysClockFreq>
 800133a:	4602      	mov	r2, r0
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	091b      	lsrs	r3, r3, #4
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	490a      	ldr	r1, [pc, #40]	; (8001370 <HAL_RCC_ClockConfig+0x1c8>)
 8001348:	5ccb      	ldrb	r3, [r1, r3]
 800134a:	fa22 f303 	lsr.w	r3, r2, r3
 800134e:	4a09      	ldr	r2, [pc, #36]	; (8001374 <HAL_RCC_ClockConfig+0x1cc>)
 8001350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_RCC_ClockConfig+0x1d0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f926 	bl	80005a8 <HAL_InitTick>

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40022000 	.word	0x40022000
 800136c:	40021000 	.word	0x40021000
 8001370:	08003b8c 	.word	0x08003b8c
 8001374:	20000000 	.word	0x20000000
 8001378:	20000004 	.word	0x20000004

0800137c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b087      	sub	sp, #28
 8001380:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001396:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <HAL_RCC_GetSysClockFreq+0x94>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 030c 	and.w	r3, r3, #12
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d002      	beq.n	80013ac <HAL_RCC_GetSysClockFreq+0x30>
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d003      	beq.n	80013b2 <HAL_RCC_GetSysClockFreq+0x36>
 80013aa:	e027      	b.n	80013fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ae:	613b      	str	r3, [r7, #16]
      break;
 80013b0:	e027      	b.n	8001402 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	0c9b      	lsrs	r3, r3, #18
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	4a17      	ldr	r2, [pc, #92]	; (8001418 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013bc:	5cd3      	ldrb	r3, [r2, r3]
 80013be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d010      	beq.n	80013ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_RCC_GetSysClockFreq+0x94>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	0c5b      	lsrs	r3, r3, #17
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	4a11      	ldr	r2, [pc, #68]	; (800141c <HAL_RCC_GetSysClockFreq+0xa0>)
 80013d6:	5cd3      	ldrb	r3, [r2, r3]
 80013d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <HAL_RCC_GetSysClockFreq+0x98>)
 80013de:	fb02 f203 	mul.w	r2, r2, r3
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	e004      	b.n	80013f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a0c      	ldr	r2, [pc, #48]	; (8001420 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
 80013f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	613b      	str	r3, [r7, #16]
      break;
 80013fa:	e002      	b.n	8001402 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_RCC_GetSysClockFreq+0x98>)
 80013fe:	613b      	str	r3, [r7, #16]
      break;
 8001400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001402:	693b      	ldr	r3, [r7, #16]
}
 8001404:	4618      	mov	r0, r3
 8001406:	371c      	adds	r7, #28
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000
 8001414:	007a1200 	.word	0x007a1200
 8001418:	08003ba4 	.word	0x08003ba4
 800141c:	08003bb4 	.word	0x08003bb4
 8001420:	003d0900 	.word	0x003d0900

08001424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001428:	4b02      	ldr	r3, [pc, #8]	; (8001434 <HAL_RCC_GetHCLKFreq+0x10>)
 800142a:	681b      	ldr	r3, [r3, #0]
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	20000000 	.word	0x20000000

08001438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800143c:	f7ff fff2 	bl	8001424 <HAL_RCC_GetHCLKFreq>
 8001440:	4602      	mov	r2, r0
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	0a1b      	lsrs	r3, r3, #8
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	4903      	ldr	r1, [pc, #12]	; (800145c <HAL_RCC_GetPCLK1Freq+0x24>)
 800144e:	5ccb      	ldrb	r3, [r1, r3]
 8001450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001454:	4618      	mov	r0, r3
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40021000 	.word	0x40021000
 800145c:	08003b9c 	.word	0x08003b9c

08001460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001464:	f7ff ffde 	bl	8001424 <HAL_RCC_GetHCLKFreq>
 8001468:	4602      	mov	r2, r0
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	0adb      	lsrs	r3, r3, #11
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	4903      	ldr	r1, [pc, #12]	; (8001484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001476:	5ccb      	ldrb	r3, [r1, r3]
 8001478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800147c:	4618      	mov	r0, r3
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40021000 	.word	0x40021000
 8001484:	08003b9c 	.word	0x08003b9c

08001488 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	220f      	movs	r2, #15
 8001496:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_RCC_GetClockConfig+0x58>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0203 	and.w	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_RCC_GetClockConfig+0x58>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_RCC_GetClockConfig+0x58>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_RCC_GetClockConfig+0x58>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	08db      	lsrs	r3, r3, #3
 80014c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_RCC_GetClockConfig+0x5c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0207 	and.w	r2, r3, #7
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40022000 	.word	0x40022000

080014e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <RCC_Delay+0x34>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <RCC_Delay+0x38>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	0a5b      	lsrs	r3, r3, #9
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	fb02 f303 	mul.w	r3, r2, r3
 8001502:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001504:	bf00      	nop
  }
  while (Delay --);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1e5a      	subs	r2, r3, #1
 800150a:	60fa      	str	r2, [r7, #12]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1f9      	bne.n	8001504 <RCC_Delay+0x1c>
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	20000000 	.word	0x20000000
 8001520:	10624dd3 	.word	0x10624dd3

08001524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e041      	b.n	80015ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d106      	bne.n	8001550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f839 	bl	80015c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2202      	movs	r2, #2
 8001554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3304      	adds	r3, #4
 8001560:	4619      	mov	r1, r3
 8001562:	4610      	mov	r0, r2
 8001564:	f000 f9aa 	bl	80018bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d001      	beq.n	80015ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e044      	b.n	8001676 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2202      	movs	r2, #2
 80015f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0201 	orr.w	r2, r2, #1
 8001602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a1d      	ldr	r2, [pc, #116]	; (8001680 <HAL_TIM_Base_Start_IT+0xac>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d018      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x6c>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a1c      	ldr	r2, [pc, #112]	; (8001684 <HAL_TIM_Base_Start_IT+0xb0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d013      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x6c>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001620:	d00e      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x6c>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a18      	ldr	r2, [pc, #96]	; (8001688 <HAL_TIM_Base_Start_IT+0xb4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d009      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x6c>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a16      	ldr	r2, [pc, #88]	; (800168c <HAL_TIM_Base_Start_IT+0xb8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d004      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x6c>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a15      	ldr	r2, [pc, #84]	; (8001690 <HAL_TIM_Base_Start_IT+0xbc>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d111      	bne.n	8001664 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b06      	cmp	r3, #6
 8001650:	d010      	beq.n	8001674 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 0201 	orr.w	r2, r2, #1
 8001660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001662:	e007      	b.n	8001674 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0201 	orr.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	40012c00 	.word	0x40012c00
 8001684:	40013400 	.word	0x40013400
 8001688:	40000400 	.word	0x40000400
 800168c:	40000800 	.word	0x40000800
 8001690:	40000c00 	.word	0x40000c00

08001694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d020      	beq.n	80016f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d01b      	beq.n	80016f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f06f 0202 	mvn.w	r2, #2
 80016c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f8d1 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
 80016e4:	e005      	b.n	80016f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f8c4 	bl	8001874 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 f8d3 	bl	8001898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d020      	beq.n	8001744 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d01b      	beq.n	8001744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f06f 0204 	mvn.w	r2, #4
 8001714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2202      	movs	r2, #2
 800171a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f8ab 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
 8001730:	e005      	b.n	800173e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f89e 	bl	8001874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f8ad 	bl	8001898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d020      	beq.n	8001790 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d01b      	beq.n	8001790 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f06f 0208 	mvn.w	r2, #8
 8001760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2204      	movs	r2, #4
 8001766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f885 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
 800177c:	e005      	b.n	800178a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f878 	bl	8001874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f887 	bl	8001898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	2b00      	cmp	r3, #0
 8001798:	d020      	beq.n	80017dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d01b      	beq.n	80017dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f06f 0210 	mvn.w	r2, #16
 80017ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2208      	movs	r2, #8
 80017b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f85f 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
 80017c8:	e005      	b.n	80017d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f852 	bl	8001874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f861 	bl	8001898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00c      	beq.n	8001800 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d007      	beq.n	8001800 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f06f 0201 	mvn.w	r2, #1
 80017f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7fe fe18 	bl	8000430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00c      	beq.n	8001824 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001810:	2b00      	cmp	r3, #0
 8001812:	d007      	beq.n	8001824 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800181c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f8db 	bl	80019da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00c      	beq.n	8001848 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f831 	bl	80018aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	f003 0320 	and.w	r3, r3, #32
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00c      	beq.n	800186c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f003 0320 	and.w	r3, r3, #32
 8001858:	2b00      	cmp	r3, #0
 800185a:	d007      	beq.n	800186c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f06f 0220 	mvn.w	r2, #32
 8001864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f8ae 	bl	80019c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800186c:	bf00      	nop
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a39      	ldr	r2, [pc, #228]	; (80019b4 <TIM_Base_SetConfig+0xf8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d013      	beq.n	80018fc <TIM_Base_SetConfig+0x40>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a38      	ldr	r2, [pc, #224]	; (80019b8 <TIM_Base_SetConfig+0xfc>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d00f      	beq.n	80018fc <TIM_Base_SetConfig+0x40>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e2:	d00b      	beq.n	80018fc <TIM_Base_SetConfig+0x40>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a35      	ldr	r2, [pc, #212]	; (80019bc <TIM_Base_SetConfig+0x100>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d007      	beq.n	80018fc <TIM_Base_SetConfig+0x40>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a34      	ldr	r2, [pc, #208]	; (80019c0 <TIM_Base_SetConfig+0x104>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d003      	beq.n	80018fc <TIM_Base_SetConfig+0x40>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a33      	ldr	r2, [pc, #204]	; (80019c4 <TIM_Base_SetConfig+0x108>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d108      	bne.n	800190e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	4313      	orrs	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a28      	ldr	r2, [pc, #160]	; (80019b4 <TIM_Base_SetConfig+0xf8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d013      	beq.n	800193e <TIM_Base_SetConfig+0x82>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a27      	ldr	r2, [pc, #156]	; (80019b8 <TIM_Base_SetConfig+0xfc>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d00f      	beq.n	800193e <TIM_Base_SetConfig+0x82>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001924:	d00b      	beq.n	800193e <TIM_Base_SetConfig+0x82>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a24      	ldr	r2, [pc, #144]	; (80019bc <TIM_Base_SetConfig+0x100>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d007      	beq.n	800193e <TIM_Base_SetConfig+0x82>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a23      	ldr	r2, [pc, #140]	; (80019c0 <TIM_Base_SetConfig+0x104>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d003      	beq.n	800193e <TIM_Base_SetConfig+0x82>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a22      	ldr	r2, [pc, #136]	; (80019c4 <TIM_Base_SetConfig+0x108>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d108      	bne.n	8001950 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	4313      	orrs	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	4313      	orrs	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a0f      	ldr	r2, [pc, #60]	; (80019b4 <TIM_Base_SetConfig+0xf8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d003      	beq.n	8001984 <TIM_Base_SetConfig+0xc8>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <TIM_Base_SetConfig+0xfc>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d103      	bne.n	800198c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d005      	beq.n	80019aa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	f023 0201 	bic.w	r2, r3, #1
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	611a      	str	r2, [r3, #16]
  }
}
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	40012c00 	.word	0x40012c00
 80019b8:	40013400 	.word	0x40013400
 80019bc:	40000400 	.word	0x40000400
 80019c0:	40000800 	.word	0x40000800
 80019c4:	40000c00 	.word	0x40000c00

080019c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e042      	b.n	8001a84 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d106      	bne.n	8001a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7fe fd7c 	bl	8000510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2224      	movs	r2, #36	; 0x24
 8001a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f971 	bl	8001d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695a      	ldr	r2, [r3, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2220      	movs	r2, #32
 8001a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2220      	movs	r2, #32
 8001a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af02      	add	r7, sp, #8
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b20      	cmp	r3, #32
 8001aaa:	d175      	bne.n	8001b98 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <HAL_UART_Transmit+0x2c>
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e06e      	b.n	8001b9a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2221      	movs	r2, #33	; 0x21
 8001ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001aca:	f7fe fe6f 	bl	80007ac <HAL_GetTick>
 8001ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	88fa      	ldrh	r2, [r7, #6]
 8001ad4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	88fa      	ldrh	r2, [r7, #6]
 8001ada:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae4:	d108      	bne.n	8001af8 <HAL_UART_Transmit+0x6c>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d104      	bne.n	8001af8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	e003      	b.n	8001b00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b00:	e02e      	b.n	8001b60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2180      	movs	r1, #128	; 0x80
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f848 	bl	8001ba2 <UART_WaitOnFlagUntilTimeout>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e03a      	b.n	8001b9a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10b      	bne.n	8001b42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	61bb      	str	r3, [r7, #24]
 8001b40:	e007      	b.n	8001b52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1cb      	bne.n	8001b02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2200      	movs	r2, #0
 8001b72:	2140      	movs	r1, #64	; 0x40
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f000 f814 	bl	8001ba2 <UART_WaitOnFlagUntilTimeout>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e006      	b.n	8001b9a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	e000      	b.n	8001b9a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001b98:	2302      	movs	r3, #2
  }
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3720      	adds	r7, #32
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b086      	sub	sp, #24
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	603b      	str	r3, [r7, #0]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bb2:	e03b      	b.n	8001c2c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bba:	d037      	beq.n	8001c2c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bbc:	f7fe fdf6 	bl	80007ac <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	6a3a      	ldr	r2, [r7, #32]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d302      	bcc.n	8001bd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e03a      	b.n	8001c4c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d023      	beq.n	8001c2c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b80      	cmp	r3, #128	; 0x80
 8001be8:	d020      	beq.n	8001c2c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b40      	cmp	r3, #64	; 0x40
 8001bee:	d01d      	beq.n	8001c2c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d116      	bne.n	8001c2c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 f81d 	bl	8001c54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2208      	movs	r2, #8
 8001c1e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e00f      	b.n	8001c4c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	4013      	ands	r3, r2
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	bf0c      	ite	eq
 8001c3c:	2301      	moveq	r3, #1
 8001c3e:	2300      	movne	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	461a      	mov	r2, r3
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d0b4      	beq.n	8001bb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b095      	sub	sp, #84	; 0x54
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	330c      	adds	r3, #12
 8001c62:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c66:	e853 3f00 	ldrex	r3, [r3]
 8001c6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	330c      	adds	r3, #12
 8001c7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c7c:	643a      	str	r2, [r7, #64]	; 0x40
 8001c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001c82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c84:	e841 2300 	strex	r3, r2, [r1]
 8001c88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1e5      	bne.n	8001c5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3314      	adds	r3, #20
 8001c96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c98:	6a3b      	ldr	r3, [r7, #32]
 8001c9a:	e853 3f00 	ldrex	r3, [r3]
 8001c9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f023 0301 	bic.w	r3, r3, #1
 8001ca6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3314      	adds	r3, #20
 8001cae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001cb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cb8:	e841 2300 	strex	r3, r2, [r1]
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1e5      	bne.n	8001c90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d119      	bne.n	8001d00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	330c      	adds	r3, #12
 8001cd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	e853 3f00 	ldrex	r3, [r3]
 8001cda:	60bb      	str	r3, [r7, #8]
   return(result);
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f023 0310 	bic.w	r3, r3, #16
 8001ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	330c      	adds	r3, #12
 8001cea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001cec:	61ba      	str	r2, [r7, #24]
 8001cee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cf0:	6979      	ldr	r1, [r7, #20]
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	e841 2300 	strex	r3, r2, [r1]
 8001cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1e5      	bne.n	8001ccc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2220      	movs	r2, #32
 8001d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001d0e:	bf00      	nop
 8001d10:	3754      	adds	r7, #84	; 0x54
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d52:	f023 030c 	bic.w	r3, r3, #12
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	68b9      	ldr	r1, [r7, #8]
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699a      	ldr	r2, [r3, #24]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a2c      	ldr	r2, [pc, #176]	; (8001e2c <UART_SetConfig+0x114>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d103      	bne.n	8001d88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d80:	f7ff fb6e 	bl	8001460 <HAL_RCC_GetPCLK2Freq>
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	e002      	b.n	8001d8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d88:	f7ff fb56 	bl	8001438 <HAL_RCC_GetPCLK1Freq>
 8001d8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	009a      	lsls	r2, r3, #2
 8001d98:	441a      	add	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	4a22      	ldr	r2, [pc, #136]	; (8001e30 <UART_SetConfig+0x118>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	0119      	lsls	r1, r3, #4
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	009a      	lsls	r2, r3, #2
 8001db8:	441a      	add	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <UART_SetConfig+0x118>)
 8001dc6:	fba3 0302 	umull	r0, r3, r3, r2
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	2064      	movs	r0, #100	; 0x64
 8001dce:	fb00 f303 	mul.w	r3, r0, r3
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	3332      	adds	r3, #50	; 0x32
 8001dd8:	4a15      	ldr	r2, [pc, #84]	; (8001e30 <UART_SetConfig+0x118>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001de4:	4419      	add	r1, r3
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	009a      	lsls	r2, r3, #2
 8001df0:	441a      	add	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <UART_SetConfig+0x118>)
 8001dfe:	fba3 0302 	umull	r0, r3, r3, r2
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	2064      	movs	r0, #100	; 0x64
 8001e06:	fb00 f303 	mul.w	r3, r0, r3
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	3332      	adds	r3, #50	; 0x32
 8001e10:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <UART_SetConfig+0x118>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	f003 020f 	and.w	r2, r3, #15
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	440a      	add	r2, r1
 8001e22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e24:	bf00      	nop
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40013800 	.word	0x40013800
 8001e30:	51eb851f 	.word	0x51eb851f

08001e34 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e46:	2b84      	cmp	r3, #132	; 0x84
 8001e48:	d005      	beq.n	8001e56 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001e4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4413      	add	r3, r2
 8001e52:	3303      	adds	r3, #3
 8001e54:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001e56:	68fb      	ldr	r3, [r7, #12]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr

08001e62 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001e66:	f000 fad9 	bl	800241c <vTaskStartScheduler>
  
  return osOK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af04      	add	r7, sp, #16
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d020      	beq.n	8001ec4 <osThreadCreate+0x54>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d01c      	beq.n	8001ec4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685c      	ldr	r4, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681d      	ldr	r5, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691e      	ldr	r6, [r3, #16]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ffc9 	bl	8001e34 <makeFreeRtosPriority>
 8001ea2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001eac:	9202      	str	r2, [sp, #8]
 8001eae:	9301      	str	r3, [sp, #4]
 8001eb0:	9100      	str	r1, [sp, #0]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	4632      	mov	r2, r6
 8001eb6:	4629      	mov	r1, r5
 8001eb8:	4620      	mov	r0, r4
 8001eba:	f000 f8e8 	bl	800208e <xTaskCreateStatic>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	e01c      	b.n	8001efe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685c      	ldr	r4, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ed0:	b29e      	uxth	r6, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ffab 	bl	8001e34 <makeFreeRtosPriority>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	9200      	str	r2, [sp, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	4632      	mov	r2, r6
 8001eec:	4629      	mov	r1, r5
 8001eee:	4620      	mov	r0, r4
 8001ef0:	f000 f92a 	bl	8002148 <xTaskCreate>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d001      	beq.n	8001efe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e000      	b.n	8001f00 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001efe:	68fb      	ldr	r3, [r7, #12]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f08 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <osDelay+0x16>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	e000      	b.n	8001f20 <osDelay+0x18>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 fa47 	bl	80023b4 <vTaskDelay>
  
  return osOK;
 8001f26:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f103 0208 	add.w	r2, r3, #8
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f04f 32ff 	mov.w	r2, #4294967295
 8001f48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f103 0208 	add.w	r2, r3, #8
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f103 0208 	add.w	r2, r3, #8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f86:	b480      	push	{r7}
 8001f88:	b085      	sub	sp, #20
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	601a      	str	r2, [r3, #0]
}
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe2:	d103      	bne.n	8001fec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	e00c      	b.n	8002006 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3308      	adds	r3, #8
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	e002      	b.n	8001ffa <vListInsert+0x2e>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	429a      	cmp	r2, r3
 8002004:	d2f6      	bcs.n	8001ff4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	601a      	str	r2, [r3, #0]
}
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6892      	ldr	r2, [r2, #8]
 8002052:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6852      	ldr	r2, [r2, #4]
 800205c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	429a      	cmp	r2, r3
 8002066:	d103      	bne.n	8002070 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	1e5a      	subs	r2, r3, #1
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr

0800208e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800208e:	b580      	push	{r7, lr}
 8002090:	b08e      	sub	sp, #56	; 0x38
 8002092:	af04      	add	r7, sp, #16
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800209c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10a      	bne.n	80020b8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a6:	f383 8811 	msr	BASEPRI, r3
 80020aa:	f3bf 8f6f 	isb	sy
 80020ae:	f3bf 8f4f 	dsb	sy
 80020b2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80020b4:	bf00      	nop
 80020b6:	e7fe      	b.n	80020b6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80020b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10a      	bne.n	80020d4 <xTaskCreateStatic+0x46>
	__asm volatile
 80020be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c2:	f383 8811 	msr	BASEPRI, r3
 80020c6:	f3bf 8f6f 	isb	sy
 80020ca:	f3bf 8f4f 	dsb	sy
 80020ce:	61fb      	str	r3, [r7, #28]
}
 80020d0:	bf00      	nop
 80020d2:	e7fe      	b.n	80020d2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80020d4:	2354      	movs	r3, #84	; 0x54
 80020d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	2b54      	cmp	r3, #84	; 0x54
 80020dc:	d00a      	beq.n	80020f4 <xTaskCreateStatic+0x66>
	__asm volatile
 80020de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e2:	f383 8811 	msr	BASEPRI, r3
 80020e6:	f3bf 8f6f 	isb	sy
 80020ea:	f3bf 8f4f 	dsb	sy
 80020ee:	61bb      	str	r3, [r7, #24]
}
 80020f0:	bf00      	nop
 80020f2:	e7fe      	b.n	80020f2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80020f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80020f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d01e      	beq.n	800213a <xTaskCreateStatic+0xac>
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d01b      	beq.n	800213a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800210a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	2202      	movs	r2, #2
 8002110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002114:	2300      	movs	r3, #0
 8002116:	9303      	str	r3, [sp, #12]
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	9302      	str	r3, [sp, #8]
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68b9      	ldr	r1, [r7, #8]
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 f850 	bl	80021d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002132:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002134:	f000 f8d4 	bl	80022e0 <prvAddNewTaskToReadyList>
 8002138:	e001      	b.n	800213e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800213e:	697b      	ldr	r3, [r7, #20]
	}
 8002140:	4618      	mov	r0, r3
 8002142:	3728      	adds	r7, #40	; 0x28
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08c      	sub	sp, #48	; 0x30
 800214c:	af04      	add	r7, sp, #16
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	4613      	mov	r3, r2
 8002156:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fe67 	bl	8002e30 <pvPortMalloc>
 8002162:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00e      	beq.n	8002188 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800216a:	2054      	movs	r0, #84	; 0x54
 800216c:	f000 fe60 	bl	8002e30 <pvPortMalloc>
 8002170:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	631a      	str	r2, [r3, #48]	; 0x30
 800217e:	e005      	b.n	800218c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002180:	6978      	ldr	r0, [r7, #20]
 8002182:	f000 ff21 	bl	8002fc8 <vPortFree>
 8002186:	e001      	b.n	800218c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002188:	2300      	movs	r3, #0
 800218a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d017      	beq.n	80021c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800219a:	88fa      	ldrh	r2, [r7, #6]
 800219c:	2300      	movs	r3, #0
 800219e:	9303      	str	r3, [sp, #12]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	9302      	str	r3, [sp, #8]
 80021a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a6:	9301      	str	r3, [sp, #4]
 80021a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68b9      	ldr	r1, [r7, #8]
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 f80e 	bl	80021d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80021b6:	69f8      	ldr	r0, [r7, #28]
 80021b8:	f000 f892 	bl	80022e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80021bc:	2301      	movs	r3, #1
 80021be:	61bb      	str	r3, [r7, #24]
 80021c0:	e002      	b.n	80021c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295
 80021c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80021c8:	69bb      	ldr	r3, [r7, #24]
	}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3720      	adds	r7, #32
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b088      	sub	sp, #32
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
 80021de:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80021e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021ea:	3b01      	subs	r3, #1
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	f023 0307 	bic.w	r3, r3, #7
 80021f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <prvInitialiseNewTask+0x48>
	__asm volatile
 8002204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002208:	f383 8811 	msr	BASEPRI, r3
 800220c:	f3bf 8f6f 	isb	sy
 8002210:	f3bf 8f4f 	dsb	sy
 8002214:	617b      	str	r3, [r7, #20]
}
 8002216:	bf00      	nop
 8002218:	e7fe      	b.n	8002218 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d01f      	beq.n	8002260 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
 8002224:	e012      	b.n	800224c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	4413      	add	r3, r2
 800222c:	7819      	ldrb	r1, [r3, #0]
 800222e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	4413      	add	r3, r2
 8002234:	3334      	adds	r3, #52	; 0x34
 8002236:	460a      	mov	r2, r1
 8002238:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	4413      	add	r3, r2
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d006      	beq.n	8002254 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3301      	adds	r3, #1
 800224a:	61fb      	str	r3, [r7, #28]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	2b0f      	cmp	r3, #15
 8002250:	d9e9      	bls.n	8002226 <prvInitialiseNewTask+0x54>
 8002252:	e000      	b.n	8002256 <prvInitialiseNewTask+0x84>
			{
				break;
 8002254:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800225e:	e003      	b.n	8002268 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226a:	2b06      	cmp	r3, #6
 800226c:	d901      	bls.n	8002272 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800226e:	2306      	movs	r3, #6
 8002270:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800227c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002280:	2200      	movs	r2, #0
 8002282:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002286:	3304      	adds	r3, #4
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fe70 	bl	8001f6e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002290:	3318      	adds	r3, #24
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fe6b 	bl	8001f6e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800229c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800229e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a0:	f1c3 0207 	rsb	r2, r3, #7
 80022a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80022ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b0:	2200      	movs	r2, #0
 80022b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80022b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	68f9      	ldr	r1, [r7, #12]
 80022c0:	69b8      	ldr	r0, [r7, #24]
 80022c2:	f000 fc03 	bl	8002acc <pxPortInitialiseStack>
 80022c6:	4602      	mov	r2, r0
 80022c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80022cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80022d8:	bf00      	nop
 80022da:	3720      	adds	r7, #32
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80022e8:	f000 fce0 	bl	8002cac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80022ec:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <prvAddNewTaskToReadyList+0xb8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3301      	adds	r3, #1
 80022f2:	4a29      	ldr	r2, [pc, #164]	; (8002398 <prvAddNewTaskToReadyList+0xb8>)
 80022f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80022f6:	4b29      	ldr	r3, [pc, #164]	; (800239c <prvAddNewTaskToReadyList+0xbc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d109      	bne.n	8002312 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80022fe:	4a27      	ldr	r2, [pc, #156]	; (800239c <prvAddNewTaskToReadyList+0xbc>)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002304:	4b24      	ldr	r3, [pc, #144]	; (8002398 <prvAddNewTaskToReadyList+0xb8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d110      	bne.n	800232e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800230c:	f000 faba 	bl	8002884 <prvInitialiseTaskLists>
 8002310:	e00d      	b.n	800232e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002312:	4b23      	ldr	r3, [pc, #140]	; (80023a0 <prvAddNewTaskToReadyList+0xc0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800231a:	4b20      	ldr	r3, [pc, #128]	; (800239c <prvAddNewTaskToReadyList+0xbc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	429a      	cmp	r2, r3
 8002326:	d802      	bhi.n	800232e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002328:	4a1c      	ldr	r2, [pc, #112]	; (800239c <prvAddNewTaskToReadyList+0xbc>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800232e:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <prvAddNewTaskToReadyList+0xc4>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	3301      	adds	r3, #1
 8002334:	4a1b      	ldr	r2, [pc, #108]	; (80023a4 <prvAddNewTaskToReadyList+0xc4>)
 8002336:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	2201      	movs	r2, #1
 800233e:	409a      	lsls	r2, r3
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <prvAddNewTaskToReadyList+0xc8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4313      	orrs	r3, r2
 8002346:	4a18      	ldr	r2, [pc, #96]	; (80023a8 <prvAddNewTaskToReadyList+0xc8>)
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4a15      	ldr	r2, [pc, #84]	; (80023ac <prvAddNewTaskToReadyList+0xcc>)
 8002358:	441a      	add	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3304      	adds	r3, #4
 800235e:	4619      	mov	r1, r3
 8002360:	4610      	mov	r0, r2
 8002362:	f7ff fe10 	bl	8001f86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002366:	f000 fcd1 	bl	8002d0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800236a:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <prvAddNewTaskToReadyList+0xc0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00e      	beq.n	8002390 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <prvAddNewTaskToReadyList+0xbc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	429a      	cmp	r2, r3
 800237e:	d207      	bcs.n	8002390 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <prvAddNewTaskToReadyList+0xd0>)
 8002382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	f3bf 8f4f 	dsb	sy
 800238c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	200003e8 	.word	0x200003e8
 800239c:	200002e8 	.word	0x200002e8
 80023a0:	200003f4 	.word	0x200003f4
 80023a4:	20000404 	.word	0x20000404
 80023a8:	200003f0 	.word	0x200003f0
 80023ac:	200002ec 	.word	0x200002ec
 80023b0:	e000ed04 	.word	0xe000ed04

080023b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d017      	beq.n	80023f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80023c6:	4b13      	ldr	r3, [pc, #76]	; (8002414 <vTaskDelay+0x60>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <vTaskDelay+0x30>
	__asm volatile
 80023ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d2:	f383 8811 	msr	BASEPRI, r3
 80023d6:	f3bf 8f6f 	isb	sy
 80023da:	f3bf 8f4f 	dsb	sy
 80023de:	60bb      	str	r3, [r7, #8]
}
 80023e0:	bf00      	nop
 80023e2:	e7fe      	b.n	80023e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80023e4:	f000 f87a 	bl	80024dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80023e8:	2100      	movs	r1, #0
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fb08 	bl	8002a00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80023f0:	f000 f882 	bl	80024f8 <xTaskResumeAll>
 80023f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d107      	bne.n	800240c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <vTaskDelay+0x64>)
 80023fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000410 	.word	0x20000410
 8002418:	e000ed04 	.word	0xe000ed04

0800241c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002422:	2300      	movs	r3, #0
 8002424:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800242a:	463a      	mov	r2, r7
 800242c:	1d39      	adds	r1, r7, #4
 800242e:	f107 0308 	add.w	r3, r7, #8
 8002432:	4618      	mov	r0, r3
 8002434:	f7fd fefc 	bl	8000230 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002438:	6839      	ldr	r1, [r7, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	9202      	str	r2, [sp, #8]
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	2300      	movs	r3, #0
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	2300      	movs	r3, #0
 8002448:	460a      	mov	r2, r1
 800244a:	491e      	ldr	r1, [pc, #120]	; (80024c4 <vTaskStartScheduler+0xa8>)
 800244c:	481e      	ldr	r0, [pc, #120]	; (80024c8 <vTaskStartScheduler+0xac>)
 800244e:	f7ff fe1e 	bl	800208e <xTaskCreateStatic>
 8002452:	4603      	mov	r3, r0
 8002454:	4a1d      	ldr	r2, [pc, #116]	; (80024cc <vTaskStartScheduler+0xb0>)
 8002456:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002458:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <vTaskStartScheduler+0xb0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002460:	2301      	movs	r3, #1
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	e001      	b.n	800246a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d116      	bne.n	800249e <vTaskStartScheduler+0x82>
	__asm volatile
 8002470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002474:	f383 8811 	msr	BASEPRI, r3
 8002478:	f3bf 8f6f 	isb	sy
 800247c:	f3bf 8f4f 	dsb	sy
 8002480:	613b      	str	r3, [r7, #16]
}
 8002482:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <vTaskStartScheduler+0xb4>)
 8002486:	f04f 32ff 	mov.w	r2, #4294967295
 800248a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <vTaskStartScheduler+0xb8>)
 800248e:	2201      	movs	r2, #1
 8002490:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <vTaskStartScheduler+0xbc>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002498:	f000 fb96 	bl	8002bc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800249c:	e00e      	b.n	80024bc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a4:	d10a      	bne.n	80024bc <vTaskStartScheduler+0xa0>
	__asm volatile
 80024a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024aa:	f383 8811 	msr	BASEPRI, r3
 80024ae:	f3bf 8f6f 	isb	sy
 80024b2:	f3bf 8f4f 	dsb	sy
 80024b6:	60fb      	str	r3, [r7, #12]
}
 80024b8:	bf00      	nop
 80024ba:	e7fe      	b.n	80024ba <vTaskStartScheduler+0x9e>
}
 80024bc:	bf00      	nop
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	08003b84 	.word	0x08003b84
 80024c8:	08002855 	.word	0x08002855
 80024cc:	2000040c 	.word	0x2000040c
 80024d0:	20000408 	.word	0x20000408
 80024d4:	200003f4 	.word	0x200003f4
 80024d8:	200003ec 	.word	0x200003ec

080024dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <vTaskSuspendAll+0x18>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	3301      	adds	r3, #1
 80024e6:	4a03      	ldr	r2, [pc, #12]	; (80024f4 <vTaskSuspendAll+0x18>)
 80024e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80024ea:	bf00      	nop
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000410 	.word	0x20000410

080024f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002506:	4b41      	ldr	r3, [pc, #260]	; (800260c <xTaskResumeAll+0x114>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10a      	bne.n	8002524 <xTaskResumeAll+0x2c>
	__asm volatile
 800250e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002512:	f383 8811 	msr	BASEPRI, r3
 8002516:	f3bf 8f6f 	isb	sy
 800251a:	f3bf 8f4f 	dsb	sy
 800251e:	603b      	str	r3, [r7, #0]
}
 8002520:	bf00      	nop
 8002522:	e7fe      	b.n	8002522 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002524:	f000 fbc2 	bl	8002cac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002528:	4b38      	ldr	r3, [pc, #224]	; (800260c <xTaskResumeAll+0x114>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3b01      	subs	r3, #1
 800252e:	4a37      	ldr	r2, [pc, #220]	; (800260c <xTaskResumeAll+0x114>)
 8002530:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002532:	4b36      	ldr	r3, [pc, #216]	; (800260c <xTaskResumeAll+0x114>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d161      	bne.n	80025fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800253a:	4b35      	ldr	r3, [pc, #212]	; (8002610 <xTaskResumeAll+0x118>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d05d      	beq.n	80025fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002542:	e02e      	b.n	80025a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002544:	4b33      	ldr	r3, [pc, #204]	; (8002614 <xTaskResumeAll+0x11c>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	3318      	adds	r3, #24
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fd73 	bl	800203c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3304      	adds	r3, #4
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fd6e 	bl	800203c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	2201      	movs	r2, #1
 8002566:	409a      	lsls	r2, r3
 8002568:	4b2b      	ldr	r3, [pc, #172]	; (8002618 <xTaskResumeAll+0x120>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4313      	orrs	r3, r2
 800256e:	4a2a      	ldr	r2, [pc, #168]	; (8002618 <xTaskResumeAll+0x120>)
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4a27      	ldr	r2, [pc, #156]	; (800261c <xTaskResumeAll+0x124>)
 8002580:	441a      	add	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	3304      	adds	r3, #4
 8002586:	4619      	mov	r1, r3
 8002588:	4610      	mov	r0, r2
 800258a:	f7ff fcfc 	bl	8001f86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002592:	4b23      	ldr	r3, [pc, #140]	; (8002620 <xTaskResumeAll+0x128>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	429a      	cmp	r2, r3
 800259a:	d302      	bcc.n	80025a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800259c:	4b21      	ldr	r3, [pc, #132]	; (8002624 <xTaskResumeAll+0x12c>)
 800259e:	2201      	movs	r2, #1
 80025a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025a2:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <xTaskResumeAll+0x11c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1cc      	bne.n	8002544 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80025b0:	f000 fa06 	bl	80029c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80025b4:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <xTaskResumeAll+0x130>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d010      	beq.n	80025e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80025c0:	f000 f836 	bl	8002630 <xTaskIncrementTick>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80025ca:	4b16      	ldr	r3, [pc, #88]	; (8002624 <xTaskResumeAll+0x12c>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f1      	bne.n	80025c0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80025dc:	4b12      	ldr	r3, [pc, #72]	; (8002628 <xTaskResumeAll+0x130>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <xTaskResumeAll+0x12c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d009      	beq.n	80025fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80025ea:	2301      	movs	r3, #1
 80025ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80025ee:	4b0f      	ldr	r3, [pc, #60]	; (800262c <xTaskResumeAll+0x134>)
 80025f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	f3bf 8f4f 	dsb	sy
 80025fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80025fe:	f000 fb85 	bl	8002d0c <vPortExitCritical>

	return xAlreadyYielded;
 8002602:	68bb      	ldr	r3, [r7, #8]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000410 	.word	0x20000410
 8002610:	200003e8 	.word	0x200003e8
 8002614:	200003a8 	.word	0x200003a8
 8002618:	200003f0 	.word	0x200003f0
 800261c:	200002ec 	.word	0x200002ec
 8002620:	200002e8 	.word	0x200002e8
 8002624:	200003fc 	.word	0x200003fc
 8002628:	200003f8 	.word	0x200003f8
 800262c:	e000ed04 	.word	0xe000ed04

08002630 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800263a:	4b4e      	ldr	r3, [pc, #312]	; (8002774 <xTaskIncrementTick+0x144>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	f040 808e 	bne.w	8002760 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002644:	4b4c      	ldr	r3, [pc, #304]	; (8002778 <xTaskIncrementTick+0x148>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	3301      	adds	r3, #1
 800264a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800264c:	4a4a      	ldr	r2, [pc, #296]	; (8002778 <xTaskIncrementTick+0x148>)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d120      	bne.n	800269a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002658:	4b48      	ldr	r3, [pc, #288]	; (800277c <xTaskIncrementTick+0x14c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <xTaskIncrementTick+0x48>
	__asm volatile
 8002662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002666:	f383 8811 	msr	BASEPRI, r3
 800266a:	f3bf 8f6f 	isb	sy
 800266e:	f3bf 8f4f 	dsb	sy
 8002672:	603b      	str	r3, [r7, #0]
}
 8002674:	bf00      	nop
 8002676:	e7fe      	b.n	8002676 <xTaskIncrementTick+0x46>
 8002678:	4b40      	ldr	r3, [pc, #256]	; (800277c <xTaskIncrementTick+0x14c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	4b40      	ldr	r3, [pc, #256]	; (8002780 <xTaskIncrementTick+0x150>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a3e      	ldr	r2, [pc, #248]	; (800277c <xTaskIncrementTick+0x14c>)
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	4a3e      	ldr	r2, [pc, #248]	; (8002780 <xTaskIncrementTick+0x150>)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <xTaskIncrementTick+0x154>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	3301      	adds	r3, #1
 8002692:	4a3c      	ldr	r2, [pc, #240]	; (8002784 <xTaskIncrementTick+0x154>)
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	f000 f993 	bl	80029c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800269a:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <xTaskIncrementTick+0x158>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d348      	bcc.n	8002736 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026a4:	4b35      	ldr	r3, [pc, #212]	; (800277c <xTaskIncrementTick+0x14c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d104      	bne.n	80026b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026ae:	4b36      	ldr	r3, [pc, #216]	; (8002788 <xTaskIncrementTick+0x158>)
 80026b0:	f04f 32ff 	mov.w	r2, #4294967295
 80026b4:	601a      	str	r2, [r3, #0]
					break;
 80026b6:	e03e      	b.n	8002736 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026b8:	4b30      	ldr	r3, [pc, #192]	; (800277c <xTaskIncrementTick+0x14c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d203      	bcs.n	80026d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80026d0:	4a2d      	ldr	r2, [pc, #180]	; (8002788 <xTaskIncrementTick+0x158>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80026d6:	e02e      	b.n	8002736 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	3304      	adds	r3, #4
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fcad 	bl	800203c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d004      	beq.n	80026f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3318      	adds	r3, #24
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fca4 	bl	800203c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	2201      	movs	r2, #1
 80026fa:	409a      	lsls	r2, r3
 80026fc:	4b23      	ldr	r3, [pc, #140]	; (800278c <xTaskIncrementTick+0x15c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4313      	orrs	r3, r2
 8002702:	4a22      	ldr	r2, [pc, #136]	; (800278c <xTaskIncrementTick+0x15c>)
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4a1f      	ldr	r2, [pc, #124]	; (8002790 <xTaskIncrementTick+0x160>)
 8002714:	441a      	add	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	3304      	adds	r3, #4
 800271a:	4619      	mov	r1, r3
 800271c:	4610      	mov	r0, r2
 800271e:	f7ff fc32 	bl	8001f86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002726:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <xTaskIncrementTick+0x164>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	429a      	cmp	r2, r3
 800272e:	d3b9      	bcc.n	80026a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002730:	2301      	movs	r3, #1
 8002732:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002734:	e7b6      	b.n	80026a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002736:	4b17      	ldr	r3, [pc, #92]	; (8002794 <xTaskIncrementTick+0x164>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800273c:	4914      	ldr	r1, [pc, #80]	; (8002790 <xTaskIncrementTick+0x160>)
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d901      	bls.n	8002752 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800274e:	2301      	movs	r3, #1
 8002750:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002752:	4b11      	ldr	r3, [pc, #68]	; (8002798 <xTaskIncrementTick+0x168>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d007      	beq.n	800276a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800275a:	2301      	movs	r3, #1
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	e004      	b.n	800276a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002760:	4b0e      	ldr	r3, [pc, #56]	; (800279c <xTaskIncrementTick+0x16c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3301      	adds	r3, #1
 8002766:	4a0d      	ldr	r2, [pc, #52]	; (800279c <xTaskIncrementTick+0x16c>)
 8002768:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800276a:	697b      	ldr	r3, [r7, #20]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20000410 	.word	0x20000410
 8002778:	200003ec 	.word	0x200003ec
 800277c:	200003a0 	.word	0x200003a0
 8002780:	200003a4 	.word	0x200003a4
 8002784:	20000400 	.word	0x20000400
 8002788:	20000408 	.word	0x20000408
 800278c:	200003f0 	.word	0x200003f0
 8002790:	200002ec 	.word	0x200002ec
 8002794:	200002e8 	.word	0x200002e8
 8002798:	200003fc 	.word	0x200003fc
 800279c:	200003f8 	.word	0x200003f8

080027a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027a6:	4b26      	ldr	r3, [pc, #152]	; (8002840 <vTaskSwitchContext+0xa0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80027ae:	4b25      	ldr	r3, [pc, #148]	; (8002844 <vTaskSwitchContext+0xa4>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80027b4:	e03f      	b.n	8002836 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80027b6:	4b23      	ldr	r3, [pc, #140]	; (8002844 <vTaskSwitchContext+0xa4>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027bc:	4b22      	ldr	r3, [pc, #136]	; (8002848 <vTaskSwitchContext+0xa8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80027ca:	7afb      	ldrb	r3, [r7, #11]
 80027cc:	f1c3 031f 	rsb	r3, r3, #31
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	491e      	ldr	r1, [pc, #120]	; (800284c <vTaskSwitchContext+0xac>)
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <vTaskSwitchContext+0x5c>
	__asm volatile
 80027e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ea:	f383 8811 	msr	BASEPRI, r3
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	607b      	str	r3, [r7, #4]
}
 80027f8:	bf00      	nop
 80027fa:	e7fe      	b.n	80027fa <vTaskSwitchContext+0x5a>
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4a11      	ldr	r2, [pc, #68]	; (800284c <vTaskSwitchContext+0xac>)
 8002808:	4413      	add	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	3308      	adds	r3, #8
 800281e:	429a      	cmp	r2, r3
 8002820:	d104      	bne.n	800282c <vTaskSwitchContext+0x8c>
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	4a07      	ldr	r2, [pc, #28]	; (8002850 <vTaskSwitchContext+0xb0>)
 8002834:	6013      	str	r3, [r2, #0]
}
 8002836:	bf00      	nop
 8002838:	371c      	adds	r7, #28
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr
 8002840:	20000410 	.word	0x20000410
 8002844:	200003fc 	.word	0x200003fc
 8002848:	200003f0 	.word	0x200003f0
 800284c:	200002ec 	.word	0x200002ec
 8002850:	200002e8 	.word	0x200002e8

08002854 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800285c:	f000 f852 	bl	8002904 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <prvIdleTask+0x28>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d9f9      	bls.n	800285c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <prvIdleTask+0x2c>)
 800286a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	f3bf 8f4f 	dsb	sy
 8002874:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002878:	e7f0      	b.n	800285c <prvIdleTask+0x8>
 800287a:	bf00      	nop
 800287c:	200002ec 	.word	0x200002ec
 8002880:	e000ed04 	.word	0xe000ed04

08002884 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800288a:	2300      	movs	r3, #0
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	e00c      	b.n	80028aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4a12      	ldr	r2, [pc, #72]	; (80028e4 <prvInitialiseTaskLists+0x60>)
 800289c:	4413      	add	r3, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fb46 	bl	8001f30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3301      	adds	r3, #1
 80028a8:	607b      	str	r3, [r7, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b06      	cmp	r3, #6
 80028ae:	d9ef      	bls.n	8002890 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80028b0:	480d      	ldr	r0, [pc, #52]	; (80028e8 <prvInitialiseTaskLists+0x64>)
 80028b2:	f7ff fb3d 	bl	8001f30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80028b6:	480d      	ldr	r0, [pc, #52]	; (80028ec <prvInitialiseTaskLists+0x68>)
 80028b8:	f7ff fb3a 	bl	8001f30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80028bc:	480c      	ldr	r0, [pc, #48]	; (80028f0 <prvInitialiseTaskLists+0x6c>)
 80028be:	f7ff fb37 	bl	8001f30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80028c2:	480c      	ldr	r0, [pc, #48]	; (80028f4 <prvInitialiseTaskLists+0x70>)
 80028c4:	f7ff fb34 	bl	8001f30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80028c8:	480b      	ldr	r0, [pc, #44]	; (80028f8 <prvInitialiseTaskLists+0x74>)
 80028ca:	f7ff fb31 	bl	8001f30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80028ce:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <prvInitialiseTaskLists+0x78>)
 80028d0:	4a05      	ldr	r2, [pc, #20]	; (80028e8 <prvInitialiseTaskLists+0x64>)
 80028d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80028d4:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <prvInitialiseTaskLists+0x7c>)
 80028d6:	4a05      	ldr	r2, [pc, #20]	; (80028ec <prvInitialiseTaskLists+0x68>)
 80028d8:	601a      	str	r2, [r3, #0]
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200002ec 	.word	0x200002ec
 80028e8:	20000378 	.word	0x20000378
 80028ec:	2000038c 	.word	0x2000038c
 80028f0:	200003a8 	.word	0x200003a8
 80028f4:	200003bc 	.word	0x200003bc
 80028f8:	200003d4 	.word	0x200003d4
 80028fc:	200003a0 	.word	0x200003a0
 8002900:	200003a4 	.word	0x200003a4

08002904 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800290a:	e019      	b.n	8002940 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800290c:	f000 f9ce 	bl	8002cac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002910:	4b10      	ldr	r3, [pc, #64]	; (8002954 <prvCheckTasksWaitingTermination+0x50>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3304      	adds	r3, #4
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fb8d 	bl	800203c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <prvCheckTasksWaitingTermination+0x54>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	3b01      	subs	r3, #1
 8002928:	4a0b      	ldr	r2, [pc, #44]	; (8002958 <prvCheckTasksWaitingTermination+0x54>)
 800292a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <prvCheckTasksWaitingTermination+0x58>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	3b01      	subs	r3, #1
 8002932:	4a0a      	ldr	r2, [pc, #40]	; (800295c <prvCheckTasksWaitingTermination+0x58>)
 8002934:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002936:	f000 f9e9 	bl	8002d0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f810 	bl	8002960 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <prvCheckTasksWaitingTermination+0x58>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1e1      	bne.n	800290c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	200003bc 	.word	0x200003bc
 8002958:	200003e8 	.word	0x200003e8
 800295c:	200003d0 	.word	0x200003d0

08002960 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800296e:	2b00      	cmp	r3, #0
 8002970:	d108      	bne.n	8002984 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fb26 	bl	8002fc8 <vPortFree>
				vPortFree( pxTCB );
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 fb23 	bl	8002fc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002982:	e018      	b.n	80029b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800298a:	2b01      	cmp	r3, #1
 800298c:	d103      	bne.n	8002996 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 fb1a 	bl	8002fc8 <vPortFree>
	}
 8002994:	e00f      	b.n	80029b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800299c:	2b02      	cmp	r3, #2
 800299e:	d00a      	beq.n	80029b6 <prvDeleteTCB+0x56>
	__asm volatile
 80029a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a4:	f383 8811 	msr	BASEPRI, r3
 80029a8:	f3bf 8f6f 	isb	sy
 80029ac:	f3bf 8f4f 	dsb	sy
 80029b0:	60fb      	str	r3, [r7, #12]
}
 80029b2:	bf00      	nop
 80029b4:	e7fe      	b.n	80029b4 <prvDeleteTCB+0x54>
	}
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <prvResetNextTaskUnblockTime+0x38>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d104      	bne.n	80029da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <prvResetNextTaskUnblockTime+0x3c>)
 80029d2:	f04f 32ff 	mov.w	r2, #4294967295
 80029d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80029d8:	e008      	b.n	80029ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <prvResetNextTaskUnblockTime+0x38>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <prvResetNextTaskUnblockTime+0x3c>)
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	200003a0 	.word	0x200003a0
 80029fc:	20000408 	.word	0x20000408

08002a00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002a0a:	4b29      	ldr	r3, [pc, #164]	; (8002ab0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a10:	4b28      	ldr	r3, [pc, #160]	; (8002ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	3304      	adds	r3, #4
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fb10 	bl	800203c <uxListRemove>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10b      	bne.n	8002a3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002a22:	4b24      	ldr	r3, [pc, #144]	; (8002ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	2201      	movs	r2, #1
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4013      	ands	r3, r2
 8002a36:	4a20      	ldr	r2, [pc, #128]	; (8002ab8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d10a      	bne.n	8002a58 <prvAddCurrentTaskToDelayedList+0x58>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d007      	beq.n	8002a58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a48:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	4619      	mov	r1, r3
 8002a50:	481a      	ldr	r0, [pc, #104]	; (8002abc <prvAddCurrentTaskToDelayedList+0xbc>)
 8002a52:	f7ff fa98 	bl	8001f86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a56:	e026      	b.n	8002aa6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a60:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d209      	bcs.n	8002a84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a70:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	f7ff faa5 	bl	8001fcc <vListInsert>
}
 8002a82:	e010      	b.n	8002aa6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a84:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4610      	mov	r0, r2
 8002a92:	f7ff fa9b 	bl	8001fcc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002a96:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d202      	bcs.n	8002aa6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002aa0:	4a09      	ldr	r2, [pc, #36]	; (8002ac8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	6013      	str	r3, [r2, #0]
}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	200003ec 	.word	0x200003ec
 8002ab4:	200002e8 	.word	0x200002e8
 8002ab8:	200003f0 	.word	0x200003f0
 8002abc:	200003d4 	.word	0x200003d4
 8002ac0:	200003a4 	.word	0x200003a4
 8002ac4:	200003a0 	.word	0x200003a0
 8002ac8:	20000408 	.word	0x20000408

08002acc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3b04      	subs	r3, #4
 8002adc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	3b04      	subs	r3, #4
 8002aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f023 0201 	bic.w	r2, r3, #1
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	3b04      	subs	r3, #4
 8002afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002afc:	4a08      	ldr	r2, [pc, #32]	; (8002b20 <pxPortInitialiseStack+0x54>)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	3b14      	subs	r3, #20
 8002b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	3b20      	subs	r3, #32
 8002b12:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002b14:	68fb      	ldr	r3, [r7, #12]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	08002b25 	.word	0x08002b25

08002b24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <prvTaskExitError+0x54>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b36:	d00a      	beq.n	8002b4e <prvTaskExitError+0x2a>
	__asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	60fb      	str	r3, [r7, #12]
}
 8002b4a:	bf00      	nop
 8002b4c:	e7fe      	b.n	8002b4c <prvTaskExitError+0x28>
	__asm volatile
 8002b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b52:	f383 8811 	msr	BASEPRI, r3
 8002b56:	f3bf 8f6f 	isb	sy
 8002b5a:	f3bf 8f4f 	dsb	sy
 8002b5e:	60bb      	str	r3, [r7, #8]
}
 8002b60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002b62:	bf00      	nop
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0fc      	beq.n	8002b64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002b6a:	bf00      	nop
 8002b6c:	bf00      	nop
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	2000000c 	.word	0x2000000c
 8002b7c:	00000000 	.word	0x00000000

08002b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <pxCurrentTCBConst2>)
 8002b82:	6819      	ldr	r1, [r3, #0]
 8002b84:	6808      	ldr	r0, [r1, #0]
 8002b86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002b8a:	f380 8809 	msr	PSP, r0
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f04f 0000 	mov.w	r0, #0
 8002b96:	f380 8811 	msr	BASEPRI, r0
 8002b9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002b9e:	4770      	bx	lr

08002ba0 <pxCurrentTCBConst2>:
 8002ba0:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop

08002ba8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002ba8:	4806      	ldr	r0, [pc, #24]	; (8002bc4 <prvPortStartFirstTask+0x1c>)
 8002baa:	6800      	ldr	r0, [r0, #0]
 8002bac:	6800      	ldr	r0, [r0, #0]
 8002bae:	f380 8808 	msr	MSP, r0
 8002bb2:	b662      	cpsie	i
 8002bb4:	b661      	cpsie	f
 8002bb6:	f3bf 8f4f 	dsb	sy
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	df00      	svc	0
 8002bc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002bc2:	bf00      	nop
 8002bc4:	e000ed08 	.word	0xe000ed08

08002bc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002bce:	4b32      	ldr	r3, [pc, #200]	; (8002c98 <xPortStartScheduler+0xd0>)
 8002bd0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	22ff      	movs	r2, #255	; 0xff
 8002bde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <xPortStartScheduler+0xd4>)
 8002bf4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002bf6:	4b2a      	ldr	r3, [pc, #168]	; (8002ca0 <xPortStartScheduler+0xd8>)
 8002bf8:	2207      	movs	r2, #7
 8002bfa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002bfc:	e009      	b.n	8002c12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002bfe:	4b28      	ldr	r3, [pc, #160]	; (8002ca0 <xPortStartScheduler+0xd8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	4a26      	ldr	r2, [pc, #152]	; (8002ca0 <xPortStartScheduler+0xd8>)
 8002c06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1a:	2b80      	cmp	r3, #128	; 0x80
 8002c1c:	d0ef      	beq.n	8002bfe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <xPortStartScheduler+0xd8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f1c3 0307 	rsb	r3, r3, #7
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d00a      	beq.n	8002c40 <xPortStartScheduler+0x78>
	__asm volatile
 8002c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2e:	f383 8811 	msr	BASEPRI, r3
 8002c32:	f3bf 8f6f 	isb	sy
 8002c36:	f3bf 8f4f 	dsb	sy
 8002c3a:	60bb      	str	r3, [r7, #8]
}
 8002c3c:	bf00      	nop
 8002c3e:	e7fe      	b.n	8002c3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c40:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <xPortStartScheduler+0xd8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	4a16      	ldr	r2, [pc, #88]	; (8002ca0 <xPortStartScheduler+0xd8>)
 8002c48:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c4a:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <xPortStartScheduler+0xd8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c52:	4a13      	ldr	r2, [pc, #76]	; (8002ca0 <xPortStartScheduler+0xd8>)
 8002c54:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002c5e:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <xPortStartScheduler+0xdc>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a10      	ldr	r2, [pc, #64]	; (8002ca4 <xPortStartScheduler+0xdc>)
 8002c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <xPortStartScheduler+0xdc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a0d      	ldr	r2, [pc, #52]	; (8002ca4 <xPortStartScheduler+0xdc>)
 8002c70:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002c74:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002c76:	f000 f8b9 	bl	8002dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <xPortStartScheduler+0xe0>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002c80:	f7ff ff92 	bl	8002ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002c84:	f7ff fd8c 	bl	80027a0 <vTaskSwitchContext>
	prvTaskExitError();
 8002c88:	f7ff ff4c 	bl	8002b24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	e000e400 	.word	0xe000e400
 8002c9c:	20000414 	.word	0x20000414
 8002ca0:	20000418 	.word	0x20000418
 8002ca4:	e000ed20 	.word	0xe000ed20
 8002ca8:	2000000c 	.word	0x2000000c

08002cac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
	__asm volatile
 8002cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb6:	f383 8811 	msr	BASEPRI, r3
 8002cba:	f3bf 8f6f 	isb	sy
 8002cbe:	f3bf 8f4f 	dsb	sy
 8002cc2:	607b      	str	r3, [r7, #4]
}
 8002cc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <vPortEnterCritical+0x58>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <vPortEnterCritical+0x58>)
 8002cce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <vPortEnterCritical+0x58>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d10f      	bne.n	8002cf8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <vPortEnterCritical+0x5c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <vPortEnterCritical+0x4c>
	__asm volatile
 8002ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce6:	f383 8811 	msr	BASEPRI, r3
 8002cea:	f3bf 8f6f 	isb	sy
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	603b      	str	r3, [r7, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	e7fe      	b.n	8002cf6 <vPortEnterCritical+0x4a>
	}
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	2000000c 	.word	0x2000000c
 8002d08:	e000ed04 	.word	0xe000ed04

08002d0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <vPortExitCritical+0x4c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10a      	bne.n	8002d30 <vPortExitCritical+0x24>
	__asm volatile
 8002d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1e:	f383 8811 	msr	BASEPRI, r3
 8002d22:	f3bf 8f6f 	isb	sy
 8002d26:	f3bf 8f4f 	dsb	sy
 8002d2a:	607b      	str	r3, [r7, #4]
}
 8002d2c:	bf00      	nop
 8002d2e:	e7fe      	b.n	8002d2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <vPortExitCritical+0x4c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <vPortExitCritical+0x4c>)
 8002d38:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <vPortExitCritical+0x4c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d105      	bne.n	8002d4e <vPortExitCritical+0x42>
 8002d42:	2300      	movs	r3, #0
 8002d44:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d4c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	2000000c 	.word	0x2000000c
 8002d5c:	00000000 	.word	0x00000000

08002d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002d60:	f3ef 8009 	mrs	r0, PSP
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <pxCurrentTCBConst>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002d70:	6010      	str	r0, [r2, #0]
 8002d72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002d76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002d7a:	f380 8811 	msr	BASEPRI, r0
 8002d7e:	f7ff fd0f 	bl	80027a0 <vTaskSwitchContext>
 8002d82:	f04f 0000 	mov.w	r0, #0
 8002d86:	f380 8811 	msr	BASEPRI, r0
 8002d8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002d8e:	6819      	ldr	r1, [r3, #0]
 8002d90:	6808      	ldr	r0, [r1, #0]
 8002d92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002d96:	f380 8809 	msr	PSP, r0
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	4770      	bx	lr

08002da0 <pxCurrentTCBConst>:
 8002da0:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop

08002da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
	__asm volatile
 8002dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	607b      	str	r3, [r7, #4]
}
 8002dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002dc2:	f7ff fc35 	bl	8002630 <xTaskIncrementTick>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <SysTick_Handler+0x40>)
 8002dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	f383 8811 	msr	BASEPRI, r3
}
 8002dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	e000ed04 	.word	0xe000ed04

08002dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002df0:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <vPortSetupTimerInterrupt+0x30>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <vPortSetupTimerInterrupt+0x34>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002dfc:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <vPortSetupTimerInterrupt+0x38>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a09      	ldr	r2, [pc, #36]	; (8002e28 <vPortSetupTimerInterrupt+0x3c>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	099b      	lsrs	r3, r3, #6
 8002e08:	4a08      	ldr	r2, [pc, #32]	; (8002e2c <vPortSetupTimerInterrupt+0x40>)
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e0e:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <vPortSetupTimerInterrupt+0x30>)
 8002e10:	2207      	movs	r2, #7
 8002e12:	601a      	str	r2, [r3, #0]
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	e000e010 	.word	0xe000e010
 8002e20:	e000e018 	.word	0xe000e018
 8002e24:	20000000 	.word	0x20000000
 8002e28:	10624dd3 	.word	0x10624dd3
 8002e2c:	e000e014 	.word	0xe000e014

08002e30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002e3c:	f7ff fb4e 	bl	80024dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002e40:	4b5b      	ldr	r3, [pc, #364]	; (8002fb0 <pvPortMalloc+0x180>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002e48:	f000 f920 	bl	800308c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002e4c:	4b59      	ldr	r3, [pc, #356]	; (8002fb4 <pvPortMalloc+0x184>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 8093 	bne.w	8002f80 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01d      	beq.n	8002e9c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002e60:	2208      	movs	r2, #8
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d014      	beq.n	8002e9c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f023 0307 	bic.w	r3, r3, #7
 8002e78:	3308      	adds	r3, #8
 8002e7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <pvPortMalloc+0x6c>
	__asm volatile
 8002e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8a:	f383 8811 	msr	BASEPRI, r3
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	617b      	str	r3, [r7, #20]
}
 8002e98:	bf00      	nop
 8002e9a:	e7fe      	b.n	8002e9a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d06e      	beq.n	8002f80 <pvPortMalloc+0x150>
 8002ea2:	4b45      	ldr	r3, [pc, #276]	; (8002fb8 <pvPortMalloc+0x188>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d869      	bhi.n	8002f80 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002eac:	4b43      	ldr	r3, [pc, #268]	; (8002fbc <pvPortMalloc+0x18c>)
 8002eae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002eb0:	4b42      	ldr	r3, [pc, #264]	; (8002fbc <pvPortMalloc+0x18c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002eb6:	e004      	b.n	8002ec2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d903      	bls.n	8002ed4 <pvPortMalloc+0xa4>
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f1      	bne.n	8002eb8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002ed4:	4b36      	ldr	r3, [pc, #216]	; (8002fb0 <pvPortMalloc+0x180>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d050      	beq.n	8002f80 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2208      	movs	r2, #8
 8002ee4:	4413      	add	r3, r2
 8002ee6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	1ad2      	subs	r2, r2, r3
 8002ef8:	2308      	movs	r3, #8
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d91f      	bls.n	8002f40 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <pvPortMalloc+0xf8>
	__asm volatile
 8002f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f16:	f383 8811 	msr	BASEPRI, r3
 8002f1a:	f3bf 8f6f 	isb	sy
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	613b      	str	r3, [r7, #16]
}
 8002f24:	bf00      	nop
 8002f26:	e7fe      	b.n	8002f26 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	1ad2      	subs	r2, r2, r3
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002f3a:	69b8      	ldr	r0, [r7, #24]
 8002f3c:	f000 f908 	bl	8003150 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002f40:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <pvPortMalloc+0x188>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	4a1b      	ldr	r2, [pc, #108]	; (8002fb8 <pvPortMalloc+0x188>)
 8002f4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002f4e:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <pvPortMalloc+0x188>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <pvPortMalloc+0x190>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d203      	bcs.n	8002f62 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002f5a:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <pvPortMalloc+0x188>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a18      	ldr	r2, [pc, #96]	; (8002fc0 <pvPortMalloc+0x190>)
 8002f60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <pvPortMalloc+0x184>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002f76:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <pvPortMalloc+0x194>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	4a11      	ldr	r2, [pc, #68]	; (8002fc4 <pvPortMalloc+0x194>)
 8002f7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002f80:	f7ff faba 	bl	80024f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <pvPortMalloc+0x174>
	__asm volatile
 8002f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f92:	f383 8811 	msr	BASEPRI, r3
 8002f96:	f3bf 8f6f 	isb	sy
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	60fb      	str	r3, [r7, #12]
}
 8002fa0:	bf00      	nop
 8002fa2:	e7fe      	b.n	8002fa2 <pvPortMalloc+0x172>
	return pvReturn;
 8002fa4:	69fb      	ldr	r3, [r7, #28]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3728      	adds	r7, #40	; 0x28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20001024 	.word	0x20001024
 8002fb4:	20001038 	.word	0x20001038
 8002fb8:	20001028 	.word	0x20001028
 8002fbc:	2000101c 	.word	0x2000101c
 8002fc0:	2000102c 	.word	0x2000102c
 8002fc4:	20001030 	.word	0x20001030

08002fc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d04d      	beq.n	8003076 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002fda:	2308      	movs	r3, #8
 8002fdc:	425b      	negs	r3, r3
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	4b24      	ldr	r3, [pc, #144]	; (8003080 <vPortFree+0xb8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10a      	bne.n	800300c <vPortFree+0x44>
	__asm volatile
 8002ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	60fb      	str	r3, [r7, #12]
}
 8003008:	bf00      	nop
 800300a:	e7fe      	b.n	800300a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <vPortFree+0x62>
	__asm volatile
 8003014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003018:	f383 8811 	msr	BASEPRI, r3
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	60bb      	str	r3, [r7, #8]
}
 8003026:	bf00      	nop
 8003028:	e7fe      	b.n	8003028 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	4b14      	ldr	r3, [pc, #80]	; (8003080 <vPortFree+0xb8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4013      	ands	r3, r2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01e      	beq.n	8003076 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d11a      	bne.n	8003076 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <vPortFree+0xb8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	43db      	mvns	r3, r3
 800304a:	401a      	ands	r2, r3
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003050:	f7ff fa44 	bl	80024dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <vPortFree+0xbc>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4413      	add	r3, r2
 800305e:	4a09      	ldr	r2, [pc, #36]	; (8003084 <vPortFree+0xbc>)
 8003060:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003062:	6938      	ldr	r0, [r7, #16]
 8003064:	f000 f874 	bl	8003150 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003068:	4b07      	ldr	r3, [pc, #28]	; (8003088 <vPortFree+0xc0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3301      	adds	r3, #1
 800306e:	4a06      	ldr	r2, [pc, #24]	; (8003088 <vPortFree+0xc0>)
 8003070:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003072:	f7ff fa41 	bl	80024f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003076:	bf00      	nop
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20001038 	.word	0x20001038
 8003084:	20001028 	.word	0x20001028
 8003088:	20001034 	.word	0x20001034

0800308c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003092:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003096:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003098:	4b27      	ldr	r3, [pc, #156]	; (8003138 <prvHeapInit+0xac>)
 800309a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00c      	beq.n	80030c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3307      	adds	r3, #7
 80030aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0307 	bic.w	r3, r3, #7
 80030b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	4a1f      	ldr	r2, [pc, #124]	; (8003138 <prvHeapInit+0xac>)
 80030bc:	4413      	add	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80030c4:	4a1d      	ldr	r2, [pc, #116]	; (800313c <prvHeapInit+0xb0>)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80030ca:	4b1c      	ldr	r3, [pc, #112]	; (800313c <prvHeapInit+0xb0>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	4413      	add	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80030d8:	2208      	movs	r2, #8
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0307 	bic.w	r3, r3, #7
 80030e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4a15      	ldr	r2, [pc, #84]	; (8003140 <prvHeapInit+0xb4>)
 80030ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80030ee:	4b14      	ldr	r3, [pc, #80]	; (8003140 <prvHeapInit+0xb4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2200      	movs	r2, #0
 80030f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80030f6:	4b12      	ldr	r3, [pc, #72]	; (8003140 <prvHeapInit+0xb4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	1ad2      	subs	r2, r2, r3
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800310c:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <prvHeapInit+0xb4>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <prvHeapInit+0xb8>)
 800311a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4a09      	ldr	r2, [pc, #36]	; (8003148 <prvHeapInit+0xbc>)
 8003122:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003124:	4b09      	ldr	r3, [pc, #36]	; (800314c <prvHeapInit+0xc0>)
 8003126:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800312a:	601a      	str	r2, [r3, #0]
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	2000041c 	.word	0x2000041c
 800313c:	2000101c 	.word	0x2000101c
 8003140:	20001024 	.word	0x20001024
 8003144:	2000102c 	.word	0x2000102c
 8003148:	20001028 	.word	0x20001028
 800314c:	20001038 	.word	0x20001038

08003150 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003158:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <prvInsertBlockIntoFreeList+0xa8>)
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	e002      	b.n	8003164 <prvInsertBlockIntoFreeList+0x14>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	429a      	cmp	r2, r3
 800316c:	d8f7      	bhi.n	800315e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	4413      	add	r3, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	429a      	cmp	r2, r3
 800317e:	d108      	bne.n	8003192 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	441a      	add	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	441a      	add	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d118      	bne.n	80031d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4b14      	ldr	r3, [pc, #80]	; (80031fc <prvInsertBlockIntoFreeList+0xac>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d00d      	beq.n	80031ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	441a      	add	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	e008      	b.n	80031e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80031ce:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <prvInsertBlockIntoFreeList+0xac>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	e003      	b.n	80031e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d002      	beq.n	80031ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr
 80031f8:	2000101c 	.word	0x2000101c
 80031fc:	20001024 	.word	0x20001024

08003200 <__errno>:
 8003200:	4b01      	ldr	r3, [pc, #4]	; (8003208 <__errno+0x8>)
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	20000010 	.word	0x20000010

0800320c <__libc_init_array>:
 800320c:	b570      	push	{r4, r5, r6, lr}
 800320e:	2600      	movs	r6, #0
 8003210:	4d0c      	ldr	r5, [pc, #48]	; (8003244 <__libc_init_array+0x38>)
 8003212:	4c0d      	ldr	r4, [pc, #52]	; (8003248 <__libc_init_array+0x3c>)
 8003214:	1b64      	subs	r4, r4, r5
 8003216:	10a4      	asrs	r4, r4, #2
 8003218:	42a6      	cmp	r6, r4
 800321a:	d109      	bne.n	8003230 <__libc_init_array+0x24>
 800321c:	f000 fc76 	bl	8003b0c <_init>
 8003220:	2600      	movs	r6, #0
 8003222:	4d0a      	ldr	r5, [pc, #40]	; (800324c <__libc_init_array+0x40>)
 8003224:	4c0a      	ldr	r4, [pc, #40]	; (8003250 <__libc_init_array+0x44>)
 8003226:	1b64      	subs	r4, r4, r5
 8003228:	10a4      	asrs	r4, r4, #2
 800322a:	42a6      	cmp	r6, r4
 800322c:	d105      	bne.n	800323a <__libc_init_array+0x2e>
 800322e:	bd70      	pop	{r4, r5, r6, pc}
 8003230:	f855 3b04 	ldr.w	r3, [r5], #4
 8003234:	4798      	blx	r3
 8003236:	3601      	adds	r6, #1
 8003238:	e7ee      	b.n	8003218 <__libc_init_array+0xc>
 800323a:	f855 3b04 	ldr.w	r3, [r5], #4
 800323e:	4798      	blx	r3
 8003240:	3601      	adds	r6, #1
 8003242:	e7f2      	b.n	800322a <__libc_init_array+0x1e>
 8003244:	08003bec 	.word	0x08003bec
 8003248:	08003bec 	.word	0x08003bec
 800324c:	08003bec 	.word	0x08003bec
 8003250:	08003bf0 	.word	0x08003bf0

08003254 <memcpy>:
 8003254:	440a      	add	r2, r1
 8003256:	4291      	cmp	r1, r2
 8003258:	f100 33ff 	add.w	r3, r0, #4294967295
 800325c:	d100      	bne.n	8003260 <memcpy+0xc>
 800325e:	4770      	bx	lr
 8003260:	b510      	push	{r4, lr}
 8003262:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003266:	4291      	cmp	r1, r2
 8003268:	f803 4f01 	strb.w	r4, [r3, #1]!
 800326c:	d1f9      	bne.n	8003262 <memcpy+0xe>
 800326e:	bd10      	pop	{r4, pc}

08003270 <memset>:
 8003270:	4603      	mov	r3, r0
 8003272:	4402      	add	r2, r0
 8003274:	4293      	cmp	r3, r2
 8003276:	d100      	bne.n	800327a <memset+0xa>
 8003278:	4770      	bx	lr
 800327a:	f803 1b01 	strb.w	r1, [r3], #1
 800327e:	e7f9      	b.n	8003274 <memset+0x4>

08003280 <_vsniprintf_r>:
 8003280:	b530      	push	{r4, r5, lr}
 8003282:	1e14      	subs	r4, r2, #0
 8003284:	4605      	mov	r5, r0
 8003286:	b09b      	sub	sp, #108	; 0x6c
 8003288:	4618      	mov	r0, r3
 800328a:	da05      	bge.n	8003298 <_vsniprintf_r+0x18>
 800328c:	238b      	movs	r3, #139	; 0x8b
 800328e:	f04f 30ff 	mov.w	r0, #4294967295
 8003292:	602b      	str	r3, [r5, #0]
 8003294:	b01b      	add	sp, #108	; 0x6c
 8003296:	bd30      	pop	{r4, r5, pc}
 8003298:	f44f 7302 	mov.w	r3, #520	; 0x208
 800329c:	f8ad 300c 	strh.w	r3, [sp, #12]
 80032a0:	bf0c      	ite	eq
 80032a2:	4623      	moveq	r3, r4
 80032a4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80032a8:	9302      	str	r3, [sp, #8]
 80032aa:	9305      	str	r3, [sp, #20]
 80032ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032b0:	4602      	mov	r2, r0
 80032b2:	9100      	str	r1, [sp, #0]
 80032b4:	9104      	str	r1, [sp, #16]
 80032b6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80032ba:	4669      	mov	r1, sp
 80032bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80032be:	4628      	mov	r0, r5
 80032c0:	f000 f874 	bl	80033ac <_svfiprintf_r>
 80032c4:	1c43      	adds	r3, r0, #1
 80032c6:	bfbc      	itt	lt
 80032c8:	238b      	movlt	r3, #139	; 0x8b
 80032ca:	602b      	strlt	r3, [r5, #0]
 80032cc:	2c00      	cmp	r4, #0
 80032ce:	d0e1      	beq.n	8003294 <_vsniprintf_r+0x14>
 80032d0:	2200      	movs	r2, #0
 80032d2:	9b00      	ldr	r3, [sp, #0]
 80032d4:	701a      	strb	r2, [r3, #0]
 80032d6:	e7dd      	b.n	8003294 <_vsniprintf_r+0x14>

080032d8 <vsniprintf>:
 80032d8:	b507      	push	{r0, r1, r2, lr}
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	4613      	mov	r3, r2
 80032de:	460a      	mov	r2, r1
 80032e0:	4601      	mov	r1, r0
 80032e2:	4803      	ldr	r0, [pc, #12]	; (80032f0 <vsniprintf+0x18>)
 80032e4:	6800      	ldr	r0, [r0, #0]
 80032e6:	f7ff ffcb 	bl	8003280 <_vsniprintf_r>
 80032ea:	b003      	add	sp, #12
 80032ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80032f0:	20000010 	.word	0x20000010

080032f4 <__ssputs_r>:
 80032f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032f8:	688e      	ldr	r6, [r1, #8]
 80032fa:	4682      	mov	sl, r0
 80032fc:	429e      	cmp	r6, r3
 80032fe:	460c      	mov	r4, r1
 8003300:	4690      	mov	r8, r2
 8003302:	461f      	mov	r7, r3
 8003304:	d838      	bhi.n	8003378 <__ssputs_r+0x84>
 8003306:	898a      	ldrh	r2, [r1, #12]
 8003308:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800330c:	d032      	beq.n	8003374 <__ssputs_r+0x80>
 800330e:	6825      	ldr	r5, [r4, #0]
 8003310:	6909      	ldr	r1, [r1, #16]
 8003312:	3301      	adds	r3, #1
 8003314:	eba5 0901 	sub.w	r9, r5, r1
 8003318:	6965      	ldr	r5, [r4, #20]
 800331a:	444b      	add	r3, r9
 800331c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003320:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003324:	106d      	asrs	r5, r5, #1
 8003326:	429d      	cmp	r5, r3
 8003328:	bf38      	it	cc
 800332a:	461d      	movcc	r5, r3
 800332c:	0553      	lsls	r3, r2, #21
 800332e:	d531      	bpl.n	8003394 <__ssputs_r+0xa0>
 8003330:	4629      	mov	r1, r5
 8003332:	f000 fb45 	bl	80039c0 <_malloc_r>
 8003336:	4606      	mov	r6, r0
 8003338:	b950      	cbnz	r0, 8003350 <__ssputs_r+0x5c>
 800333a:	230c      	movs	r3, #12
 800333c:	f04f 30ff 	mov.w	r0, #4294967295
 8003340:	f8ca 3000 	str.w	r3, [sl]
 8003344:	89a3      	ldrh	r3, [r4, #12]
 8003346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800334a:	81a3      	strh	r3, [r4, #12]
 800334c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003350:	464a      	mov	r2, r9
 8003352:	6921      	ldr	r1, [r4, #16]
 8003354:	f7ff ff7e 	bl	8003254 <memcpy>
 8003358:	89a3      	ldrh	r3, [r4, #12]
 800335a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800335e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003362:	81a3      	strh	r3, [r4, #12]
 8003364:	6126      	str	r6, [r4, #16]
 8003366:	444e      	add	r6, r9
 8003368:	6026      	str	r6, [r4, #0]
 800336a:	463e      	mov	r6, r7
 800336c:	6165      	str	r5, [r4, #20]
 800336e:	eba5 0509 	sub.w	r5, r5, r9
 8003372:	60a5      	str	r5, [r4, #8]
 8003374:	42be      	cmp	r6, r7
 8003376:	d900      	bls.n	800337a <__ssputs_r+0x86>
 8003378:	463e      	mov	r6, r7
 800337a:	4632      	mov	r2, r6
 800337c:	4641      	mov	r1, r8
 800337e:	6820      	ldr	r0, [r4, #0]
 8003380:	f000 fab8 	bl	80038f4 <memmove>
 8003384:	68a3      	ldr	r3, [r4, #8]
 8003386:	6822      	ldr	r2, [r4, #0]
 8003388:	1b9b      	subs	r3, r3, r6
 800338a:	4432      	add	r2, r6
 800338c:	2000      	movs	r0, #0
 800338e:	60a3      	str	r3, [r4, #8]
 8003390:	6022      	str	r2, [r4, #0]
 8003392:	e7db      	b.n	800334c <__ssputs_r+0x58>
 8003394:	462a      	mov	r2, r5
 8003396:	f000 fb6d 	bl	8003a74 <_realloc_r>
 800339a:	4606      	mov	r6, r0
 800339c:	2800      	cmp	r0, #0
 800339e:	d1e1      	bne.n	8003364 <__ssputs_r+0x70>
 80033a0:	4650      	mov	r0, sl
 80033a2:	6921      	ldr	r1, [r4, #16]
 80033a4:	f000 fac0 	bl	8003928 <_free_r>
 80033a8:	e7c7      	b.n	800333a <__ssputs_r+0x46>
	...

080033ac <_svfiprintf_r>:
 80033ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033b0:	4698      	mov	r8, r3
 80033b2:	898b      	ldrh	r3, [r1, #12]
 80033b4:	4607      	mov	r7, r0
 80033b6:	061b      	lsls	r3, r3, #24
 80033b8:	460d      	mov	r5, r1
 80033ba:	4614      	mov	r4, r2
 80033bc:	b09d      	sub	sp, #116	; 0x74
 80033be:	d50e      	bpl.n	80033de <_svfiprintf_r+0x32>
 80033c0:	690b      	ldr	r3, [r1, #16]
 80033c2:	b963      	cbnz	r3, 80033de <_svfiprintf_r+0x32>
 80033c4:	2140      	movs	r1, #64	; 0x40
 80033c6:	f000 fafb 	bl	80039c0 <_malloc_r>
 80033ca:	6028      	str	r0, [r5, #0]
 80033cc:	6128      	str	r0, [r5, #16]
 80033ce:	b920      	cbnz	r0, 80033da <_svfiprintf_r+0x2e>
 80033d0:	230c      	movs	r3, #12
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	f04f 30ff 	mov.w	r0, #4294967295
 80033d8:	e0d1      	b.n	800357e <_svfiprintf_r+0x1d2>
 80033da:	2340      	movs	r3, #64	; 0x40
 80033dc:	616b      	str	r3, [r5, #20]
 80033de:	2300      	movs	r3, #0
 80033e0:	9309      	str	r3, [sp, #36]	; 0x24
 80033e2:	2320      	movs	r3, #32
 80033e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033e8:	2330      	movs	r3, #48	; 0x30
 80033ea:	f04f 0901 	mov.w	r9, #1
 80033ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80033f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003598 <_svfiprintf_r+0x1ec>
 80033f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033fa:	4623      	mov	r3, r4
 80033fc:	469a      	mov	sl, r3
 80033fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003402:	b10a      	cbz	r2, 8003408 <_svfiprintf_r+0x5c>
 8003404:	2a25      	cmp	r2, #37	; 0x25
 8003406:	d1f9      	bne.n	80033fc <_svfiprintf_r+0x50>
 8003408:	ebba 0b04 	subs.w	fp, sl, r4
 800340c:	d00b      	beq.n	8003426 <_svfiprintf_r+0x7a>
 800340e:	465b      	mov	r3, fp
 8003410:	4622      	mov	r2, r4
 8003412:	4629      	mov	r1, r5
 8003414:	4638      	mov	r0, r7
 8003416:	f7ff ff6d 	bl	80032f4 <__ssputs_r>
 800341a:	3001      	adds	r0, #1
 800341c:	f000 80aa 	beq.w	8003574 <_svfiprintf_r+0x1c8>
 8003420:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003422:	445a      	add	r2, fp
 8003424:	9209      	str	r2, [sp, #36]	; 0x24
 8003426:	f89a 3000 	ldrb.w	r3, [sl]
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 80a2 	beq.w	8003574 <_svfiprintf_r+0x1c8>
 8003430:	2300      	movs	r3, #0
 8003432:	f04f 32ff 	mov.w	r2, #4294967295
 8003436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800343a:	f10a 0a01 	add.w	sl, sl, #1
 800343e:	9304      	str	r3, [sp, #16]
 8003440:	9307      	str	r3, [sp, #28]
 8003442:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003446:	931a      	str	r3, [sp, #104]	; 0x68
 8003448:	4654      	mov	r4, sl
 800344a:	2205      	movs	r2, #5
 800344c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003450:	4851      	ldr	r0, [pc, #324]	; (8003598 <_svfiprintf_r+0x1ec>)
 8003452:	f000 fa41 	bl	80038d8 <memchr>
 8003456:	9a04      	ldr	r2, [sp, #16]
 8003458:	b9d8      	cbnz	r0, 8003492 <_svfiprintf_r+0xe6>
 800345a:	06d0      	lsls	r0, r2, #27
 800345c:	bf44      	itt	mi
 800345e:	2320      	movmi	r3, #32
 8003460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003464:	0711      	lsls	r1, r2, #28
 8003466:	bf44      	itt	mi
 8003468:	232b      	movmi	r3, #43	; 0x2b
 800346a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800346e:	f89a 3000 	ldrb.w	r3, [sl]
 8003472:	2b2a      	cmp	r3, #42	; 0x2a
 8003474:	d015      	beq.n	80034a2 <_svfiprintf_r+0xf6>
 8003476:	4654      	mov	r4, sl
 8003478:	2000      	movs	r0, #0
 800347a:	f04f 0c0a 	mov.w	ip, #10
 800347e:	9a07      	ldr	r2, [sp, #28]
 8003480:	4621      	mov	r1, r4
 8003482:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003486:	3b30      	subs	r3, #48	; 0x30
 8003488:	2b09      	cmp	r3, #9
 800348a:	d94e      	bls.n	800352a <_svfiprintf_r+0x17e>
 800348c:	b1b0      	cbz	r0, 80034bc <_svfiprintf_r+0x110>
 800348e:	9207      	str	r2, [sp, #28]
 8003490:	e014      	b.n	80034bc <_svfiprintf_r+0x110>
 8003492:	eba0 0308 	sub.w	r3, r0, r8
 8003496:	fa09 f303 	lsl.w	r3, r9, r3
 800349a:	4313      	orrs	r3, r2
 800349c:	46a2      	mov	sl, r4
 800349e:	9304      	str	r3, [sp, #16]
 80034a0:	e7d2      	b.n	8003448 <_svfiprintf_r+0x9c>
 80034a2:	9b03      	ldr	r3, [sp, #12]
 80034a4:	1d19      	adds	r1, r3, #4
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	9103      	str	r1, [sp, #12]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	bfbb      	ittet	lt
 80034ae:	425b      	neglt	r3, r3
 80034b0:	f042 0202 	orrlt.w	r2, r2, #2
 80034b4:	9307      	strge	r3, [sp, #28]
 80034b6:	9307      	strlt	r3, [sp, #28]
 80034b8:	bfb8      	it	lt
 80034ba:	9204      	strlt	r2, [sp, #16]
 80034bc:	7823      	ldrb	r3, [r4, #0]
 80034be:	2b2e      	cmp	r3, #46	; 0x2e
 80034c0:	d10c      	bne.n	80034dc <_svfiprintf_r+0x130>
 80034c2:	7863      	ldrb	r3, [r4, #1]
 80034c4:	2b2a      	cmp	r3, #42	; 0x2a
 80034c6:	d135      	bne.n	8003534 <_svfiprintf_r+0x188>
 80034c8:	9b03      	ldr	r3, [sp, #12]
 80034ca:	3402      	adds	r4, #2
 80034cc:	1d1a      	adds	r2, r3, #4
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	9203      	str	r2, [sp, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	bfb8      	it	lt
 80034d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80034da:	9305      	str	r3, [sp, #20]
 80034dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80035a8 <_svfiprintf_r+0x1fc>
 80034e0:	2203      	movs	r2, #3
 80034e2:	4650      	mov	r0, sl
 80034e4:	7821      	ldrb	r1, [r4, #0]
 80034e6:	f000 f9f7 	bl	80038d8 <memchr>
 80034ea:	b140      	cbz	r0, 80034fe <_svfiprintf_r+0x152>
 80034ec:	2340      	movs	r3, #64	; 0x40
 80034ee:	eba0 000a 	sub.w	r0, r0, sl
 80034f2:	fa03 f000 	lsl.w	r0, r3, r0
 80034f6:	9b04      	ldr	r3, [sp, #16]
 80034f8:	3401      	adds	r4, #1
 80034fa:	4303      	orrs	r3, r0
 80034fc:	9304      	str	r3, [sp, #16]
 80034fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003502:	2206      	movs	r2, #6
 8003504:	4825      	ldr	r0, [pc, #148]	; (800359c <_svfiprintf_r+0x1f0>)
 8003506:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800350a:	f000 f9e5 	bl	80038d8 <memchr>
 800350e:	2800      	cmp	r0, #0
 8003510:	d038      	beq.n	8003584 <_svfiprintf_r+0x1d8>
 8003512:	4b23      	ldr	r3, [pc, #140]	; (80035a0 <_svfiprintf_r+0x1f4>)
 8003514:	bb1b      	cbnz	r3, 800355e <_svfiprintf_r+0x1b2>
 8003516:	9b03      	ldr	r3, [sp, #12]
 8003518:	3307      	adds	r3, #7
 800351a:	f023 0307 	bic.w	r3, r3, #7
 800351e:	3308      	adds	r3, #8
 8003520:	9303      	str	r3, [sp, #12]
 8003522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003524:	4433      	add	r3, r6
 8003526:	9309      	str	r3, [sp, #36]	; 0x24
 8003528:	e767      	b.n	80033fa <_svfiprintf_r+0x4e>
 800352a:	460c      	mov	r4, r1
 800352c:	2001      	movs	r0, #1
 800352e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003532:	e7a5      	b.n	8003480 <_svfiprintf_r+0xd4>
 8003534:	2300      	movs	r3, #0
 8003536:	f04f 0c0a 	mov.w	ip, #10
 800353a:	4619      	mov	r1, r3
 800353c:	3401      	adds	r4, #1
 800353e:	9305      	str	r3, [sp, #20]
 8003540:	4620      	mov	r0, r4
 8003542:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003546:	3a30      	subs	r2, #48	; 0x30
 8003548:	2a09      	cmp	r2, #9
 800354a:	d903      	bls.n	8003554 <_svfiprintf_r+0x1a8>
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0c5      	beq.n	80034dc <_svfiprintf_r+0x130>
 8003550:	9105      	str	r1, [sp, #20]
 8003552:	e7c3      	b.n	80034dc <_svfiprintf_r+0x130>
 8003554:	4604      	mov	r4, r0
 8003556:	2301      	movs	r3, #1
 8003558:	fb0c 2101 	mla	r1, ip, r1, r2
 800355c:	e7f0      	b.n	8003540 <_svfiprintf_r+0x194>
 800355e:	ab03      	add	r3, sp, #12
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	462a      	mov	r2, r5
 8003564:	4638      	mov	r0, r7
 8003566:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <_svfiprintf_r+0x1f8>)
 8003568:	a904      	add	r1, sp, #16
 800356a:	f3af 8000 	nop.w
 800356e:	1c42      	adds	r2, r0, #1
 8003570:	4606      	mov	r6, r0
 8003572:	d1d6      	bne.n	8003522 <_svfiprintf_r+0x176>
 8003574:	89ab      	ldrh	r3, [r5, #12]
 8003576:	065b      	lsls	r3, r3, #25
 8003578:	f53f af2c 	bmi.w	80033d4 <_svfiprintf_r+0x28>
 800357c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800357e:	b01d      	add	sp, #116	; 0x74
 8003580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003584:	ab03      	add	r3, sp, #12
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	462a      	mov	r2, r5
 800358a:	4638      	mov	r0, r7
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <_svfiprintf_r+0x1f8>)
 800358e:	a904      	add	r1, sp, #16
 8003590:	f000 f87c 	bl	800368c <_printf_i>
 8003594:	e7eb      	b.n	800356e <_svfiprintf_r+0x1c2>
 8003596:	bf00      	nop
 8003598:	08003bb6 	.word	0x08003bb6
 800359c:	08003bc0 	.word	0x08003bc0
 80035a0:	00000000 	.word	0x00000000
 80035a4:	080032f5 	.word	0x080032f5
 80035a8:	08003bbc 	.word	0x08003bbc

080035ac <_printf_common>:
 80035ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035b0:	4616      	mov	r6, r2
 80035b2:	4699      	mov	r9, r3
 80035b4:	688a      	ldr	r2, [r1, #8]
 80035b6:	690b      	ldr	r3, [r1, #16]
 80035b8:	4607      	mov	r7, r0
 80035ba:	4293      	cmp	r3, r2
 80035bc:	bfb8      	it	lt
 80035be:	4613      	movlt	r3, r2
 80035c0:	6033      	str	r3, [r6, #0]
 80035c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035c6:	460c      	mov	r4, r1
 80035c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035cc:	b10a      	cbz	r2, 80035d2 <_printf_common+0x26>
 80035ce:	3301      	adds	r3, #1
 80035d0:	6033      	str	r3, [r6, #0]
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	0699      	lsls	r1, r3, #26
 80035d6:	bf42      	ittt	mi
 80035d8:	6833      	ldrmi	r3, [r6, #0]
 80035da:	3302      	addmi	r3, #2
 80035dc:	6033      	strmi	r3, [r6, #0]
 80035de:	6825      	ldr	r5, [r4, #0]
 80035e0:	f015 0506 	ands.w	r5, r5, #6
 80035e4:	d106      	bne.n	80035f4 <_printf_common+0x48>
 80035e6:	f104 0a19 	add.w	sl, r4, #25
 80035ea:	68e3      	ldr	r3, [r4, #12]
 80035ec:	6832      	ldr	r2, [r6, #0]
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	42ab      	cmp	r3, r5
 80035f2:	dc28      	bgt.n	8003646 <_printf_common+0x9a>
 80035f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035f8:	1e13      	subs	r3, r2, #0
 80035fa:	6822      	ldr	r2, [r4, #0]
 80035fc:	bf18      	it	ne
 80035fe:	2301      	movne	r3, #1
 8003600:	0692      	lsls	r2, r2, #26
 8003602:	d42d      	bmi.n	8003660 <_printf_common+0xb4>
 8003604:	4649      	mov	r1, r9
 8003606:	4638      	mov	r0, r7
 8003608:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800360c:	47c0      	blx	r8
 800360e:	3001      	adds	r0, #1
 8003610:	d020      	beq.n	8003654 <_printf_common+0xa8>
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	68e5      	ldr	r5, [r4, #12]
 8003616:	f003 0306 	and.w	r3, r3, #6
 800361a:	2b04      	cmp	r3, #4
 800361c:	bf18      	it	ne
 800361e:	2500      	movne	r5, #0
 8003620:	6832      	ldr	r2, [r6, #0]
 8003622:	f04f 0600 	mov.w	r6, #0
 8003626:	68a3      	ldr	r3, [r4, #8]
 8003628:	bf08      	it	eq
 800362a:	1aad      	subeq	r5, r5, r2
 800362c:	6922      	ldr	r2, [r4, #16]
 800362e:	bf08      	it	eq
 8003630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003634:	4293      	cmp	r3, r2
 8003636:	bfc4      	itt	gt
 8003638:	1a9b      	subgt	r3, r3, r2
 800363a:	18ed      	addgt	r5, r5, r3
 800363c:	341a      	adds	r4, #26
 800363e:	42b5      	cmp	r5, r6
 8003640:	d11a      	bne.n	8003678 <_printf_common+0xcc>
 8003642:	2000      	movs	r0, #0
 8003644:	e008      	b.n	8003658 <_printf_common+0xac>
 8003646:	2301      	movs	r3, #1
 8003648:	4652      	mov	r2, sl
 800364a:	4649      	mov	r1, r9
 800364c:	4638      	mov	r0, r7
 800364e:	47c0      	blx	r8
 8003650:	3001      	adds	r0, #1
 8003652:	d103      	bne.n	800365c <_printf_common+0xb0>
 8003654:	f04f 30ff 	mov.w	r0, #4294967295
 8003658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800365c:	3501      	adds	r5, #1
 800365e:	e7c4      	b.n	80035ea <_printf_common+0x3e>
 8003660:	2030      	movs	r0, #48	; 0x30
 8003662:	18e1      	adds	r1, r4, r3
 8003664:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800366e:	4422      	add	r2, r4
 8003670:	3302      	adds	r3, #2
 8003672:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003676:	e7c5      	b.n	8003604 <_printf_common+0x58>
 8003678:	2301      	movs	r3, #1
 800367a:	4622      	mov	r2, r4
 800367c:	4649      	mov	r1, r9
 800367e:	4638      	mov	r0, r7
 8003680:	47c0      	blx	r8
 8003682:	3001      	adds	r0, #1
 8003684:	d0e6      	beq.n	8003654 <_printf_common+0xa8>
 8003686:	3601      	adds	r6, #1
 8003688:	e7d9      	b.n	800363e <_printf_common+0x92>
	...

0800368c <_printf_i>:
 800368c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003690:	460c      	mov	r4, r1
 8003692:	7e27      	ldrb	r7, [r4, #24]
 8003694:	4691      	mov	r9, r2
 8003696:	2f78      	cmp	r7, #120	; 0x78
 8003698:	4680      	mov	r8, r0
 800369a:	469a      	mov	sl, r3
 800369c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800369e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036a2:	d807      	bhi.n	80036b4 <_printf_i+0x28>
 80036a4:	2f62      	cmp	r7, #98	; 0x62
 80036a6:	d80a      	bhi.n	80036be <_printf_i+0x32>
 80036a8:	2f00      	cmp	r7, #0
 80036aa:	f000 80d9 	beq.w	8003860 <_printf_i+0x1d4>
 80036ae:	2f58      	cmp	r7, #88	; 0x58
 80036b0:	f000 80a4 	beq.w	80037fc <_printf_i+0x170>
 80036b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036bc:	e03a      	b.n	8003734 <_printf_i+0xa8>
 80036be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036c2:	2b15      	cmp	r3, #21
 80036c4:	d8f6      	bhi.n	80036b4 <_printf_i+0x28>
 80036c6:	a001      	add	r0, pc, #4	; (adr r0, 80036cc <_printf_i+0x40>)
 80036c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80036cc:	08003725 	.word	0x08003725
 80036d0:	08003739 	.word	0x08003739
 80036d4:	080036b5 	.word	0x080036b5
 80036d8:	080036b5 	.word	0x080036b5
 80036dc:	080036b5 	.word	0x080036b5
 80036e0:	080036b5 	.word	0x080036b5
 80036e4:	08003739 	.word	0x08003739
 80036e8:	080036b5 	.word	0x080036b5
 80036ec:	080036b5 	.word	0x080036b5
 80036f0:	080036b5 	.word	0x080036b5
 80036f4:	080036b5 	.word	0x080036b5
 80036f8:	08003847 	.word	0x08003847
 80036fc:	08003769 	.word	0x08003769
 8003700:	08003829 	.word	0x08003829
 8003704:	080036b5 	.word	0x080036b5
 8003708:	080036b5 	.word	0x080036b5
 800370c:	08003869 	.word	0x08003869
 8003710:	080036b5 	.word	0x080036b5
 8003714:	08003769 	.word	0x08003769
 8003718:	080036b5 	.word	0x080036b5
 800371c:	080036b5 	.word	0x080036b5
 8003720:	08003831 	.word	0x08003831
 8003724:	680b      	ldr	r3, [r1, #0]
 8003726:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800372a:	1d1a      	adds	r2, r3, #4
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	600a      	str	r2, [r1, #0]
 8003730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003734:	2301      	movs	r3, #1
 8003736:	e0a4      	b.n	8003882 <_printf_i+0x1f6>
 8003738:	6825      	ldr	r5, [r4, #0]
 800373a:	6808      	ldr	r0, [r1, #0]
 800373c:	062e      	lsls	r6, r5, #24
 800373e:	f100 0304 	add.w	r3, r0, #4
 8003742:	d50a      	bpl.n	800375a <_printf_i+0xce>
 8003744:	6805      	ldr	r5, [r0, #0]
 8003746:	600b      	str	r3, [r1, #0]
 8003748:	2d00      	cmp	r5, #0
 800374a:	da03      	bge.n	8003754 <_printf_i+0xc8>
 800374c:	232d      	movs	r3, #45	; 0x2d
 800374e:	426d      	negs	r5, r5
 8003750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003754:	230a      	movs	r3, #10
 8003756:	485e      	ldr	r0, [pc, #376]	; (80038d0 <_printf_i+0x244>)
 8003758:	e019      	b.n	800378e <_printf_i+0x102>
 800375a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800375e:	6805      	ldr	r5, [r0, #0]
 8003760:	600b      	str	r3, [r1, #0]
 8003762:	bf18      	it	ne
 8003764:	b22d      	sxthne	r5, r5
 8003766:	e7ef      	b.n	8003748 <_printf_i+0xbc>
 8003768:	680b      	ldr	r3, [r1, #0]
 800376a:	6825      	ldr	r5, [r4, #0]
 800376c:	1d18      	adds	r0, r3, #4
 800376e:	6008      	str	r0, [r1, #0]
 8003770:	0628      	lsls	r0, r5, #24
 8003772:	d501      	bpl.n	8003778 <_printf_i+0xec>
 8003774:	681d      	ldr	r5, [r3, #0]
 8003776:	e002      	b.n	800377e <_printf_i+0xf2>
 8003778:	0669      	lsls	r1, r5, #25
 800377a:	d5fb      	bpl.n	8003774 <_printf_i+0xe8>
 800377c:	881d      	ldrh	r5, [r3, #0]
 800377e:	2f6f      	cmp	r7, #111	; 0x6f
 8003780:	bf0c      	ite	eq
 8003782:	2308      	moveq	r3, #8
 8003784:	230a      	movne	r3, #10
 8003786:	4852      	ldr	r0, [pc, #328]	; (80038d0 <_printf_i+0x244>)
 8003788:	2100      	movs	r1, #0
 800378a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800378e:	6866      	ldr	r6, [r4, #4]
 8003790:	2e00      	cmp	r6, #0
 8003792:	bfa8      	it	ge
 8003794:	6821      	ldrge	r1, [r4, #0]
 8003796:	60a6      	str	r6, [r4, #8]
 8003798:	bfa4      	itt	ge
 800379a:	f021 0104 	bicge.w	r1, r1, #4
 800379e:	6021      	strge	r1, [r4, #0]
 80037a0:	b90d      	cbnz	r5, 80037a6 <_printf_i+0x11a>
 80037a2:	2e00      	cmp	r6, #0
 80037a4:	d04d      	beq.n	8003842 <_printf_i+0x1b6>
 80037a6:	4616      	mov	r6, r2
 80037a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80037ac:	fb03 5711 	mls	r7, r3, r1, r5
 80037b0:	5dc7      	ldrb	r7, [r0, r7]
 80037b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037b6:	462f      	mov	r7, r5
 80037b8:	42bb      	cmp	r3, r7
 80037ba:	460d      	mov	r5, r1
 80037bc:	d9f4      	bls.n	80037a8 <_printf_i+0x11c>
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d10b      	bne.n	80037da <_printf_i+0x14e>
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	07df      	lsls	r7, r3, #31
 80037c6:	d508      	bpl.n	80037da <_printf_i+0x14e>
 80037c8:	6923      	ldr	r3, [r4, #16]
 80037ca:	6861      	ldr	r1, [r4, #4]
 80037cc:	4299      	cmp	r1, r3
 80037ce:	bfde      	ittt	le
 80037d0:	2330      	movle	r3, #48	; 0x30
 80037d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80037d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037da:	1b92      	subs	r2, r2, r6
 80037dc:	6122      	str	r2, [r4, #16]
 80037de:	464b      	mov	r3, r9
 80037e0:	4621      	mov	r1, r4
 80037e2:	4640      	mov	r0, r8
 80037e4:	f8cd a000 	str.w	sl, [sp]
 80037e8:	aa03      	add	r2, sp, #12
 80037ea:	f7ff fedf 	bl	80035ac <_printf_common>
 80037ee:	3001      	adds	r0, #1
 80037f0:	d14c      	bne.n	800388c <_printf_i+0x200>
 80037f2:	f04f 30ff 	mov.w	r0, #4294967295
 80037f6:	b004      	add	sp, #16
 80037f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037fc:	4834      	ldr	r0, [pc, #208]	; (80038d0 <_printf_i+0x244>)
 80037fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003802:	680e      	ldr	r6, [r1, #0]
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	f856 5b04 	ldr.w	r5, [r6], #4
 800380a:	061f      	lsls	r7, r3, #24
 800380c:	600e      	str	r6, [r1, #0]
 800380e:	d514      	bpl.n	800383a <_printf_i+0x1ae>
 8003810:	07d9      	lsls	r1, r3, #31
 8003812:	bf44      	itt	mi
 8003814:	f043 0320 	orrmi.w	r3, r3, #32
 8003818:	6023      	strmi	r3, [r4, #0]
 800381a:	b91d      	cbnz	r5, 8003824 <_printf_i+0x198>
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	f023 0320 	bic.w	r3, r3, #32
 8003822:	6023      	str	r3, [r4, #0]
 8003824:	2310      	movs	r3, #16
 8003826:	e7af      	b.n	8003788 <_printf_i+0xfc>
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	f043 0320 	orr.w	r3, r3, #32
 800382e:	6023      	str	r3, [r4, #0]
 8003830:	2378      	movs	r3, #120	; 0x78
 8003832:	4828      	ldr	r0, [pc, #160]	; (80038d4 <_printf_i+0x248>)
 8003834:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003838:	e7e3      	b.n	8003802 <_printf_i+0x176>
 800383a:	065e      	lsls	r6, r3, #25
 800383c:	bf48      	it	mi
 800383e:	b2ad      	uxthmi	r5, r5
 8003840:	e7e6      	b.n	8003810 <_printf_i+0x184>
 8003842:	4616      	mov	r6, r2
 8003844:	e7bb      	b.n	80037be <_printf_i+0x132>
 8003846:	680b      	ldr	r3, [r1, #0]
 8003848:	6826      	ldr	r6, [r4, #0]
 800384a:	1d1d      	adds	r5, r3, #4
 800384c:	6960      	ldr	r0, [r4, #20]
 800384e:	600d      	str	r5, [r1, #0]
 8003850:	0635      	lsls	r5, r6, #24
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	d501      	bpl.n	800385a <_printf_i+0x1ce>
 8003856:	6018      	str	r0, [r3, #0]
 8003858:	e002      	b.n	8003860 <_printf_i+0x1d4>
 800385a:	0671      	lsls	r1, r6, #25
 800385c:	d5fb      	bpl.n	8003856 <_printf_i+0x1ca>
 800385e:	8018      	strh	r0, [r3, #0]
 8003860:	2300      	movs	r3, #0
 8003862:	4616      	mov	r6, r2
 8003864:	6123      	str	r3, [r4, #16]
 8003866:	e7ba      	b.n	80037de <_printf_i+0x152>
 8003868:	680b      	ldr	r3, [r1, #0]
 800386a:	1d1a      	adds	r2, r3, #4
 800386c:	600a      	str	r2, [r1, #0]
 800386e:	681e      	ldr	r6, [r3, #0]
 8003870:	2100      	movs	r1, #0
 8003872:	4630      	mov	r0, r6
 8003874:	6862      	ldr	r2, [r4, #4]
 8003876:	f000 f82f 	bl	80038d8 <memchr>
 800387a:	b108      	cbz	r0, 8003880 <_printf_i+0x1f4>
 800387c:	1b80      	subs	r0, r0, r6
 800387e:	6060      	str	r0, [r4, #4]
 8003880:	6863      	ldr	r3, [r4, #4]
 8003882:	6123      	str	r3, [r4, #16]
 8003884:	2300      	movs	r3, #0
 8003886:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800388a:	e7a8      	b.n	80037de <_printf_i+0x152>
 800388c:	4632      	mov	r2, r6
 800388e:	4649      	mov	r1, r9
 8003890:	4640      	mov	r0, r8
 8003892:	6923      	ldr	r3, [r4, #16]
 8003894:	47d0      	blx	sl
 8003896:	3001      	adds	r0, #1
 8003898:	d0ab      	beq.n	80037f2 <_printf_i+0x166>
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	079b      	lsls	r3, r3, #30
 800389e:	d413      	bmi.n	80038c8 <_printf_i+0x23c>
 80038a0:	68e0      	ldr	r0, [r4, #12]
 80038a2:	9b03      	ldr	r3, [sp, #12]
 80038a4:	4298      	cmp	r0, r3
 80038a6:	bfb8      	it	lt
 80038a8:	4618      	movlt	r0, r3
 80038aa:	e7a4      	b.n	80037f6 <_printf_i+0x16a>
 80038ac:	2301      	movs	r3, #1
 80038ae:	4632      	mov	r2, r6
 80038b0:	4649      	mov	r1, r9
 80038b2:	4640      	mov	r0, r8
 80038b4:	47d0      	blx	sl
 80038b6:	3001      	adds	r0, #1
 80038b8:	d09b      	beq.n	80037f2 <_printf_i+0x166>
 80038ba:	3501      	adds	r5, #1
 80038bc:	68e3      	ldr	r3, [r4, #12]
 80038be:	9903      	ldr	r1, [sp, #12]
 80038c0:	1a5b      	subs	r3, r3, r1
 80038c2:	42ab      	cmp	r3, r5
 80038c4:	dcf2      	bgt.n	80038ac <_printf_i+0x220>
 80038c6:	e7eb      	b.n	80038a0 <_printf_i+0x214>
 80038c8:	2500      	movs	r5, #0
 80038ca:	f104 0619 	add.w	r6, r4, #25
 80038ce:	e7f5      	b.n	80038bc <_printf_i+0x230>
 80038d0:	08003bc7 	.word	0x08003bc7
 80038d4:	08003bd8 	.word	0x08003bd8

080038d8 <memchr>:
 80038d8:	4603      	mov	r3, r0
 80038da:	b510      	push	{r4, lr}
 80038dc:	b2c9      	uxtb	r1, r1
 80038de:	4402      	add	r2, r0
 80038e0:	4293      	cmp	r3, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	d101      	bne.n	80038ea <memchr+0x12>
 80038e6:	2000      	movs	r0, #0
 80038e8:	e003      	b.n	80038f2 <memchr+0x1a>
 80038ea:	7804      	ldrb	r4, [r0, #0]
 80038ec:	3301      	adds	r3, #1
 80038ee:	428c      	cmp	r4, r1
 80038f0:	d1f6      	bne.n	80038e0 <memchr+0x8>
 80038f2:	bd10      	pop	{r4, pc}

080038f4 <memmove>:
 80038f4:	4288      	cmp	r0, r1
 80038f6:	b510      	push	{r4, lr}
 80038f8:	eb01 0402 	add.w	r4, r1, r2
 80038fc:	d902      	bls.n	8003904 <memmove+0x10>
 80038fe:	4284      	cmp	r4, r0
 8003900:	4623      	mov	r3, r4
 8003902:	d807      	bhi.n	8003914 <memmove+0x20>
 8003904:	1e43      	subs	r3, r0, #1
 8003906:	42a1      	cmp	r1, r4
 8003908:	d008      	beq.n	800391c <memmove+0x28>
 800390a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800390e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003912:	e7f8      	b.n	8003906 <memmove+0x12>
 8003914:	4601      	mov	r1, r0
 8003916:	4402      	add	r2, r0
 8003918:	428a      	cmp	r2, r1
 800391a:	d100      	bne.n	800391e <memmove+0x2a>
 800391c:	bd10      	pop	{r4, pc}
 800391e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003922:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003926:	e7f7      	b.n	8003918 <memmove+0x24>

08003928 <_free_r>:
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	4605      	mov	r5, r0
 800392c:	2900      	cmp	r1, #0
 800392e:	d043      	beq.n	80039b8 <_free_r+0x90>
 8003930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003934:	1f0c      	subs	r4, r1, #4
 8003936:	2b00      	cmp	r3, #0
 8003938:	bfb8      	it	lt
 800393a:	18e4      	addlt	r4, r4, r3
 800393c:	f000 f8d0 	bl	8003ae0 <__malloc_lock>
 8003940:	4a1e      	ldr	r2, [pc, #120]	; (80039bc <_free_r+0x94>)
 8003942:	6813      	ldr	r3, [r2, #0]
 8003944:	4610      	mov	r0, r2
 8003946:	b933      	cbnz	r3, 8003956 <_free_r+0x2e>
 8003948:	6063      	str	r3, [r4, #4]
 800394a:	6014      	str	r4, [r2, #0]
 800394c:	4628      	mov	r0, r5
 800394e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003952:	f000 b8cb 	b.w	8003aec <__malloc_unlock>
 8003956:	42a3      	cmp	r3, r4
 8003958:	d90a      	bls.n	8003970 <_free_r+0x48>
 800395a:	6821      	ldr	r1, [r4, #0]
 800395c:	1862      	adds	r2, r4, r1
 800395e:	4293      	cmp	r3, r2
 8003960:	bf01      	itttt	eq
 8003962:	681a      	ldreq	r2, [r3, #0]
 8003964:	685b      	ldreq	r3, [r3, #4]
 8003966:	1852      	addeq	r2, r2, r1
 8003968:	6022      	streq	r2, [r4, #0]
 800396a:	6063      	str	r3, [r4, #4]
 800396c:	6004      	str	r4, [r0, #0]
 800396e:	e7ed      	b.n	800394c <_free_r+0x24>
 8003970:	461a      	mov	r2, r3
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	b10b      	cbz	r3, 800397a <_free_r+0x52>
 8003976:	42a3      	cmp	r3, r4
 8003978:	d9fa      	bls.n	8003970 <_free_r+0x48>
 800397a:	6811      	ldr	r1, [r2, #0]
 800397c:	1850      	adds	r0, r2, r1
 800397e:	42a0      	cmp	r0, r4
 8003980:	d10b      	bne.n	800399a <_free_r+0x72>
 8003982:	6820      	ldr	r0, [r4, #0]
 8003984:	4401      	add	r1, r0
 8003986:	1850      	adds	r0, r2, r1
 8003988:	4283      	cmp	r3, r0
 800398a:	6011      	str	r1, [r2, #0]
 800398c:	d1de      	bne.n	800394c <_free_r+0x24>
 800398e:	6818      	ldr	r0, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	4401      	add	r1, r0
 8003994:	6011      	str	r1, [r2, #0]
 8003996:	6053      	str	r3, [r2, #4]
 8003998:	e7d8      	b.n	800394c <_free_r+0x24>
 800399a:	d902      	bls.n	80039a2 <_free_r+0x7a>
 800399c:	230c      	movs	r3, #12
 800399e:	602b      	str	r3, [r5, #0]
 80039a0:	e7d4      	b.n	800394c <_free_r+0x24>
 80039a2:	6820      	ldr	r0, [r4, #0]
 80039a4:	1821      	adds	r1, r4, r0
 80039a6:	428b      	cmp	r3, r1
 80039a8:	bf01      	itttt	eq
 80039aa:	6819      	ldreq	r1, [r3, #0]
 80039ac:	685b      	ldreq	r3, [r3, #4]
 80039ae:	1809      	addeq	r1, r1, r0
 80039b0:	6021      	streq	r1, [r4, #0]
 80039b2:	6063      	str	r3, [r4, #4]
 80039b4:	6054      	str	r4, [r2, #4]
 80039b6:	e7c9      	b.n	800394c <_free_r+0x24>
 80039b8:	bd38      	pop	{r3, r4, r5, pc}
 80039ba:	bf00      	nop
 80039bc:	2000103c 	.word	0x2000103c

080039c0 <_malloc_r>:
 80039c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c2:	1ccd      	adds	r5, r1, #3
 80039c4:	f025 0503 	bic.w	r5, r5, #3
 80039c8:	3508      	adds	r5, #8
 80039ca:	2d0c      	cmp	r5, #12
 80039cc:	bf38      	it	cc
 80039ce:	250c      	movcc	r5, #12
 80039d0:	2d00      	cmp	r5, #0
 80039d2:	4606      	mov	r6, r0
 80039d4:	db01      	blt.n	80039da <_malloc_r+0x1a>
 80039d6:	42a9      	cmp	r1, r5
 80039d8:	d903      	bls.n	80039e2 <_malloc_r+0x22>
 80039da:	230c      	movs	r3, #12
 80039dc:	6033      	str	r3, [r6, #0]
 80039de:	2000      	movs	r0, #0
 80039e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039e2:	f000 f87d 	bl	8003ae0 <__malloc_lock>
 80039e6:	4921      	ldr	r1, [pc, #132]	; (8003a6c <_malloc_r+0xac>)
 80039e8:	680a      	ldr	r2, [r1, #0]
 80039ea:	4614      	mov	r4, r2
 80039ec:	b99c      	cbnz	r4, 8003a16 <_malloc_r+0x56>
 80039ee:	4f20      	ldr	r7, [pc, #128]	; (8003a70 <_malloc_r+0xb0>)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	b923      	cbnz	r3, 80039fe <_malloc_r+0x3e>
 80039f4:	4621      	mov	r1, r4
 80039f6:	4630      	mov	r0, r6
 80039f8:	f000 f862 	bl	8003ac0 <_sbrk_r>
 80039fc:	6038      	str	r0, [r7, #0]
 80039fe:	4629      	mov	r1, r5
 8003a00:	4630      	mov	r0, r6
 8003a02:	f000 f85d 	bl	8003ac0 <_sbrk_r>
 8003a06:	1c43      	adds	r3, r0, #1
 8003a08:	d123      	bne.n	8003a52 <_malloc_r+0x92>
 8003a0a:	230c      	movs	r3, #12
 8003a0c:	4630      	mov	r0, r6
 8003a0e:	6033      	str	r3, [r6, #0]
 8003a10:	f000 f86c 	bl	8003aec <__malloc_unlock>
 8003a14:	e7e3      	b.n	80039de <_malloc_r+0x1e>
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	1b5b      	subs	r3, r3, r5
 8003a1a:	d417      	bmi.n	8003a4c <_malloc_r+0x8c>
 8003a1c:	2b0b      	cmp	r3, #11
 8003a1e:	d903      	bls.n	8003a28 <_malloc_r+0x68>
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	441c      	add	r4, r3
 8003a24:	6025      	str	r5, [r4, #0]
 8003a26:	e004      	b.n	8003a32 <_malloc_r+0x72>
 8003a28:	6863      	ldr	r3, [r4, #4]
 8003a2a:	42a2      	cmp	r2, r4
 8003a2c:	bf0c      	ite	eq
 8003a2e:	600b      	streq	r3, [r1, #0]
 8003a30:	6053      	strne	r3, [r2, #4]
 8003a32:	4630      	mov	r0, r6
 8003a34:	f000 f85a 	bl	8003aec <__malloc_unlock>
 8003a38:	f104 000b 	add.w	r0, r4, #11
 8003a3c:	1d23      	adds	r3, r4, #4
 8003a3e:	f020 0007 	bic.w	r0, r0, #7
 8003a42:	1ac2      	subs	r2, r0, r3
 8003a44:	d0cc      	beq.n	80039e0 <_malloc_r+0x20>
 8003a46:	1a1b      	subs	r3, r3, r0
 8003a48:	50a3      	str	r3, [r4, r2]
 8003a4a:	e7c9      	b.n	80039e0 <_malloc_r+0x20>
 8003a4c:	4622      	mov	r2, r4
 8003a4e:	6864      	ldr	r4, [r4, #4]
 8003a50:	e7cc      	b.n	80039ec <_malloc_r+0x2c>
 8003a52:	1cc4      	adds	r4, r0, #3
 8003a54:	f024 0403 	bic.w	r4, r4, #3
 8003a58:	42a0      	cmp	r0, r4
 8003a5a:	d0e3      	beq.n	8003a24 <_malloc_r+0x64>
 8003a5c:	1a21      	subs	r1, r4, r0
 8003a5e:	4630      	mov	r0, r6
 8003a60:	f000 f82e 	bl	8003ac0 <_sbrk_r>
 8003a64:	3001      	adds	r0, #1
 8003a66:	d1dd      	bne.n	8003a24 <_malloc_r+0x64>
 8003a68:	e7cf      	b.n	8003a0a <_malloc_r+0x4a>
 8003a6a:	bf00      	nop
 8003a6c:	2000103c 	.word	0x2000103c
 8003a70:	20001040 	.word	0x20001040

08003a74 <_realloc_r>:
 8003a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a76:	4607      	mov	r7, r0
 8003a78:	4614      	mov	r4, r2
 8003a7a:	460e      	mov	r6, r1
 8003a7c:	b921      	cbnz	r1, 8003a88 <_realloc_r+0x14>
 8003a7e:	4611      	mov	r1, r2
 8003a80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a84:	f7ff bf9c 	b.w	80039c0 <_malloc_r>
 8003a88:	b922      	cbnz	r2, 8003a94 <_realloc_r+0x20>
 8003a8a:	f7ff ff4d 	bl	8003928 <_free_r>
 8003a8e:	4625      	mov	r5, r4
 8003a90:	4628      	mov	r0, r5
 8003a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a94:	f000 f830 	bl	8003af8 <_malloc_usable_size_r>
 8003a98:	42a0      	cmp	r0, r4
 8003a9a:	d20f      	bcs.n	8003abc <_realloc_r+0x48>
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	4638      	mov	r0, r7
 8003aa0:	f7ff ff8e 	bl	80039c0 <_malloc_r>
 8003aa4:	4605      	mov	r5, r0
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	d0f2      	beq.n	8003a90 <_realloc_r+0x1c>
 8003aaa:	4631      	mov	r1, r6
 8003aac:	4622      	mov	r2, r4
 8003aae:	f7ff fbd1 	bl	8003254 <memcpy>
 8003ab2:	4631      	mov	r1, r6
 8003ab4:	4638      	mov	r0, r7
 8003ab6:	f7ff ff37 	bl	8003928 <_free_r>
 8003aba:	e7e9      	b.n	8003a90 <_realloc_r+0x1c>
 8003abc:	4635      	mov	r5, r6
 8003abe:	e7e7      	b.n	8003a90 <_realloc_r+0x1c>

08003ac0 <_sbrk_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	4d05      	ldr	r5, [pc, #20]	; (8003adc <_sbrk_r+0x1c>)
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	4608      	mov	r0, r1
 8003aca:	602b      	str	r3, [r5, #0]
 8003acc:	f7fc fde4 	bl	8000698 <_sbrk>
 8003ad0:	1c43      	adds	r3, r0, #1
 8003ad2:	d102      	bne.n	8003ada <_sbrk_r+0x1a>
 8003ad4:	682b      	ldr	r3, [r5, #0]
 8003ad6:	b103      	cbz	r3, 8003ada <_sbrk_r+0x1a>
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	bd38      	pop	{r3, r4, r5, pc}
 8003adc:	20001108 	.word	0x20001108

08003ae0 <__malloc_lock>:
 8003ae0:	4801      	ldr	r0, [pc, #4]	; (8003ae8 <__malloc_lock+0x8>)
 8003ae2:	f000 b811 	b.w	8003b08 <__retarget_lock_acquire_recursive>
 8003ae6:	bf00      	nop
 8003ae8:	20001110 	.word	0x20001110

08003aec <__malloc_unlock>:
 8003aec:	4801      	ldr	r0, [pc, #4]	; (8003af4 <__malloc_unlock+0x8>)
 8003aee:	f000 b80c 	b.w	8003b0a <__retarget_lock_release_recursive>
 8003af2:	bf00      	nop
 8003af4:	20001110 	.word	0x20001110

08003af8 <_malloc_usable_size_r>:
 8003af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003afc:	1f18      	subs	r0, r3, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bfbc      	itt	lt
 8003b02:	580b      	ldrlt	r3, [r1, r0]
 8003b04:	18c0      	addlt	r0, r0, r3
 8003b06:	4770      	bx	lr

08003b08 <__retarget_lock_acquire_recursive>:
 8003b08:	4770      	bx	lr

08003b0a <__retarget_lock_release_recursive>:
 8003b0a:	4770      	bx	lr

08003b0c <_init>:
 8003b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0e:	bf00      	nop
 8003b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b12:	bc08      	pop	{r3}
 8003b14:	469e      	mov	lr, r3
 8003b16:	4770      	bx	lr

08003b18 <_fini>:
 8003b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1a:	bf00      	nop
 8003b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1e:	bc08      	pop	{r3}
 8003b20:	469e      	mov	lr, r3
 8003b22:	4770      	bx	lr
