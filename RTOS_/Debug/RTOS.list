
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024c4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080026a8  080026a8  000126a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002718  08002718  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002718  08002718  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002718  08002718  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002718  08002718  00012718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800271c  0800271c  0001271c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000070  08002790  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08002790  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e34d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de5  00000000  00000000  0002e3e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  000301d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  00030d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a591  00000000  00000000  00031868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d52a  00000000  00000000  0004bdf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098ef4  00000000  00000000  00059323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2217  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003400  00000000  00000000  000f226c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08002690 	.word	0x08002690

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08002690 	.word	0x08002690

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 fa40 	bl	80006ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f80a 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f878 	bl	8000324 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000234:	f000 f84c 	bl	80002d0 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mprintf("Hello World!!");
 8000238:	4801      	ldr	r0, [pc, #4]	; (8000240 <main+0x1c>)
 800023a:	f000 f8ad 	bl	8000398 <mprintf>
 800023e:	e7fb      	b.n	8000238 <main+0x14>
 8000240:	080026a8 	.word	0x080026a8

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b090      	sub	sp, #64	; 0x40
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0318 	add.w	r3, r7, #24
 800024e:	2228      	movs	r2, #40	; 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f001 fdc0 	bl	8001dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000266:	2301      	movs	r3, #1
 8000268:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000274:	2301      	movs	r3, #1
 8000276:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000278:	2302      	movs	r3, #2
 800027a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000280:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000282:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000286:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	f107 0318 	add.w	r3, r7, #24
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fcb3 	bl	8000bf8 <HAL_RCC_OscConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000298:	f000 f878 	bl	800038c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029c:	230f      	movs	r3, #15
 800029e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a0:	2302      	movs	r3, #2
 80002a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2102      	movs	r1, #2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 ff1e 	bl	80010f8 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002c2:	f000 f863 	bl	800038c <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3740      	adds	r7, #64	; 0x40
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002d6:	4a12      	ldr	r2, [pc, #72]	; (8000320 <MX_USART1_UART_Init+0x50>)
 80002d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002f6:	220c      	movs	r2, #12
 80002f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002fa:	4b08      	ldr	r3, [pc, #32]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <MX_USART1_UART_Init+0x4c>)
 8000302:	2200      	movs	r2, #0
 8000304:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000306:	4805      	ldr	r0, [pc, #20]	; (800031c <MX_USART1_UART_Init+0x4c>)
 8000308:	f001 fb18 	bl	800193c <HAL_UART_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000312:	f000 f83b 	bl	800038c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000098 	.word	0x20000098
 8000320:	40013800 	.word	0x40013800

08000324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <MX_GPIO_Init+0x40>)
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <MX_GPIO_Init+0x40>)
 8000330:	f043 0320 	orr.w	r3, r3, #32
 8000334:	6193      	str	r3, [r2, #24]
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <MX_GPIO_Init+0x40>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	f003 0320 	and.w	r3, r3, #32
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <MX_GPIO_Init+0x40>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a07      	ldr	r2, [pc, #28]	; (8000364 <MX_GPIO_Init+0x40>)
 8000348:	f043 0304 	orr.w	r3, r3, #4
 800034c:	6193      	str	r3, [r2, #24]
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <MX_GPIO_Init+0x40>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	f003 0304 	and.w	r3, r3, #4
 8000356:	603b      	str	r3, [r7, #0]
 8000358:	683b      	ldr	r3, [r7, #0]

}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	40021000 	.word	0x40021000

08000368 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a04      	ldr	r2, [pc, #16]	; (8000388 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d101      	bne.n	800037e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800037a:	f000 f9ad 	bl	80006d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40000800 	.word	0x40000800

0800038c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000390:	b672      	cpsid	i
}
 8000392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000394:	e7fe      	b.n	8000394 <Error_Handler+0x8>
	...

08000398 <mprintf>:

UART_HandleTypeDef huart1;

char buff[40];

void mprintf(const char* format,...){
 8000398:	b40f      	push	{r0, r1, r2, r3}
 800039a:	b580      	push	{r7, lr}
 800039c:	b082      	sub	sp, #8
 800039e:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args,format);
 80003a0:	f107 0314 	add.w	r3, r7, #20
 80003a4:	607b      	str	r3, [r7, #4]
	vsnprintf(buff,sizeof(buff), format,args);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	693a      	ldr	r2, [r7, #16]
 80003aa:	2128      	movs	r1, #40	; 0x28
 80003ac:	4808      	ldr	r0, [pc, #32]	; (80003d0 <mprintf+0x38>)
 80003ae:	f001 fd47 	bl	8001e40 <vsniprintf>
	va_end(args);

	HAL_UART_Transmit(&huart1, (uint8_t*)buff, 40, 1000);
 80003b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003b6:	2228      	movs	r2, #40	; 0x28
 80003b8:	4905      	ldr	r1, [pc, #20]	; (80003d0 <mprintf+0x38>)
 80003ba:	4806      	ldr	r0, [pc, #24]	; (80003d4 <mprintf+0x3c>)
 80003bc:	f001 fb0e 	bl	80019dc <HAL_UART_Transmit>
}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003ca:	b004      	add	sp, #16
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	200000e0 	.word	0x200000e0
 80003d4:	20000098 	.word	0x20000098

080003d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003de:	4b15      	ldr	r3, [pc, #84]	; (8000434 <HAL_MspInit+0x5c>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	4a14      	ldr	r2, [pc, #80]	; (8000434 <HAL_MspInit+0x5c>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6193      	str	r3, [r2, #24]
 80003ea:	4b12      	ldr	r3, [pc, #72]	; (8000434 <HAL_MspInit+0x5c>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f6:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <HAL_MspInit+0x5c>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	4a0e      	ldr	r2, [pc, #56]	; (8000434 <HAL_MspInit+0x5c>)
 80003fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000400:	61d3      	str	r3, [r2, #28]
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <HAL_MspInit+0x5c>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800040e:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <HAL_MspInit+0x60>)
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <HAL_MspInit+0x60>)
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042a:	bf00      	nop
 800042c:	3714      	adds	r7, #20
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	40021000 	.word	0x40021000
 8000438:	40010000 	.word	0x40010000

0800043c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b088      	sub	sp, #32
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	605a      	str	r2, [r3, #4]
 800044e:	609a      	str	r2, [r3, #8]
 8000450:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a1c      	ldr	r2, [pc, #112]	; (80004c8 <HAL_UART_MspInit+0x8c>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d131      	bne.n	80004c0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800045c:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <HAL_UART_MspInit+0x90>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a1a      	ldr	r2, [pc, #104]	; (80004cc <HAL_UART_MspInit+0x90>)
 8000462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <HAL_UART_MspInit+0x90>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000474:	4b15      	ldr	r3, [pc, #84]	; (80004cc <HAL_UART_MspInit+0x90>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a14      	ldr	r2, [pc, #80]	; (80004cc <HAL_UART_MspInit+0x90>)
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <HAL_UART_MspInit+0x90>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0304 	and.w	r3, r3, #4
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800048c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000490:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000492:	2302      	movs	r3, #2
 8000494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000496:	2303      	movs	r3, #3
 8000498:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	4619      	mov	r1, r3
 80004a0:	480b      	ldr	r0, [pc, #44]	; (80004d0 <HAL_UART_MspInit+0x94>)
 80004a2:	f000 fa15 	bl	80008d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	4619      	mov	r1, r3
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <HAL_UART_MspInit+0x94>)
 80004bc:	f000 fa08 	bl	80008d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004c0:	bf00      	nop
 80004c2:	3720      	adds	r7, #32
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40013800 	.word	0x40013800
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010800 	.word	0x40010800

080004d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08c      	sub	sp, #48	; 0x30
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	6879      	ldr	r1, [r7, #4]
 80004e8:	201e      	movs	r0, #30
 80004ea:	f000 f9c6 	bl	800087a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80004ee:	201e      	movs	r0, #30
 80004f0:	f000 f9df 	bl	80008b2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80004f4:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <HAL_InitTick+0xa0>)
 80004f6:	69db      	ldr	r3, [r3, #28]
 80004f8:	4a1e      	ldr	r2, [pc, #120]	; (8000574 <HAL_InitTick+0xa0>)
 80004fa:	f043 0304 	orr.w	r3, r3, #4
 80004fe:	61d3      	str	r3, [r2, #28]
 8000500:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <HAL_InitTick+0xa0>)
 8000502:	69db      	ldr	r3, [r3, #28]
 8000504:	f003 0304 	and.w	r3, r3, #4
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800050c:	f107 0210 	add.w	r2, r7, #16
 8000510:	f107 0314 	add.w	r3, r7, #20
 8000514:	4611      	mov	r1, r2
 8000516:	4618      	mov	r0, r3
 8000518:	f000 ff5e 	bl	80013d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800051c:	f000 ff34 	bl	8001388 <HAL_RCC_GetPCLK1Freq>
 8000520:	4603      	mov	r3, r0
 8000522:	005b      	lsls	r3, r3, #1
 8000524:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000528:	4a13      	ldr	r2, [pc, #76]	; (8000578 <HAL_InitTick+0xa4>)
 800052a:	fba2 2303 	umull	r2, r3, r2, r3
 800052e:	0c9b      	lsrs	r3, r3, #18
 8000530:	3b01      	subs	r3, #1
 8000532:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <HAL_InitTick+0xa8>)
 8000536:	4a12      	ldr	r2, [pc, #72]	; (8000580 <HAL_InitTick+0xac>)
 8000538:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <HAL_InitTick+0xa8>)
 800053c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000540:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000542:	4a0e      	ldr	r2, [pc, #56]	; (800057c <HAL_InitTick+0xa8>)
 8000544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000546:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <HAL_InitTick+0xa8>)
 800054a:	2200      	movs	r2, #0
 800054c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <HAL_InitTick+0xa8>)
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000554:	4809      	ldr	r0, [pc, #36]	; (800057c <HAL_InitTick+0xa8>)
 8000556:	f000 ff8d 	bl	8001474 <HAL_TIM_Base_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d104      	bne.n	800056a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000560:	4806      	ldr	r0, [pc, #24]	; (800057c <HAL_InitTick+0xa8>)
 8000562:	f000 ffdf 	bl	8001524 <HAL_TIM_Base_Start_IT>
 8000566:	4603      	mov	r3, r0
 8000568:	e000      	b.n	800056c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
}
 800056c:	4618      	mov	r0, r3
 800056e:	3730      	adds	r7, #48	; 0x30
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40021000 	.word	0x40021000
 8000578:	431bde83 	.word	0x431bde83
 800057c:	20000108 	.word	0x20000108
 8000580:	40000800 	.word	0x40000800

08000584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <NMI_Handler+0x4>

0800058a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <HardFault_Handler+0x4>

08000590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <MemManage_Handler+0x4>

08000596 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800059a:	e7fe      	b.n	800059a <BusFault_Handler+0x4>

0800059c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <UsageFault_Handler+0x4>

080005a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr

080005ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr

080005c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
	...

080005d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <TIM4_IRQHandler+0x10>)
 80005da:	f001 f803 	bl	80015e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000108 	.word	0x20000108

080005e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f0:	4a14      	ldr	r2, [pc, #80]	; (8000644 <_sbrk+0x5c>)
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <_sbrk+0x60>)
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <_sbrk+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d102      	bne.n	800060a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <_sbrk+0x64>)
 8000606:	4a12      	ldr	r2, [pc, #72]	; (8000650 <_sbrk+0x68>)
 8000608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <_sbrk+0x64>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	429a      	cmp	r2, r3
 8000616:	d207      	bcs.n	8000628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000618:	f001 fbb4 	bl	8001d84 <__errno>
 800061c:	4603      	mov	r3, r0
 800061e:	220c      	movs	r2, #12
 8000620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	e009      	b.n	800063c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <_sbrk+0x64>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <_sbrk+0x64>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	4a05      	ldr	r2, [pc, #20]	; (800064c <_sbrk+0x64>)
 8000638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800063a:	68fb      	ldr	r3, [r7, #12]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3718      	adds	r7, #24
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000c000 	.word	0x2000c000
 8000648:	00000400 	.word	0x00000400
 800064c:	2000008c 	.word	0x2000008c
 8000650:	20000168 	.word	0x20000168

08000654 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000660:	f7ff fff8 	bl	8000654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000664:	480b      	ldr	r0, [pc, #44]	; (8000694 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000666:	490c      	ldr	r1, [pc, #48]	; (8000698 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <LoopFillZerobss+0x16>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800066c:	e002      	b.n	8000674 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000672:	3304      	adds	r3, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000678:	d3f9      	bcc.n	800066e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067a:	4a09      	ldr	r2, [pc, #36]	; (80006a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800067c:	4c09      	ldr	r4, [pc, #36]	; (80006a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000680:	e001      	b.n	8000686 <LoopFillZerobss>

08000682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000684:	3204      	adds	r2, #4

08000686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000688:	d3fb      	bcc.n	8000682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068a:	f001 fb81 	bl	8001d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068e:	f7ff fdc9 	bl	8000224 <main>
  bx lr
 8000692:	4770      	bx	lr
  ldr r0, =_sdata
 8000694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000698:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800069c:	08002720 	.word	0x08002720
  ldr r2, =_sbss
 80006a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006a4:	20000164 	.word	0x20000164

080006a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a8:	e7fe      	b.n	80006a8 <ADC1_2_IRQHandler>
	...

080006ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <HAL_Init+0x28>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <HAL_Init+0x28>)
 80006b6:	f043 0310 	orr.w	r3, r3, #16
 80006ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006bc:	2003      	movs	r0, #3
 80006be:	f000 f8d1 	bl	8000864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006c2:	200f      	movs	r0, #15
 80006c4:	f7ff ff06 	bl	80004d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c8:	f7ff fe86 	bl	80003d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40022000 	.word	0x40022000

080006d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <HAL_IncTick+0x1c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <HAL_IncTick+0x20>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4413      	add	r3, r2
 80006e8:	4a03      	ldr	r2, [pc, #12]	; (80006f8 <HAL_IncTick+0x20>)
 80006ea:	6013      	str	r3, [r2, #0]
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	20000008 	.word	0x20000008
 80006f8:	20000150 	.word	0x20000150

080006fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000700:	4b02      	ldr	r3, [pc, #8]	; (800070c <HAL_GetTick+0x10>)
 8000702:	681b      	ldr	r3, [r3, #0]
}
 8000704:	4618      	mov	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	20000150 	.word	0x20000150

08000710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <__NVIC_SetPriorityGrouping+0x44>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800072c:	4013      	ands	r3, r2
 800072e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800073c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000742:	4a04      	ldr	r2, [pc, #16]	; (8000754 <__NVIC_SetPriorityGrouping+0x44>)
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	60d3      	str	r3, [r2, #12]
}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <__NVIC_GetPriorityGrouping+0x18>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	0a1b      	lsrs	r3, r3, #8
 8000762:	f003 0307 	and.w	r3, r3, #7
}
 8000766:	4618      	mov	r0, r3
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000782:	2b00      	cmp	r3, #0
 8000784:	db0b      	blt.n	800079e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	f003 021f 	and.w	r2, r3, #31
 800078c:	4906      	ldr	r1, [pc, #24]	; (80007a8 <__NVIC_EnableIRQ+0x34>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	095b      	lsrs	r3, r3, #5
 8000794:	2001      	movs	r0, #1
 8000796:	fa00 f202 	lsl.w	r2, r0, r2
 800079a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	e000e100 	.word	0xe000e100

080007ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	6039      	str	r1, [r7, #0]
 80007b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	db0a      	blt.n	80007d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	490c      	ldr	r1, [pc, #48]	; (80007f8 <__NVIC_SetPriority+0x4c>)
 80007c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ca:	0112      	lsls	r2, r2, #4
 80007cc:	b2d2      	uxtb	r2, r2
 80007ce:	440b      	add	r3, r1
 80007d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d4:	e00a      	b.n	80007ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4908      	ldr	r1, [pc, #32]	; (80007fc <__NVIC_SetPriority+0x50>)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	f003 030f 	and.w	r3, r3, #15
 80007e2:	3b04      	subs	r3, #4
 80007e4:	0112      	lsls	r2, r2, #4
 80007e6:	b2d2      	uxtb	r2, r2
 80007e8:	440b      	add	r3, r1
 80007ea:	761a      	strb	r2, [r3, #24]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000e100 	.word	0xe000e100
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000800:	b480      	push	{r7}
 8000802:	b089      	sub	sp, #36	; 0x24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f003 0307 	and.w	r3, r3, #7
 8000812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	f1c3 0307 	rsb	r3, r3, #7
 800081a:	2b04      	cmp	r3, #4
 800081c:	bf28      	it	cs
 800081e:	2304      	movcs	r3, #4
 8000820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3304      	adds	r3, #4
 8000826:	2b06      	cmp	r3, #6
 8000828:	d902      	bls.n	8000830 <NVIC_EncodePriority+0x30>
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	3b03      	subs	r3, #3
 800082e:	e000      	b.n	8000832 <NVIC_EncodePriority+0x32>
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000834:	f04f 32ff 	mov.w	r2, #4294967295
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43da      	mvns	r2, r3
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	401a      	ands	r2, r3
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000848:	f04f 31ff 	mov.w	r1, #4294967295
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	43d9      	mvns	r1, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	4313      	orrs	r3, r2
         );
}
 800085a:	4618      	mov	r0, r3
 800085c:	3724      	adds	r7, #36	; 0x24
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff ff4f 	bl	8000710 <__NVIC_SetPriorityGrouping>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800087a:	b580      	push	{r7, lr}
 800087c:	b086      	sub	sp, #24
 800087e:	af00      	add	r7, sp, #0
 8000880:	4603      	mov	r3, r0
 8000882:	60b9      	str	r1, [r7, #8]
 8000884:	607a      	str	r2, [r7, #4]
 8000886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800088c:	f7ff ff64 	bl	8000758 <__NVIC_GetPriorityGrouping>
 8000890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	68b9      	ldr	r1, [r7, #8]
 8000896:	6978      	ldr	r0, [r7, #20]
 8000898:	f7ff ffb2 	bl	8000800 <NVIC_EncodePriority>
 800089c:	4602      	mov	r2, r0
 800089e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a2:	4611      	mov	r1, r2
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff81 	bl	80007ac <__NVIC_SetPriority>
}
 80008aa:	bf00      	nop
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	4603      	mov	r3, r0
 80008ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff57 	bl	8000774 <__NVIC_EnableIRQ>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b08b      	sub	sp, #44	; 0x2c
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008e2:	e179      	b.n	8000bd8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008e4:	2201      	movs	r2, #1
 80008e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	69fa      	ldr	r2, [r7, #28]
 80008f4:	4013      	ands	r3, r2
 80008f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	f040 8168 	bne.w	8000bd2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	4aa0      	ldr	r2, [pc, #640]	; (8000b88 <HAL_GPIO_Init+0x2b8>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d05e      	beq.n	80009ca <HAL_GPIO_Init+0xfa>
 800090c:	4a9e      	ldr	r2, [pc, #632]	; (8000b88 <HAL_GPIO_Init+0x2b8>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d875      	bhi.n	80009fe <HAL_GPIO_Init+0x12e>
 8000912:	4a9e      	ldr	r2, [pc, #632]	; (8000b8c <HAL_GPIO_Init+0x2bc>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d058      	beq.n	80009ca <HAL_GPIO_Init+0xfa>
 8000918:	4a9c      	ldr	r2, [pc, #624]	; (8000b8c <HAL_GPIO_Init+0x2bc>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d86f      	bhi.n	80009fe <HAL_GPIO_Init+0x12e>
 800091e:	4a9c      	ldr	r2, [pc, #624]	; (8000b90 <HAL_GPIO_Init+0x2c0>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d052      	beq.n	80009ca <HAL_GPIO_Init+0xfa>
 8000924:	4a9a      	ldr	r2, [pc, #616]	; (8000b90 <HAL_GPIO_Init+0x2c0>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d869      	bhi.n	80009fe <HAL_GPIO_Init+0x12e>
 800092a:	4a9a      	ldr	r2, [pc, #616]	; (8000b94 <HAL_GPIO_Init+0x2c4>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d04c      	beq.n	80009ca <HAL_GPIO_Init+0xfa>
 8000930:	4a98      	ldr	r2, [pc, #608]	; (8000b94 <HAL_GPIO_Init+0x2c4>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d863      	bhi.n	80009fe <HAL_GPIO_Init+0x12e>
 8000936:	4a98      	ldr	r2, [pc, #608]	; (8000b98 <HAL_GPIO_Init+0x2c8>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d046      	beq.n	80009ca <HAL_GPIO_Init+0xfa>
 800093c:	4a96      	ldr	r2, [pc, #600]	; (8000b98 <HAL_GPIO_Init+0x2c8>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d85d      	bhi.n	80009fe <HAL_GPIO_Init+0x12e>
 8000942:	2b12      	cmp	r3, #18
 8000944:	d82a      	bhi.n	800099c <HAL_GPIO_Init+0xcc>
 8000946:	2b12      	cmp	r3, #18
 8000948:	d859      	bhi.n	80009fe <HAL_GPIO_Init+0x12e>
 800094a:	a201      	add	r2, pc, #4	; (adr r2, 8000950 <HAL_GPIO_Init+0x80>)
 800094c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000950:	080009cb 	.word	0x080009cb
 8000954:	080009a5 	.word	0x080009a5
 8000958:	080009b7 	.word	0x080009b7
 800095c:	080009f9 	.word	0x080009f9
 8000960:	080009ff 	.word	0x080009ff
 8000964:	080009ff 	.word	0x080009ff
 8000968:	080009ff 	.word	0x080009ff
 800096c:	080009ff 	.word	0x080009ff
 8000970:	080009ff 	.word	0x080009ff
 8000974:	080009ff 	.word	0x080009ff
 8000978:	080009ff 	.word	0x080009ff
 800097c:	080009ff 	.word	0x080009ff
 8000980:	080009ff 	.word	0x080009ff
 8000984:	080009ff 	.word	0x080009ff
 8000988:	080009ff 	.word	0x080009ff
 800098c:	080009ff 	.word	0x080009ff
 8000990:	080009ff 	.word	0x080009ff
 8000994:	080009ad 	.word	0x080009ad
 8000998:	080009c1 	.word	0x080009c1
 800099c:	4a7f      	ldr	r2, [pc, #508]	; (8000b9c <HAL_GPIO_Init+0x2cc>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d013      	beq.n	80009ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009a2:	e02c      	b.n	80009fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	623b      	str	r3, [r7, #32]
          break;
 80009aa:	e029      	b.n	8000a00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	3304      	adds	r3, #4
 80009b2:	623b      	str	r3, [r7, #32]
          break;
 80009b4:	e024      	b.n	8000a00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	3308      	adds	r3, #8
 80009bc:	623b      	str	r3, [r7, #32]
          break;
 80009be:	e01f      	b.n	8000a00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	330c      	adds	r3, #12
 80009c6:	623b      	str	r3, [r7, #32]
          break;
 80009c8:	e01a      	b.n	8000a00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d102      	bne.n	80009d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009d2:	2304      	movs	r3, #4
 80009d4:	623b      	str	r3, [r7, #32]
          break;
 80009d6:	e013      	b.n	8000a00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d105      	bne.n	80009ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009e0:	2308      	movs	r3, #8
 80009e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	69fa      	ldr	r2, [r7, #28]
 80009e8:	611a      	str	r2, [r3, #16]
          break;
 80009ea:	e009      	b.n	8000a00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009ec:	2308      	movs	r3, #8
 80009ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	69fa      	ldr	r2, [r7, #28]
 80009f4:	615a      	str	r2, [r3, #20]
          break;
 80009f6:	e003      	b.n	8000a00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
          break;
 80009fc:	e000      	b.n	8000a00 <HAL_GPIO_Init+0x130>
          break;
 80009fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	2bff      	cmp	r3, #255	; 0xff
 8000a04:	d801      	bhi.n	8000a0a <HAL_GPIO_Init+0x13a>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	e001      	b.n	8000a0e <HAL_GPIO_Init+0x13e>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	2bff      	cmp	r3, #255	; 0xff
 8000a14:	d802      	bhi.n	8000a1c <HAL_GPIO_Init+0x14c>
 8000a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	e002      	b.n	8000a22 <HAL_GPIO_Init+0x152>
 8000a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1e:	3b08      	subs	r3, #8
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	210f      	movs	r1, #15
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a30:	43db      	mvns	r3, r3
 8000a32:	401a      	ands	r2, r3
 8000a34:	6a39      	ldr	r1, [r7, #32]
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	f000 80c1 	beq.w	8000bd2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a50:	4b53      	ldr	r3, [pc, #332]	; (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a52      	ldr	r2, [pc, #328]	; (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b50      	ldr	r3, [pc, #320]	; (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a68:	4a4e      	ldr	r2, [pc, #312]	; (8000ba4 <HAL_GPIO_Init+0x2d4>)
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6c:	089b      	lsrs	r3, r3, #2
 8000a6e:	3302      	adds	r3, #2
 8000a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	f003 0303 	and.w	r3, r3, #3
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	220f      	movs	r2, #15
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a46      	ldr	r2, [pc, #280]	; (8000ba8 <HAL_GPIO_Init+0x2d8>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d01f      	beq.n	8000ad4 <HAL_GPIO_Init+0x204>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a45      	ldr	r2, [pc, #276]	; (8000bac <HAL_GPIO_Init+0x2dc>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d019      	beq.n	8000ad0 <HAL_GPIO_Init+0x200>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a44      	ldr	r2, [pc, #272]	; (8000bb0 <HAL_GPIO_Init+0x2e0>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d013      	beq.n	8000acc <HAL_GPIO_Init+0x1fc>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a43      	ldr	r2, [pc, #268]	; (8000bb4 <HAL_GPIO_Init+0x2e4>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d00d      	beq.n	8000ac8 <HAL_GPIO_Init+0x1f8>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a42      	ldr	r2, [pc, #264]	; (8000bb8 <HAL_GPIO_Init+0x2e8>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d007      	beq.n	8000ac4 <HAL_GPIO_Init+0x1f4>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a41      	ldr	r2, [pc, #260]	; (8000bbc <HAL_GPIO_Init+0x2ec>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d101      	bne.n	8000ac0 <HAL_GPIO_Init+0x1f0>
 8000abc:	2305      	movs	r3, #5
 8000abe:	e00a      	b.n	8000ad6 <HAL_GPIO_Init+0x206>
 8000ac0:	2306      	movs	r3, #6
 8000ac2:	e008      	b.n	8000ad6 <HAL_GPIO_Init+0x206>
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	e006      	b.n	8000ad6 <HAL_GPIO_Init+0x206>
 8000ac8:	2303      	movs	r3, #3
 8000aca:	e004      	b.n	8000ad6 <HAL_GPIO_Init+0x206>
 8000acc:	2302      	movs	r3, #2
 8000ace:	e002      	b.n	8000ad6 <HAL_GPIO_Init+0x206>
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e000      	b.n	8000ad6 <HAL_GPIO_Init+0x206>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ad8:	f002 0203 	and.w	r2, r2, #3
 8000adc:	0092      	lsls	r2, r2, #2
 8000ade:	4093      	lsls	r3, r2
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ae6:	492f      	ldr	r1, [pc, #188]	; (8000ba4 <HAL_GPIO_Init+0x2d4>)
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	089b      	lsrs	r3, r3, #2
 8000aec:	3302      	adds	r3, #2
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d006      	beq.n	8000b0e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b00:	4b2f      	ldr	r3, [pc, #188]	; (8000bc0 <HAL_GPIO_Init+0x2f0>)
 8000b02:	689a      	ldr	r2, [r3, #8]
 8000b04:	492e      	ldr	r1, [pc, #184]	; (8000bc0 <HAL_GPIO_Init+0x2f0>)
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	608b      	str	r3, [r1, #8]
 8000b0c:	e006      	b.n	8000b1c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b0e:	4b2c      	ldr	r3, [pc, #176]	; (8000bc0 <HAL_GPIO_Init+0x2f0>)
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	43db      	mvns	r3, r3
 8000b16:	492a      	ldr	r1, [pc, #168]	; (8000bc0 <HAL_GPIO_Init+0x2f0>)
 8000b18:	4013      	ands	r3, r2
 8000b1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d006      	beq.n	8000b36 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b28:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <HAL_GPIO_Init+0x2f0>)
 8000b2a:	68da      	ldr	r2, [r3, #12]
 8000b2c:	4924      	ldr	r1, [pc, #144]	; (8000bc0 <HAL_GPIO_Init+0x2f0>)
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	60cb      	str	r3, [r1, #12]
 8000b34:	e006      	b.n	8000b44 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b36:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <HAL_GPIO_Init+0x2f0>)
 8000b38:	68da      	ldr	r2, [r3, #12]
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	4920      	ldr	r1, [pc, #128]	; (8000bc0 <HAL_GPIO_Init+0x2f0>)
 8000b40:	4013      	ands	r3, r2
 8000b42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d006      	beq.n	8000b5e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <HAL_GPIO_Init+0x2f0>)
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	491a      	ldr	r1, [pc, #104]	; (8000bc0 <HAL_GPIO_Init+0x2f0>)
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	604b      	str	r3, [r1, #4]
 8000b5c:	e006      	b.n	8000b6c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <HAL_GPIO_Init+0x2f0>)
 8000b60:	685a      	ldr	r2, [r3, #4]
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	4916      	ldr	r1, [pc, #88]	; (8000bc0 <HAL_GPIO_Init+0x2f0>)
 8000b68:	4013      	ands	r3, r2
 8000b6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d025      	beq.n	8000bc4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_GPIO_Init+0x2f0>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4910      	ldr	r1, [pc, #64]	; (8000bc0 <HAL_GPIO_Init+0x2f0>)
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	600b      	str	r3, [r1, #0]
 8000b84:	e025      	b.n	8000bd2 <HAL_GPIO_Init+0x302>
 8000b86:	bf00      	nop
 8000b88:	10320000 	.word	0x10320000
 8000b8c:	10310000 	.word	0x10310000
 8000b90:	10220000 	.word	0x10220000
 8000b94:	10210000 	.word	0x10210000
 8000b98:	10120000 	.word	0x10120000
 8000b9c:	10110000 	.word	0x10110000
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40010000 	.word	0x40010000
 8000ba8:	40010800 	.word	0x40010800
 8000bac:	40010c00 	.word	0x40010c00
 8000bb0:	40011000 	.word	0x40011000
 8000bb4:	40011400 	.word	0x40011400
 8000bb8:	40011800 	.word	0x40011800
 8000bbc:	40011c00 	.word	0x40011c00
 8000bc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_GPIO_Init+0x324>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	4909      	ldr	r1, [pc, #36]	; (8000bf4 <HAL_GPIO_Init+0x324>)
 8000bce:	4013      	ands	r3, r2
 8000bd0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bde:	fa22 f303 	lsr.w	r3, r2, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f47f ae7e 	bne.w	80008e4 <HAL_GPIO_Init+0x14>
  }
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	372c      	adds	r7, #44	; 0x2c
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	40010400 	.word	0x40010400

08000bf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d101      	bne.n	8000c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e26c      	b.n	80010e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f000 8087 	beq.w	8000d26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c18:	4b92      	ldr	r3, [pc, #584]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 030c 	and.w	r3, r3, #12
 8000c20:	2b04      	cmp	r3, #4
 8000c22:	d00c      	beq.n	8000c3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c24:	4b8f      	ldr	r3, [pc, #572]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 030c 	and.w	r3, r3, #12
 8000c2c:	2b08      	cmp	r3, #8
 8000c2e:	d112      	bne.n	8000c56 <HAL_RCC_OscConfig+0x5e>
 8000c30:	4b8c      	ldr	r3, [pc, #560]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c3c:	d10b      	bne.n	8000c56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c3e:	4b89      	ldr	r3, [pc, #548]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d06c      	beq.n	8000d24 <HAL_RCC_OscConfig+0x12c>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d168      	bne.n	8000d24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e246      	b.n	80010e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c5e:	d106      	bne.n	8000c6e <HAL_RCC_OscConfig+0x76>
 8000c60:	4b80      	ldr	r3, [pc, #512]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a7f      	ldr	r2, [pc, #508]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c6a:	6013      	str	r3, [r2, #0]
 8000c6c:	e02e      	b.n	8000ccc <HAL_RCC_OscConfig+0xd4>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10c      	bne.n	8000c90 <HAL_RCC_OscConfig+0x98>
 8000c76:	4b7b      	ldr	r3, [pc, #492]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a7a      	ldr	r2, [pc, #488]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	4b78      	ldr	r3, [pc, #480]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a77      	ldr	r2, [pc, #476]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	e01d      	b.n	8000ccc <HAL_RCC_OscConfig+0xd4>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c98:	d10c      	bne.n	8000cb4 <HAL_RCC_OscConfig+0xbc>
 8000c9a:	4b72      	ldr	r3, [pc, #456]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a71      	ldr	r2, [pc, #452]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca4:	6013      	str	r3, [r2, #0]
 8000ca6:	4b6f      	ldr	r3, [pc, #444]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a6e      	ldr	r2, [pc, #440]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	e00b      	b.n	8000ccc <HAL_RCC_OscConfig+0xd4>
 8000cb4:	4b6b      	ldr	r3, [pc, #428]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a6a      	ldr	r2, [pc, #424]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	4b68      	ldr	r3, [pc, #416]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a67      	ldr	r2, [pc, #412]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d013      	beq.n	8000cfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd4:	f7ff fd12 	bl	80006fc <HAL_GetTick>
 8000cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cda:	e008      	b.n	8000cee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cdc:	f7ff fd0e 	bl	80006fc <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	2b64      	cmp	r3, #100	; 0x64
 8000ce8:	d901      	bls.n	8000cee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cea:	2303      	movs	r3, #3
 8000cec:	e1fa      	b.n	80010e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cee:	4b5d      	ldr	r3, [pc, #372]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d0f0      	beq.n	8000cdc <HAL_RCC_OscConfig+0xe4>
 8000cfa:	e014      	b.n	8000d26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cfc:	f7ff fcfe 	bl	80006fc <HAL_GetTick>
 8000d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d02:	e008      	b.n	8000d16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d04:	f7ff fcfa 	bl	80006fc <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	2b64      	cmp	r3, #100	; 0x64
 8000d10:	d901      	bls.n	8000d16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d12:	2303      	movs	r3, #3
 8000d14:	e1e6      	b.n	80010e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d16:	4b53      	ldr	r3, [pc, #332]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1f0      	bne.n	8000d04 <HAL_RCC_OscConfig+0x10c>
 8000d22:	e000      	b.n	8000d26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d063      	beq.n	8000dfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d32:	4b4c      	ldr	r3, [pc, #304]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 030c 	and.w	r3, r3, #12
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d00b      	beq.n	8000d56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d3e:	4b49      	ldr	r3, [pc, #292]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 030c 	and.w	r3, r3, #12
 8000d46:	2b08      	cmp	r3, #8
 8000d48:	d11c      	bne.n	8000d84 <HAL_RCC_OscConfig+0x18c>
 8000d4a:	4b46      	ldr	r3, [pc, #280]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d116      	bne.n	8000d84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d56:	4b43      	ldr	r3, [pc, #268]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d005      	beq.n	8000d6e <HAL_RCC_OscConfig+0x176>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	691b      	ldr	r3, [r3, #16]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d001      	beq.n	8000d6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e1ba      	b.n	80010e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d6e:	4b3d      	ldr	r3, [pc, #244]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	4939      	ldr	r1, [pc, #228]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d82:	e03a      	b.n	8000dfa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	691b      	ldr	r3, [r3, #16]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d020      	beq.n	8000dce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d8c:	4b36      	ldr	r3, [pc, #216]	; (8000e68 <HAL_RCC_OscConfig+0x270>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d92:	f7ff fcb3 	bl	80006fc <HAL_GetTick>
 8000d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d98:	e008      	b.n	8000dac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d9a:	f7ff fcaf 	bl	80006fc <HAL_GetTick>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d901      	bls.n	8000dac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000da8:	2303      	movs	r3, #3
 8000daa:	e19b      	b.n	80010e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dac:	4b2d      	ldr	r3, [pc, #180]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0f0      	beq.n	8000d9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db8:	4b2a      	ldr	r3, [pc, #168]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	4927      	ldr	r1, [pc, #156]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	600b      	str	r3, [r1, #0]
 8000dcc:	e015      	b.n	8000dfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dce:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <HAL_RCC_OscConfig+0x270>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fc92 	bl	80006fc <HAL_GetTick>
 8000dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dda:	e008      	b.n	8000dee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ddc:	f7ff fc8e 	bl	80006fc <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e17a      	b.n	80010e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1f0      	bne.n	8000ddc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0308 	and.w	r3, r3, #8
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d03a      	beq.n	8000e7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d019      	beq.n	8000e42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_RCC_OscConfig+0x274>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e14:	f7ff fc72 	bl	80006fc <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fc6e 	bl	80006fc <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e15a      	b.n	80010e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f0      	beq.n	8000e1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f000 fafc 	bl	8001438 <RCC_Delay>
 8000e40:	e01c      	b.n	8000e7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_RCC_OscConfig+0x274>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e48:	f7ff fc58 	bl	80006fc <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e4e:	e00f      	b.n	8000e70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e50:	f7ff fc54 	bl	80006fc <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d908      	bls.n	8000e70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e140      	b.n	80010e4 <HAL_RCC_OscConfig+0x4ec>
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000
 8000e68:	42420000 	.word	0x42420000
 8000e6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e70:	4b9e      	ldr	r3, [pc, #632]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1e9      	bne.n	8000e50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80a6 	beq.w	8000fd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e8e:	4b97      	ldr	r3, [pc, #604]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10d      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	4b94      	ldr	r3, [pc, #592]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a93      	ldr	r2, [pc, #588]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	61d3      	str	r3, [r2, #28]
 8000ea6:	4b91      	ldr	r3, [pc, #580]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb6:	4b8e      	ldr	r3, [pc, #568]	; (80010f0 <HAL_RCC_OscConfig+0x4f8>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d118      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ec2:	4b8b      	ldr	r3, [pc, #556]	; (80010f0 <HAL_RCC_OscConfig+0x4f8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a8a      	ldr	r2, [pc, #552]	; (80010f0 <HAL_RCC_OscConfig+0x4f8>)
 8000ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ece:	f7ff fc15 	bl	80006fc <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed4:	e008      	b.n	8000ee8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ed6:	f7ff fc11 	bl	80006fc <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	2b64      	cmp	r3, #100	; 0x64
 8000ee2:	d901      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e0fd      	b.n	80010e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee8:	4b81      	ldr	r3, [pc, #516]	; (80010f0 <HAL_RCC_OscConfig+0x4f8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d0f0      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d106      	bne.n	8000f0a <HAL_RCC_OscConfig+0x312>
 8000efc:	4b7b      	ldr	r3, [pc, #492]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	4a7a      	ldr	r2, [pc, #488]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6213      	str	r3, [r2, #32]
 8000f08:	e02d      	b.n	8000f66 <HAL_RCC_OscConfig+0x36e>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10c      	bne.n	8000f2c <HAL_RCC_OscConfig+0x334>
 8000f12:	4b76      	ldr	r3, [pc, #472]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	4a75      	ldr	r2, [pc, #468]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000f18:	f023 0301 	bic.w	r3, r3, #1
 8000f1c:	6213      	str	r3, [r2, #32]
 8000f1e:	4b73      	ldr	r3, [pc, #460]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	4a72      	ldr	r2, [pc, #456]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000f24:	f023 0304 	bic.w	r3, r3, #4
 8000f28:	6213      	str	r3, [r2, #32]
 8000f2a:	e01c      	b.n	8000f66 <HAL_RCC_OscConfig+0x36e>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	2b05      	cmp	r3, #5
 8000f32:	d10c      	bne.n	8000f4e <HAL_RCC_OscConfig+0x356>
 8000f34:	4b6d      	ldr	r3, [pc, #436]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000f36:	6a1b      	ldr	r3, [r3, #32]
 8000f38:	4a6c      	ldr	r2, [pc, #432]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6213      	str	r3, [r2, #32]
 8000f40:	4b6a      	ldr	r3, [pc, #424]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	4a69      	ldr	r2, [pc, #420]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6213      	str	r3, [r2, #32]
 8000f4c:	e00b      	b.n	8000f66 <HAL_RCC_OscConfig+0x36e>
 8000f4e:	4b67      	ldr	r3, [pc, #412]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000f50:	6a1b      	ldr	r3, [r3, #32]
 8000f52:	4a66      	ldr	r2, [pc, #408]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000f54:	f023 0301 	bic.w	r3, r3, #1
 8000f58:	6213      	str	r3, [r2, #32]
 8000f5a:	4b64      	ldr	r3, [pc, #400]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000f5c:	6a1b      	ldr	r3, [r3, #32]
 8000f5e:	4a63      	ldr	r2, [pc, #396]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000f60:	f023 0304 	bic.w	r3, r3, #4
 8000f64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d015      	beq.n	8000f9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6e:	f7ff fbc5 	bl	80006fc <HAL_GetTick>
 8000f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f74:	e00a      	b.n	8000f8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f76:	f7ff fbc1 	bl	80006fc <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e0ab      	b.n	80010e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f8c:	4b57      	ldr	r3, [pc, #348]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0ee      	beq.n	8000f76 <HAL_RCC_OscConfig+0x37e>
 8000f98:	e014      	b.n	8000fc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f9a:	f7ff fbaf 	bl	80006fc <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa0:	e00a      	b.n	8000fb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fa2:	f7ff fbab 	bl	80006fc <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d901      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e095      	b.n	80010e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fb8:	4b4c      	ldr	r3, [pc, #304]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1ee      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fc4:	7dfb      	ldrb	r3, [r7, #23]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d105      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fca:	4b48      	ldr	r3, [pc, #288]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	4a47      	ldr	r2, [pc, #284]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 8081 	beq.w	80010e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fe0:	4b42      	ldr	r3, [pc, #264]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 030c 	and.w	r3, r3, #12
 8000fe8:	2b08      	cmp	r3, #8
 8000fea:	d061      	beq.n	80010b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d146      	bne.n	8001082 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ff4:	4b3f      	ldr	r3, [pc, #252]	; (80010f4 <HAL_RCC_OscConfig+0x4fc>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffa:	f7ff fb7f 	bl	80006fc <HAL_GetTick>
 8000ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001000:	e008      	b.n	8001014 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001002:	f7ff fb7b 	bl	80006fc <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d901      	bls.n	8001014 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e067      	b.n	80010e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001014:	4b35      	ldr	r3, [pc, #212]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1f0      	bne.n	8001002 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001028:	d108      	bne.n	800103c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800102a:	4b30      	ldr	r3, [pc, #192]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	492d      	ldr	r1, [pc, #180]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8001038:	4313      	orrs	r3, r2
 800103a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800103c:	4b2b      	ldr	r3, [pc, #172]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a19      	ldr	r1, [r3, #32]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104c:	430b      	orrs	r3, r1
 800104e:	4927      	ldr	r1, [pc, #156]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8001050:	4313      	orrs	r3, r2
 8001052:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001054:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <HAL_RCC_OscConfig+0x4fc>)
 8001056:	2201      	movs	r2, #1
 8001058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105a:	f7ff fb4f 	bl	80006fc <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001060:	e008      	b.n	8001074 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001062:	f7ff fb4b 	bl	80006fc <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e037      	b.n	80010e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001074:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f0      	beq.n	8001062 <HAL_RCC_OscConfig+0x46a>
 8001080:	e02f      	b.n	80010e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001082:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <HAL_RCC_OscConfig+0x4fc>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001088:	f7ff fb38 	bl	80006fc <HAL_GetTick>
 800108c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800108e:	e008      	b.n	80010a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001090:	f7ff fb34 	bl	80006fc <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e020      	b.n	80010e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1f0      	bne.n	8001090 <HAL_RCC_OscConfig+0x498>
 80010ae:	e018      	b.n	80010e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69db      	ldr	r3, [r3, #28]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d101      	bne.n	80010bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e013      	b.n	80010e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_RCC_OscConfig+0x4f4>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d106      	bne.n	80010de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010da:	429a      	cmp	r2, r3
 80010dc:	d001      	beq.n	80010e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40007000 	.word	0x40007000
 80010f4:	42420060 	.word	0x42420060

080010f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e0d0      	b.n	80012ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800110c:	4b6a      	ldr	r3, [pc, #424]	; (80012b8 <HAL_RCC_ClockConfig+0x1c0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	429a      	cmp	r2, r3
 8001118:	d910      	bls.n	800113c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800111a:	4b67      	ldr	r3, [pc, #412]	; (80012b8 <HAL_RCC_ClockConfig+0x1c0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f023 0207 	bic.w	r2, r3, #7
 8001122:	4965      	ldr	r1, [pc, #404]	; (80012b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	4313      	orrs	r3, r2
 8001128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800112a:	4b63      	ldr	r3, [pc, #396]	; (80012b8 <HAL_RCC_ClockConfig+0x1c0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d001      	beq.n	800113c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e0b8      	b.n	80012ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d020      	beq.n	800118a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	2b00      	cmp	r3, #0
 8001152:	d005      	beq.n	8001160 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001154:	4b59      	ldr	r3, [pc, #356]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	4a58      	ldr	r2, [pc, #352]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800115e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	2b00      	cmp	r3, #0
 800116a:	d005      	beq.n	8001178 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800116c:	4b53      	ldr	r3, [pc, #332]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	4a52      	ldr	r2, [pc, #328]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 8001172:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001176:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001178:	4b50      	ldr	r3, [pc, #320]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	494d      	ldr	r1, [pc, #308]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 8001186:	4313      	orrs	r3, r2
 8001188:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d040      	beq.n	8001218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d107      	bne.n	80011ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119e:	4b47      	ldr	r3, [pc, #284]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d115      	bne.n	80011d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e07f      	b.n	80012ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d107      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011b6:	4b41      	ldr	r3, [pc, #260]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d109      	bne.n	80011d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e073      	b.n	80012ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c6:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e06b      	b.n	80012ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011d6:	4b39      	ldr	r3, [pc, #228]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f023 0203 	bic.w	r2, r3, #3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	4936      	ldr	r1, [pc, #216]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011e8:	f7ff fa88 	bl	80006fc <HAL_GetTick>
 80011ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ee:	e00a      	b.n	8001206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011f0:	f7ff fa84 	bl	80006fc <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80011fe:	4293      	cmp	r3, r2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e053      	b.n	80012ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 020c 	and.w	r2, r3, #12
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	429a      	cmp	r2, r3
 8001216:	d1eb      	bne.n	80011f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001218:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <HAL_RCC_ClockConfig+0x1c0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d210      	bcs.n	8001248 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001226:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 0207 	bic.w	r2, r3, #7
 800122e:	4922      	ldr	r1, [pc, #136]	; (80012b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	4313      	orrs	r3, r2
 8001234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d001      	beq.n	8001248 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e032      	b.n	80012ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	2b00      	cmp	r3, #0
 8001252:	d008      	beq.n	8001266 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	4916      	ldr	r1, [pc, #88]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	4313      	orrs	r3, r2
 8001264:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	2b00      	cmp	r3, #0
 8001270:	d009      	beq.n	8001286 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	490e      	ldr	r1, [pc, #56]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 8001282:	4313      	orrs	r3, r2
 8001284:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001286:	f000 f821 	bl	80012cc <HAL_RCC_GetSysClockFreq>
 800128a:	4602      	mov	r2, r0
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	490a      	ldr	r1, [pc, #40]	; (80012c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001298:	5ccb      	ldrb	r3, [r1, r3]
 800129a:	fa22 f303 	lsr.w	r3, r2, r3
 800129e:	4a09      	ldr	r2, [pc, #36]	; (80012c4 <HAL_RCC_ClockConfig+0x1cc>)
 80012a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <HAL_RCC_ClockConfig+0x1d0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f914 	bl	80004d4 <HAL_InitTick>

  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40022000 	.word	0x40022000
 80012bc:	40021000 	.word	0x40021000
 80012c0:	080026b8 	.word	0x080026b8
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000004 	.word	0x20000004

080012cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <HAL_RCC_GetSysClockFreq+0x94>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	d002      	beq.n	80012fc <HAL_RCC_GetSysClockFreq+0x30>
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d003      	beq.n	8001302 <HAL_RCC_GetSysClockFreq+0x36>
 80012fa:	e027      	b.n	800134c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012fc:	4b19      	ldr	r3, [pc, #100]	; (8001364 <HAL_RCC_GetSysClockFreq+0x98>)
 80012fe:	613b      	str	r3, [r7, #16]
      break;
 8001300:	e027      	b.n	8001352 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	0c9b      	lsrs	r3, r3, #18
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	4a17      	ldr	r2, [pc, #92]	; (8001368 <HAL_RCC_GetSysClockFreq+0x9c>)
 800130c:	5cd3      	ldrb	r3, [r2, r3]
 800130e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d010      	beq.n	800133c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_RCC_GetSysClockFreq+0x94>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	0c5b      	lsrs	r3, r3, #17
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	4a11      	ldr	r2, [pc, #68]	; (800136c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001326:	5cd3      	ldrb	r3, [r2, r3]
 8001328:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <HAL_RCC_GetSysClockFreq+0x98>)
 800132e:	fb02 f203 	mul.w	r2, r2, r3
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	fbb2 f3f3 	udiv	r3, r2, r3
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	e004      	b.n	8001346 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a0c      	ldr	r2, [pc, #48]	; (8001370 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001340:	fb02 f303 	mul.w	r3, r2, r3
 8001344:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	613b      	str	r3, [r7, #16]
      break;
 800134a:	e002      	b.n	8001352 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <HAL_RCC_GetSysClockFreq+0x98>)
 800134e:	613b      	str	r3, [r7, #16]
      break;
 8001350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001352:	693b      	ldr	r3, [r7, #16]
}
 8001354:	4618      	mov	r0, r3
 8001356:	371c      	adds	r7, #28
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000
 8001364:	007a1200 	.word	0x007a1200
 8001368:	080026d0 	.word	0x080026d0
 800136c:	080026e0 	.word	0x080026e0
 8001370:	003d0900 	.word	0x003d0900

08001374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001378:	4b02      	ldr	r3, [pc, #8]	; (8001384 <HAL_RCC_GetHCLKFreq+0x10>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	20000000 	.word	0x20000000

08001388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800138c:	f7ff fff2 	bl	8001374 <HAL_RCC_GetHCLKFreq>
 8001390:	4602      	mov	r2, r0
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	0a1b      	lsrs	r3, r3, #8
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	4903      	ldr	r1, [pc, #12]	; (80013ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800139e:	5ccb      	ldrb	r3, [r1, r3]
 80013a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000
 80013ac:	080026c8 	.word	0x080026c8

080013b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013b4:	f7ff ffde 	bl	8001374 <HAL_RCC_GetHCLKFreq>
 80013b8:	4602      	mov	r2, r0
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	0adb      	lsrs	r3, r3, #11
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	4903      	ldr	r1, [pc, #12]	; (80013d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013c6:	5ccb      	ldrb	r3, [r1, r3]
 80013c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40021000 	.word	0x40021000
 80013d4:	080026c8 	.word	0x080026c8

080013d8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	220f      	movs	r2, #15
 80013e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <HAL_RCC_GetClockConfig+0x58>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0203 	and.w	r2, r3, #3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <HAL_RCC_GetClockConfig+0x58>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_RCC_GetClockConfig+0x58>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_RCC_GetClockConfig+0x58>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	08db      	lsrs	r3, r3, #3
 8001412:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_RCC_GetClockConfig+0x5c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0207 	and.w	r2, r3, #7
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	40021000 	.word	0x40021000
 8001434:	40022000 	.word	0x40022000

08001438 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <RCC_Delay+0x34>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <RCC_Delay+0x38>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	0a5b      	lsrs	r3, r3, #9
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001454:	bf00      	nop
  }
  while (Delay --);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	60fa      	str	r2, [r7, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f9      	bne.n	8001454 <RCC_Delay+0x1c>
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	20000000 	.word	0x20000000
 8001470:	10624dd3 	.word	0x10624dd3

08001474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e041      	b.n	800150a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d106      	bne.n	80014a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f839 	bl	8001512 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2202      	movs	r2, #2
 80014a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3304      	adds	r3, #4
 80014b0:	4619      	mov	r1, r3
 80014b2:	4610      	mov	r0, r2
 80014b4:	f000 f9aa 	bl	800180c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b01      	cmp	r3, #1
 8001536:	d001      	beq.n	800153c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e044      	b.n	80015c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2202      	movs	r2, #2
 8001540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0201 	orr.w	r2, r2, #1
 8001552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <HAL_TIM_Base_Start_IT+0xac>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d018      	beq.n	8001590 <HAL_TIM_Base_Start_IT+0x6c>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a1c      	ldr	r2, [pc, #112]	; (80015d4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d013      	beq.n	8001590 <HAL_TIM_Base_Start_IT+0x6c>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001570:	d00e      	beq.n	8001590 <HAL_TIM_Base_Start_IT+0x6c>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a18      	ldr	r2, [pc, #96]	; (80015d8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d009      	beq.n	8001590 <HAL_TIM_Base_Start_IT+0x6c>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a16      	ldr	r2, [pc, #88]	; (80015dc <HAL_TIM_Base_Start_IT+0xb8>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d004      	beq.n	8001590 <HAL_TIM_Base_Start_IT+0x6c>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a15      	ldr	r2, [pc, #84]	; (80015e0 <HAL_TIM_Base_Start_IT+0xbc>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d111      	bne.n	80015b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d010      	beq.n	80015c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f042 0201 	orr.w	r2, r2, #1
 80015b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015b2:	e007      	b.n	80015c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0201 	orr.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	40012c00 	.word	0x40012c00
 80015d4:	40013400 	.word	0x40013400
 80015d8:	40000400 	.word	0x40000400
 80015dc:	40000800 	.word	0x40000800
 80015e0:	40000c00 	.word	0x40000c00

080015e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d020      	beq.n	8001648 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d01b      	beq.n	8001648 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f06f 0202 	mvn.w	r2, #2
 8001618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f8d1 	bl	80017d6 <HAL_TIM_IC_CaptureCallback>
 8001634:	e005      	b.n	8001642 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f8c4 	bl	80017c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f8d3 	bl	80017e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	2b00      	cmp	r3, #0
 8001650:	d020      	beq.n	8001694 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	d01b      	beq.n	8001694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f06f 0204 	mvn.w	r2, #4
 8001664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2202      	movs	r2, #2
 800166a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f8ab 	bl	80017d6 <HAL_TIM_IC_CaptureCallback>
 8001680:	e005      	b.n	800168e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f89e 	bl	80017c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f8ad 	bl	80017e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d020      	beq.n	80016e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d01b      	beq.n	80016e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f06f 0208 	mvn.w	r2, #8
 80016b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2204      	movs	r2, #4
 80016b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f885 	bl	80017d6 <HAL_TIM_IC_CaptureCallback>
 80016cc:	e005      	b.n	80016da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f878 	bl	80017c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f887 	bl	80017e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d020      	beq.n	800172c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d01b      	beq.n	800172c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f06f 0210 	mvn.w	r2, #16
 80016fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2208      	movs	r2, #8
 8001702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f85f 	bl	80017d6 <HAL_TIM_IC_CaptureCallback>
 8001718:	e005      	b.n	8001726 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f852 	bl	80017c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 f861 	bl	80017e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00c      	beq.n	8001750 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d007      	beq.n	8001750 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f06f 0201 	mvn.w	r2, #1
 8001748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7fe fe0c 	bl	8000368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00c      	beq.n	8001774 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001760:	2b00      	cmp	r3, #0
 8001762:	d007      	beq.n	8001774 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800176c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f8db 	bl	800192a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00c      	beq.n	8001798 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001784:	2b00      	cmp	r3, #0
 8001786:	d007      	beq.n	8001798 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f831 	bl	80017fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	f003 0320 	and.w	r3, r3, #32
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00c      	beq.n	80017bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f003 0320 	and.w	r3, r3, #32
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d007      	beq.n	80017bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f06f 0220 	mvn.w	r2, #32
 80017b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f8ae 	bl	8001918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr

080017d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr

080017fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr

0800180c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a39      	ldr	r2, [pc, #228]	; (8001904 <TIM_Base_SetConfig+0xf8>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d013      	beq.n	800184c <TIM_Base_SetConfig+0x40>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a38      	ldr	r2, [pc, #224]	; (8001908 <TIM_Base_SetConfig+0xfc>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d00f      	beq.n	800184c <TIM_Base_SetConfig+0x40>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001832:	d00b      	beq.n	800184c <TIM_Base_SetConfig+0x40>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a35      	ldr	r2, [pc, #212]	; (800190c <TIM_Base_SetConfig+0x100>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d007      	beq.n	800184c <TIM_Base_SetConfig+0x40>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a34      	ldr	r2, [pc, #208]	; (8001910 <TIM_Base_SetConfig+0x104>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d003      	beq.n	800184c <TIM_Base_SetConfig+0x40>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a33      	ldr	r2, [pc, #204]	; (8001914 <TIM_Base_SetConfig+0x108>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d108      	bne.n	800185e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	4313      	orrs	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a28      	ldr	r2, [pc, #160]	; (8001904 <TIM_Base_SetConfig+0xf8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d013      	beq.n	800188e <TIM_Base_SetConfig+0x82>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a27      	ldr	r2, [pc, #156]	; (8001908 <TIM_Base_SetConfig+0xfc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00f      	beq.n	800188e <TIM_Base_SetConfig+0x82>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001874:	d00b      	beq.n	800188e <TIM_Base_SetConfig+0x82>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a24      	ldr	r2, [pc, #144]	; (800190c <TIM_Base_SetConfig+0x100>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d007      	beq.n	800188e <TIM_Base_SetConfig+0x82>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a23      	ldr	r2, [pc, #140]	; (8001910 <TIM_Base_SetConfig+0x104>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d003      	beq.n	800188e <TIM_Base_SetConfig+0x82>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a22      	ldr	r2, [pc, #136]	; (8001914 <TIM_Base_SetConfig+0x108>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d108      	bne.n	80018a0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	4313      	orrs	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a0f      	ldr	r2, [pc, #60]	; (8001904 <TIM_Base_SetConfig+0xf8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d003      	beq.n	80018d4 <TIM_Base_SetConfig+0xc8>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <TIM_Base_SetConfig+0xfc>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d103      	bne.n	80018dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	691a      	ldr	r2, [r3, #16]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d005      	beq.n	80018fa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	f023 0201 	bic.w	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	611a      	str	r2, [r3, #16]
  }
}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	40012c00 	.word	0x40012c00
 8001908:	40013400 	.word	0x40013400
 800190c:	40000400 	.word	0x40000400
 8001910:	40000800 	.word	0x40000800
 8001914:	40000c00 	.word	0x40000c00

08001918 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e042      	b.n	80019d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d106      	bne.n	8001968 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7fe fd6a 	bl	800043c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2224      	movs	r2, #36	; 0x24
 800196c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800197e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f971 	bl	8001c68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001994:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	695a      	ldr	r2, [r3, #20]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2220      	movs	r2, #32
 80019c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2220      	movs	r2, #32
 80019c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af02      	add	r7, sp, #8
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	4613      	mov	r3, r2
 80019ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b20      	cmp	r3, #32
 80019fa:	d175      	bne.n	8001ae8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <HAL_UART_Transmit+0x2c>
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e06e      	b.n	8001aea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2221      	movs	r2, #33	; 0x21
 8001a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a1a:	f7fe fe6f 	bl	80006fc <HAL_GetTick>
 8001a1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	88fa      	ldrh	r2, [r7, #6]
 8001a24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	88fa      	ldrh	r2, [r7, #6]
 8001a2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a34:	d108      	bne.n	8001a48 <HAL_UART_Transmit+0x6c>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d104      	bne.n	8001a48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	e003      	b.n	8001a50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001a50:	e02e      	b.n	8001ab0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2180      	movs	r1, #128	; 0x80
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 f848 	bl	8001af2 <UART_WaitOnFlagUntilTimeout>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e03a      	b.n	8001aea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10b      	bne.n	8001a92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	61bb      	str	r3, [r7, #24]
 8001a90:	e007      	b.n	8001aa2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	781a      	ldrb	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1cb      	bne.n	8001a52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2140      	movs	r1, #64	; 0x40
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 f814 	bl	8001af2 <UART_WaitOnFlagUntilTimeout>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e006      	b.n	8001aea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2220      	movs	r2, #32
 8001ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e000      	b.n	8001aea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001ae8:	2302      	movs	r3, #2
  }
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	4613      	mov	r3, r2
 8001b00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b02:	e03b      	b.n	8001b7c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0a:	d037      	beq.n	8001b7c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b0c:	f7fe fdf6 	bl	80006fc <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	6a3a      	ldr	r2, [r7, #32]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d302      	bcc.n	8001b22 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e03a      	b.n	8001b9c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d023      	beq.n	8001b7c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2b80      	cmp	r3, #128	; 0x80
 8001b38:	d020      	beq.n	8001b7c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b40      	cmp	r3, #64	; 0x40
 8001b3e:	d01d      	beq.n	8001b7c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d116      	bne.n	8001b7c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 f81d 	bl	8001ba4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2208      	movs	r2, #8
 8001b6e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e00f      	b.n	8001b9c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	4013      	ands	r3, r2
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	bf0c      	ite	eq
 8001b8c:	2301      	moveq	r3, #1
 8001b8e:	2300      	movne	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	461a      	mov	r2, r3
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d0b4      	beq.n	8001b04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b095      	sub	sp, #84	; 0x54
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	330c      	adds	r3, #12
 8001bb2:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb6:	e853 3f00 	ldrex	r3, [r3]
 8001bba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	330c      	adds	r3, #12
 8001bca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bcc:	643a      	str	r2, [r7, #64]	; 0x40
 8001bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001bd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001bd4:	e841 2300 	strex	r3, r2, [r1]
 8001bd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1e5      	bne.n	8001bac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	3314      	adds	r3, #20
 8001be6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	e853 3f00 	ldrex	r3, [r3]
 8001bee:	61fb      	str	r3, [r7, #28]
   return(result);
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f023 0301 	bic.w	r3, r3, #1
 8001bf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	3314      	adds	r3, #20
 8001bfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c08:	e841 2300 	strex	r3, r2, [r1]
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e5      	bne.n	8001be0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d119      	bne.n	8001c50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	330c      	adds	r3, #12
 8001c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	e853 3f00 	ldrex	r3, [r3]
 8001c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f023 0310 	bic.w	r3, r3, #16
 8001c32:	647b      	str	r3, [r7, #68]	; 0x44
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	330c      	adds	r3, #12
 8001c3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c3c:	61ba      	str	r2, [r7, #24]
 8001c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c40:	6979      	ldr	r1, [r7, #20]
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	e841 2300 	strex	r3, r2, [r1]
 8001c48:	613b      	str	r3, [r7, #16]
   return(result);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1e5      	bne.n	8001c1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2220      	movs	r2, #32
 8001c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001c5e:	bf00      	nop
 8001c60:	3754      	adds	r7, #84	; 0x54
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001ca2:	f023 030c 	bic.w	r3, r3, #12
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	68b9      	ldr	r1, [r7, #8]
 8001cac:	430b      	orrs	r3, r1
 8001cae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699a      	ldr	r2, [r3, #24]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a2c      	ldr	r2, [pc, #176]	; (8001d7c <UART_SetConfig+0x114>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d103      	bne.n	8001cd8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001cd0:	f7ff fb6e 	bl	80013b0 <HAL_RCC_GetPCLK2Freq>
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	e002      	b.n	8001cde <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001cd8:	f7ff fb56 	bl	8001388 <HAL_RCC_GetPCLK1Freq>
 8001cdc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009a      	lsls	r2, r3, #2
 8001ce8:	441a      	add	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	4a22      	ldr	r2, [pc, #136]	; (8001d80 <UART_SetConfig+0x118>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	095b      	lsrs	r3, r3, #5
 8001cfc:	0119      	lsls	r1, r3, #4
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	009a      	lsls	r2, r3, #2
 8001d08:	441a      	add	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d14:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <UART_SetConfig+0x118>)
 8001d16:	fba3 0302 	umull	r0, r3, r3, r2
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2064      	movs	r0, #100	; 0x64
 8001d1e:	fb00 f303 	mul.w	r3, r0, r3
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	3332      	adds	r3, #50	; 0x32
 8001d28:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <UART_SetConfig+0x118>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d34:	4419      	add	r1, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009a      	lsls	r2, r3, #2
 8001d40:	441a      	add	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <UART_SetConfig+0x118>)
 8001d4e:	fba3 0302 	umull	r0, r3, r3, r2
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2064      	movs	r0, #100	; 0x64
 8001d56:	fb00 f303 	mul.w	r3, r0, r3
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	3332      	adds	r3, #50	; 0x32
 8001d60:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <UART_SetConfig+0x118>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	f003 020f 	and.w	r2, r3, #15
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	440a      	add	r2, r1
 8001d72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40013800 	.word	0x40013800
 8001d80:	51eb851f 	.word	0x51eb851f

08001d84 <__errno>:
 8001d84:	4b01      	ldr	r3, [pc, #4]	; (8001d8c <__errno+0x8>)
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	2000000c 	.word	0x2000000c

08001d90 <__libc_init_array>:
 8001d90:	b570      	push	{r4, r5, r6, lr}
 8001d92:	2600      	movs	r6, #0
 8001d94:	4d0c      	ldr	r5, [pc, #48]	; (8001dc8 <__libc_init_array+0x38>)
 8001d96:	4c0d      	ldr	r4, [pc, #52]	; (8001dcc <__libc_init_array+0x3c>)
 8001d98:	1b64      	subs	r4, r4, r5
 8001d9a:	10a4      	asrs	r4, r4, #2
 8001d9c:	42a6      	cmp	r6, r4
 8001d9e:	d109      	bne.n	8001db4 <__libc_init_array+0x24>
 8001da0:	f000 fc76 	bl	8002690 <_init>
 8001da4:	2600      	movs	r6, #0
 8001da6:	4d0a      	ldr	r5, [pc, #40]	; (8001dd0 <__libc_init_array+0x40>)
 8001da8:	4c0a      	ldr	r4, [pc, #40]	; (8001dd4 <__libc_init_array+0x44>)
 8001daa:	1b64      	subs	r4, r4, r5
 8001dac:	10a4      	asrs	r4, r4, #2
 8001dae:	42a6      	cmp	r6, r4
 8001db0:	d105      	bne.n	8001dbe <__libc_init_array+0x2e>
 8001db2:	bd70      	pop	{r4, r5, r6, pc}
 8001db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001db8:	4798      	blx	r3
 8001dba:	3601      	adds	r6, #1
 8001dbc:	e7ee      	b.n	8001d9c <__libc_init_array+0xc>
 8001dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dc2:	4798      	blx	r3
 8001dc4:	3601      	adds	r6, #1
 8001dc6:	e7f2      	b.n	8001dae <__libc_init_array+0x1e>
 8001dc8:	08002718 	.word	0x08002718
 8001dcc:	08002718 	.word	0x08002718
 8001dd0:	08002718 	.word	0x08002718
 8001dd4:	0800271c 	.word	0x0800271c

08001dd8 <memset>:
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4402      	add	r2, r0
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d100      	bne.n	8001de2 <memset+0xa>
 8001de0:	4770      	bx	lr
 8001de2:	f803 1b01 	strb.w	r1, [r3], #1
 8001de6:	e7f9      	b.n	8001ddc <memset+0x4>

08001de8 <_vsniprintf_r>:
 8001de8:	b530      	push	{r4, r5, lr}
 8001dea:	1e14      	subs	r4, r2, #0
 8001dec:	4605      	mov	r5, r0
 8001dee:	b09b      	sub	sp, #108	; 0x6c
 8001df0:	4618      	mov	r0, r3
 8001df2:	da05      	bge.n	8001e00 <_vsniprintf_r+0x18>
 8001df4:	238b      	movs	r3, #139	; 0x8b
 8001df6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfa:	602b      	str	r3, [r5, #0]
 8001dfc:	b01b      	add	sp, #108	; 0x6c
 8001dfe:	bd30      	pop	{r4, r5, pc}
 8001e00:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001e04:	f8ad 300c 	strh.w	r3, [sp, #12]
 8001e08:	bf0c      	ite	eq
 8001e0a:	4623      	moveq	r3, r4
 8001e0c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001e10:	9302      	str	r3, [sp, #8]
 8001e12:	9305      	str	r3, [sp, #20]
 8001e14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e18:	4602      	mov	r2, r0
 8001e1a:	9100      	str	r1, [sp, #0]
 8001e1c:	9104      	str	r1, [sp, #16]
 8001e1e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8001e22:	4669      	mov	r1, sp
 8001e24:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001e26:	4628      	mov	r0, r5
 8001e28:	f000 f874 	bl	8001f14 <_svfiprintf_r>
 8001e2c:	1c43      	adds	r3, r0, #1
 8001e2e:	bfbc      	itt	lt
 8001e30:	238b      	movlt	r3, #139	; 0x8b
 8001e32:	602b      	strlt	r3, [r5, #0]
 8001e34:	2c00      	cmp	r4, #0
 8001e36:	d0e1      	beq.n	8001dfc <_vsniprintf_r+0x14>
 8001e38:	2200      	movs	r2, #0
 8001e3a:	9b00      	ldr	r3, [sp, #0]
 8001e3c:	701a      	strb	r2, [r3, #0]
 8001e3e:	e7dd      	b.n	8001dfc <_vsniprintf_r+0x14>

08001e40 <vsniprintf>:
 8001e40:	b507      	push	{r0, r1, r2, lr}
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	4613      	mov	r3, r2
 8001e46:	460a      	mov	r2, r1
 8001e48:	4601      	mov	r1, r0
 8001e4a:	4803      	ldr	r0, [pc, #12]	; (8001e58 <vsniprintf+0x18>)
 8001e4c:	6800      	ldr	r0, [r0, #0]
 8001e4e:	f7ff ffcb 	bl	8001de8 <_vsniprintf_r>
 8001e52:	b003      	add	sp, #12
 8001e54:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e58:	2000000c 	.word	0x2000000c

08001e5c <__ssputs_r>:
 8001e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e60:	688e      	ldr	r6, [r1, #8]
 8001e62:	4682      	mov	sl, r0
 8001e64:	429e      	cmp	r6, r3
 8001e66:	460c      	mov	r4, r1
 8001e68:	4690      	mov	r8, r2
 8001e6a:	461f      	mov	r7, r3
 8001e6c:	d838      	bhi.n	8001ee0 <__ssputs_r+0x84>
 8001e6e:	898a      	ldrh	r2, [r1, #12]
 8001e70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001e74:	d032      	beq.n	8001edc <__ssputs_r+0x80>
 8001e76:	6825      	ldr	r5, [r4, #0]
 8001e78:	6909      	ldr	r1, [r1, #16]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	eba5 0901 	sub.w	r9, r5, r1
 8001e80:	6965      	ldr	r5, [r4, #20]
 8001e82:	444b      	add	r3, r9
 8001e84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001e8c:	106d      	asrs	r5, r5, #1
 8001e8e:	429d      	cmp	r5, r3
 8001e90:	bf38      	it	cc
 8001e92:	461d      	movcc	r5, r3
 8001e94:	0553      	lsls	r3, r2, #21
 8001e96:	d531      	bpl.n	8001efc <__ssputs_r+0xa0>
 8001e98:	4629      	mov	r1, r5
 8001e9a:	f000 fb53 	bl	8002544 <_malloc_r>
 8001e9e:	4606      	mov	r6, r0
 8001ea0:	b950      	cbnz	r0, 8001eb8 <__ssputs_r+0x5c>
 8001ea2:	230c      	movs	r3, #12
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f8ca 3000 	str.w	r3, [sl]
 8001eac:	89a3      	ldrh	r3, [r4, #12]
 8001eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eb2:	81a3      	strh	r3, [r4, #12]
 8001eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001eb8:	464a      	mov	r2, r9
 8001eba:	6921      	ldr	r1, [r4, #16]
 8001ebc:	f000 face 	bl	800245c <memcpy>
 8001ec0:	89a3      	ldrh	r3, [r4, #12]
 8001ec2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eca:	81a3      	strh	r3, [r4, #12]
 8001ecc:	6126      	str	r6, [r4, #16]
 8001ece:	444e      	add	r6, r9
 8001ed0:	6026      	str	r6, [r4, #0]
 8001ed2:	463e      	mov	r6, r7
 8001ed4:	6165      	str	r5, [r4, #20]
 8001ed6:	eba5 0509 	sub.w	r5, r5, r9
 8001eda:	60a5      	str	r5, [r4, #8]
 8001edc:	42be      	cmp	r6, r7
 8001ede:	d900      	bls.n	8001ee2 <__ssputs_r+0x86>
 8001ee0:	463e      	mov	r6, r7
 8001ee2:	4632      	mov	r2, r6
 8001ee4:	4641      	mov	r1, r8
 8001ee6:	6820      	ldr	r0, [r4, #0]
 8001ee8:	f000 fac6 	bl	8002478 <memmove>
 8001eec:	68a3      	ldr	r3, [r4, #8]
 8001eee:	6822      	ldr	r2, [r4, #0]
 8001ef0:	1b9b      	subs	r3, r3, r6
 8001ef2:	4432      	add	r2, r6
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	60a3      	str	r3, [r4, #8]
 8001ef8:	6022      	str	r2, [r4, #0]
 8001efa:	e7db      	b.n	8001eb4 <__ssputs_r+0x58>
 8001efc:	462a      	mov	r2, r5
 8001efe:	f000 fb7b 	bl	80025f8 <_realloc_r>
 8001f02:	4606      	mov	r6, r0
 8001f04:	2800      	cmp	r0, #0
 8001f06:	d1e1      	bne.n	8001ecc <__ssputs_r+0x70>
 8001f08:	4650      	mov	r0, sl
 8001f0a:	6921      	ldr	r1, [r4, #16]
 8001f0c:	f000 face 	bl	80024ac <_free_r>
 8001f10:	e7c7      	b.n	8001ea2 <__ssputs_r+0x46>
	...

08001f14 <_svfiprintf_r>:
 8001f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f18:	4698      	mov	r8, r3
 8001f1a:	898b      	ldrh	r3, [r1, #12]
 8001f1c:	4607      	mov	r7, r0
 8001f1e:	061b      	lsls	r3, r3, #24
 8001f20:	460d      	mov	r5, r1
 8001f22:	4614      	mov	r4, r2
 8001f24:	b09d      	sub	sp, #116	; 0x74
 8001f26:	d50e      	bpl.n	8001f46 <_svfiprintf_r+0x32>
 8001f28:	690b      	ldr	r3, [r1, #16]
 8001f2a:	b963      	cbnz	r3, 8001f46 <_svfiprintf_r+0x32>
 8001f2c:	2140      	movs	r1, #64	; 0x40
 8001f2e:	f000 fb09 	bl	8002544 <_malloc_r>
 8001f32:	6028      	str	r0, [r5, #0]
 8001f34:	6128      	str	r0, [r5, #16]
 8001f36:	b920      	cbnz	r0, 8001f42 <_svfiprintf_r+0x2e>
 8001f38:	230c      	movs	r3, #12
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f40:	e0d1      	b.n	80020e6 <_svfiprintf_r+0x1d2>
 8001f42:	2340      	movs	r3, #64	; 0x40
 8001f44:	616b      	str	r3, [r5, #20]
 8001f46:	2300      	movs	r3, #0
 8001f48:	9309      	str	r3, [sp, #36]	; 0x24
 8001f4a:	2320      	movs	r3, #32
 8001f4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f50:	2330      	movs	r3, #48	; 0x30
 8001f52:	f04f 0901 	mov.w	r9, #1
 8001f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002100 <_svfiprintf_r+0x1ec>
 8001f5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f62:	4623      	mov	r3, r4
 8001f64:	469a      	mov	sl, r3
 8001f66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f6a:	b10a      	cbz	r2, 8001f70 <_svfiprintf_r+0x5c>
 8001f6c:	2a25      	cmp	r2, #37	; 0x25
 8001f6e:	d1f9      	bne.n	8001f64 <_svfiprintf_r+0x50>
 8001f70:	ebba 0b04 	subs.w	fp, sl, r4
 8001f74:	d00b      	beq.n	8001f8e <_svfiprintf_r+0x7a>
 8001f76:	465b      	mov	r3, fp
 8001f78:	4622      	mov	r2, r4
 8001f7a:	4629      	mov	r1, r5
 8001f7c:	4638      	mov	r0, r7
 8001f7e:	f7ff ff6d 	bl	8001e5c <__ssputs_r>
 8001f82:	3001      	adds	r0, #1
 8001f84:	f000 80aa 	beq.w	80020dc <_svfiprintf_r+0x1c8>
 8001f88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f8a:	445a      	add	r2, fp
 8001f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8001f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 80a2 	beq.w	80020dc <_svfiprintf_r+0x1c8>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001fa2:	f10a 0a01 	add.w	sl, sl, #1
 8001fa6:	9304      	str	r3, [sp, #16]
 8001fa8:	9307      	str	r3, [sp, #28]
 8001faa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fae:	931a      	str	r3, [sp, #104]	; 0x68
 8001fb0:	4654      	mov	r4, sl
 8001fb2:	2205      	movs	r2, #5
 8001fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fb8:	4851      	ldr	r0, [pc, #324]	; (8002100 <_svfiprintf_r+0x1ec>)
 8001fba:	f000 fa41 	bl	8002440 <memchr>
 8001fbe:	9a04      	ldr	r2, [sp, #16]
 8001fc0:	b9d8      	cbnz	r0, 8001ffa <_svfiprintf_r+0xe6>
 8001fc2:	06d0      	lsls	r0, r2, #27
 8001fc4:	bf44      	itt	mi
 8001fc6:	2320      	movmi	r3, #32
 8001fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001fcc:	0711      	lsls	r1, r2, #28
 8001fce:	bf44      	itt	mi
 8001fd0:	232b      	movmi	r3, #43	; 0x2b
 8001fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8001fda:	2b2a      	cmp	r3, #42	; 0x2a
 8001fdc:	d015      	beq.n	800200a <_svfiprintf_r+0xf6>
 8001fde:	4654      	mov	r4, sl
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f04f 0c0a 	mov.w	ip, #10
 8001fe6:	9a07      	ldr	r2, [sp, #28]
 8001fe8:	4621      	mov	r1, r4
 8001fea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fee:	3b30      	subs	r3, #48	; 0x30
 8001ff0:	2b09      	cmp	r3, #9
 8001ff2:	d94e      	bls.n	8002092 <_svfiprintf_r+0x17e>
 8001ff4:	b1b0      	cbz	r0, 8002024 <_svfiprintf_r+0x110>
 8001ff6:	9207      	str	r2, [sp, #28]
 8001ff8:	e014      	b.n	8002024 <_svfiprintf_r+0x110>
 8001ffa:	eba0 0308 	sub.w	r3, r0, r8
 8001ffe:	fa09 f303 	lsl.w	r3, r9, r3
 8002002:	4313      	orrs	r3, r2
 8002004:	46a2      	mov	sl, r4
 8002006:	9304      	str	r3, [sp, #16]
 8002008:	e7d2      	b.n	8001fb0 <_svfiprintf_r+0x9c>
 800200a:	9b03      	ldr	r3, [sp, #12]
 800200c:	1d19      	adds	r1, r3, #4
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	9103      	str	r1, [sp, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	bfbb      	ittet	lt
 8002016:	425b      	neglt	r3, r3
 8002018:	f042 0202 	orrlt.w	r2, r2, #2
 800201c:	9307      	strge	r3, [sp, #28]
 800201e:	9307      	strlt	r3, [sp, #28]
 8002020:	bfb8      	it	lt
 8002022:	9204      	strlt	r2, [sp, #16]
 8002024:	7823      	ldrb	r3, [r4, #0]
 8002026:	2b2e      	cmp	r3, #46	; 0x2e
 8002028:	d10c      	bne.n	8002044 <_svfiprintf_r+0x130>
 800202a:	7863      	ldrb	r3, [r4, #1]
 800202c:	2b2a      	cmp	r3, #42	; 0x2a
 800202e:	d135      	bne.n	800209c <_svfiprintf_r+0x188>
 8002030:	9b03      	ldr	r3, [sp, #12]
 8002032:	3402      	adds	r4, #2
 8002034:	1d1a      	adds	r2, r3, #4
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	9203      	str	r2, [sp, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	bfb8      	it	lt
 800203e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002042:	9305      	str	r3, [sp, #20]
 8002044:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002110 <_svfiprintf_r+0x1fc>
 8002048:	2203      	movs	r2, #3
 800204a:	4650      	mov	r0, sl
 800204c:	7821      	ldrb	r1, [r4, #0]
 800204e:	f000 f9f7 	bl	8002440 <memchr>
 8002052:	b140      	cbz	r0, 8002066 <_svfiprintf_r+0x152>
 8002054:	2340      	movs	r3, #64	; 0x40
 8002056:	eba0 000a 	sub.w	r0, r0, sl
 800205a:	fa03 f000 	lsl.w	r0, r3, r0
 800205e:	9b04      	ldr	r3, [sp, #16]
 8002060:	3401      	adds	r4, #1
 8002062:	4303      	orrs	r3, r0
 8002064:	9304      	str	r3, [sp, #16]
 8002066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800206a:	2206      	movs	r2, #6
 800206c:	4825      	ldr	r0, [pc, #148]	; (8002104 <_svfiprintf_r+0x1f0>)
 800206e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002072:	f000 f9e5 	bl	8002440 <memchr>
 8002076:	2800      	cmp	r0, #0
 8002078:	d038      	beq.n	80020ec <_svfiprintf_r+0x1d8>
 800207a:	4b23      	ldr	r3, [pc, #140]	; (8002108 <_svfiprintf_r+0x1f4>)
 800207c:	bb1b      	cbnz	r3, 80020c6 <_svfiprintf_r+0x1b2>
 800207e:	9b03      	ldr	r3, [sp, #12]
 8002080:	3307      	adds	r3, #7
 8002082:	f023 0307 	bic.w	r3, r3, #7
 8002086:	3308      	adds	r3, #8
 8002088:	9303      	str	r3, [sp, #12]
 800208a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800208c:	4433      	add	r3, r6
 800208e:	9309      	str	r3, [sp, #36]	; 0x24
 8002090:	e767      	b.n	8001f62 <_svfiprintf_r+0x4e>
 8002092:	460c      	mov	r4, r1
 8002094:	2001      	movs	r0, #1
 8002096:	fb0c 3202 	mla	r2, ip, r2, r3
 800209a:	e7a5      	b.n	8001fe8 <_svfiprintf_r+0xd4>
 800209c:	2300      	movs	r3, #0
 800209e:	f04f 0c0a 	mov.w	ip, #10
 80020a2:	4619      	mov	r1, r3
 80020a4:	3401      	adds	r4, #1
 80020a6:	9305      	str	r3, [sp, #20]
 80020a8:	4620      	mov	r0, r4
 80020aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020ae:	3a30      	subs	r2, #48	; 0x30
 80020b0:	2a09      	cmp	r2, #9
 80020b2:	d903      	bls.n	80020bc <_svfiprintf_r+0x1a8>
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0c5      	beq.n	8002044 <_svfiprintf_r+0x130>
 80020b8:	9105      	str	r1, [sp, #20]
 80020ba:	e7c3      	b.n	8002044 <_svfiprintf_r+0x130>
 80020bc:	4604      	mov	r4, r0
 80020be:	2301      	movs	r3, #1
 80020c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80020c4:	e7f0      	b.n	80020a8 <_svfiprintf_r+0x194>
 80020c6:	ab03      	add	r3, sp, #12
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	462a      	mov	r2, r5
 80020cc:	4638      	mov	r0, r7
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <_svfiprintf_r+0x1f8>)
 80020d0:	a904      	add	r1, sp, #16
 80020d2:	f3af 8000 	nop.w
 80020d6:	1c42      	adds	r2, r0, #1
 80020d8:	4606      	mov	r6, r0
 80020da:	d1d6      	bne.n	800208a <_svfiprintf_r+0x176>
 80020dc:	89ab      	ldrh	r3, [r5, #12]
 80020de:	065b      	lsls	r3, r3, #25
 80020e0:	f53f af2c 	bmi.w	8001f3c <_svfiprintf_r+0x28>
 80020e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020e6:	b01d      	add	sp, #116	; 0x74
 80020e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020ec:	ab03      	add	r3, sp, #12
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	462a      	mov	r2, r5
 80020f2:	4638      	mov	r0, r7
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <_svfiprintf_r+0x1f8>)
 80020f6:	a904      	add	r1, sp, #16
 80020f8:	f000 f87c 	bl	80021f4 <_printf_i>
 80020fc:	e7eb      	b.n	80020d6 <_svfiprintf_r+0x1c2>
 80020fe:	bf00      	nop
 8002100:	080026e2 	.word	0x080026e2
 8002104:	080026ec 	.word	0x080026ec
 8002108:	00000000 	.word	0x00000000
 800210c:	08001e5d 	.word	0x08001e5d
 8002110:	080026e8 	.word	0x080026e8

08002114 <_printf_common>:
 8002114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002118:	4616      	mov	r6, r2
 800211a:	4699      	mov	r9, r3
 800211c:	688a      	ldr	r2, [r1, #8]
 800211e:	690b      	ldr	r3, [r1, #16]
 8002120:	4607      	mov	r7, r0
 8002122:	4293      	cmp	r3, r2
 8002124:	bfb8      	it	lt
 8002126:	4613      	movlt	r3, r2
 8002128:	6033      	str	r3, [r6, #0]
 800212a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800212e:	460c      	mov	r4, r1
 8002130:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002134:	b10a      	cbz	r2, 800213a <_printf_common+0x26>
 8002136:	3301      	adds	r3, #1
 8002138:	6033      	str	r3, [r6, #0]
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	0699      	lsls	r1, r3, #26
 800213e:	bf42      	ittt	mi
 8002140:	6833      	ldrmi	r3, [r6, #0]
 8002142:	3302      	addmi	r3, #2
 8002144:	6033      	strmi	r3, [r6, #0]
 8002146:	6825      	ldr	r5, [r4, #0]
 8002148:	f015 0506 	ands.w	r5, r5, #6
 800214c:	d106      	bne.n	800215c <_printf_common+0x48>
 800214e:	f104 0a19 	add.w	sl, r4, #25
 8002152:	68e3      	ldr	r3, [r4, #12]
 8002154:	6832      	ldr	r2, [r6, #0]
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	42ab      	cmp	r3, r5
 800215a:	dc28      	bgt.n	80021ae <_printf_common+0x9a>
 800215c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002160:	1e13      	subs	r3, r2, #0
 8002162:	6822      	ldr	r2, [r4, #0]
 8002164:	bf18      	it	ne
 8002166:	2301      	movne	r3, #1
 8002168:	0692      	lsls	r2, r2, #26
 800216a:	d42d      	bmi.n	80021c8 <_printf_common+0xb4>
 800216c:	4649      	mov	r1, r9
 800216e:	4638      	mov	r0, r7
 8002170:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002174:	47c0      	blx	r8
 8002176:	3001      	adds	r0, #1
 8002178:	d020      	beq.n	80021bc <_printf_common+0xa8>
 800217a:	6823      	ldr	r3, [r4, #0]
 800217c:	68e5      	ldr	r5, [r4, #12]
 800217e:	f003 0306 	and.w	r3, r3, #6
 8002182:	2b04      	cmp	r3, #4
 8002184:	bf18      	it	ne
 8002186:	2500      	movne	r5, #0
 8002188:	6832      	ldr	r2, [r6, #0]
 800218a:	f04f 0600 	mov.w	r6, #0
 800218e:	68a3      	ldr	r3, [r4, #8]
 8002190:	bf08      	it	eq
 8002192:	1aad      	subeq	r5, r5, r2
 8002194:	6922      	ldr	r2, [r4, #16]
 8002196:	bf08      	it	eq
 8002198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800219c:	4293      	cmp	r3, r2
 800219e:	bfc4      	itt	gt
 80021a0:	1a9b      	subgt	r3, r3, r2
 80021a2:	18ed      	addgt	r5, r5, r3
 80021a4:	341a      	adds	r4, #26
 80021a6:	42b5      	cmp	r5, r6
 80021a8:	d11a      	bne.n	80021e0 <_printf_common+0xcc>
 80021aa:	2000      	movs	r0, #0
 80021ac:	e008      	b.n	80021c0 <_printf_common+0xac>
 80021ae:	2301      	movs	r3, #1
 80021b0:	4652      	mov	r2, sl
 80021b2:	4649      	mov	r1, r9
 80021b4:	4638      	mov	r0, r7
 80021b6:	47c0      	blx	r8
 80021b8:	3001      	adds	r0, #1
 80021ba:	d103      	bne.n	80021c4 <_printf_common+0xb0>
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021c4:	3501      	adds	r5, #1
 80021c6:	e7c4      	b.n	8002152 <_printf_common+0x3e>
 80021c8:	2030      	movs	r0, #48	; 0x30
 80021ca:	18e1      	adds	r1, r4, r3
 80021cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021d6:	4422      	add	r2, r4
 80021d8:	3302      	adds	r3, #2
 80021da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021de:	e7c5      	b.n	800216c <_printf_common+0x58>
 80021e0:	2301      	movs	r3, #1
 80021e2:	4622      	mov	r2, r4
 80021e4:	4649      	mov	r1, r9
 80021e6:	4638      	mov	r0, r7
 80021e8:	47c0      	blx	r8
 80021ea:	3001      	adds	r0, #1
 80021ec:	d0e6      	beq.n	80021bc <_printf_common+0xa8>
 80021ee:	3601      	adds	r6, #1
 80021f0:	e7d9      	b.n	80021a6 <_printf_common+0x92>
	...

080021f4 <_printf_i>:
 80021f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021f8:	460c      	mov	r4, r1
 80021fa:	7e27      	ldrb	r7, [r4, #24]
 80021fc:	4691      	mov	r9, r2
 80021fe:	2f78      	cmp	r7, #120	; 0x78
 8002200:	4680      	mov	r8, r0
 8002202:	469a      	mov	sl, r3
 8002204:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002206:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800220a:	d807      	bhi.n	800221c <_printf_i+0x28>
 800220c:	2f62      	cmp	r7, #98	; 0x62
 800220e:	d80a      	bhi.n	8002226 <_printf_i+0x32>
 8002210:	2f00      	cmp	r7, #0
 8002212:	f000 80d9 	beq.w	80023c8 <_printf_i+0x1d4>
 8002216:	2f58      	cmp	r7, #88	; 0x58
 8002218:	f000 80a4 	beq.w	8002364 <_printf_i+0x170>
 800221c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002220:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002224:	e03a      	b.n	800229c <_printf_i+0xa8>
 8002226:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800222a:	2b15      	cmp	r3, #21
 800222c:	d8f6      	bhi.n	800221c <_printf_i+0x28>
 800222e:	a001      	add	r0, pc, #4	; (adr r0, 8002234 <_printf_i+0x40>)
 8002230:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002234:	0800228d 	.word	0x0800228d
 8002238:	080022a1 	.word	0x080022a1
 800223c:	0800221d 	.word	0x0800221d
 8002240:	0800221d 	.word	0x0800221d
 8002244:	0800221d 	.word	0x0800221d
 8002248:	0800221d 	.word	0x0800221d
 800224c:	080022a1 	.word	0x080022a1
 8002250:	0800221d 	.word	0x0800221d
 8002254:	0800221d 	.word	0x0800221d
 8002258:	0800221d 	.word	0x0800221d
 800225c:	0800221d 	.word	0x0800221d
 8002260:	080023af 	.word	0x080023af
 8002264:	080022d1 	.word	0x080022d1
 8002268:	08002391 	.word	0x08002391
 800226c:	0800221d 	.word	0x0800221d
 8002270:	0800221d 	.word	0x0800221d
 8002274:	080023d1 	.word	0x080023d1
 8002278:	0800221d 	.word	0x0800221d
 800227c:	080022d1 	.word	0x080022d1
 8002280:	0800221d 	.word	0x0800221d
 8002284:	0800221d 	.word	0x0800221d
 8002288:	08002399 	.word	0x08002399
 800228c:	680b      	ldr	r3, [r1, #0]
 800228e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002292:	1d1a      	adds	r2, r3, #4
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	600a      	str	r2, [r1, #0]
 8002298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800229c:	2301      	movs	r3, #1
 800229e:	e0a4      	b.n	80023ea <_printf_i+0x1f6>
 80022a0:	6825      	ldr	r5, [r4, #0]
 80022a2:	6808      	ldr	r0, [r1, #0]
 80022a4:	062e      	lsls	r6, r5, #24
 80022a6:	f100 0304 	add.w	r3, r0, #4
 80022aa:	d50a      	bpl.n	80022c2 <_printf_i+0xce>
 80022ac:	6805      	ldr	r5, [r0, #0]
 80022ae:	600b      	str	r3, [r1, #0]
 80022b0:	2d00      	cmp	r5, #0
 80022b2:	da03      	bge.n	80022bc <_printf_i+0xc8>
 80022b4:	232d      	movs	r3, #45	; 0x2d
 80022b6:	426d      	negs	r5, r5
 80022b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022bc:	230a      	movs	r3, #10
 80022be:	485e      	ldr	r0, [pc, #376]	; (8002438 <_printf_i+0x244>)
 80022c0:	e019      	b.n	80022f6 <_printf_i+0x102>
 80022c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80022c6:	6805      	ldr	r5, [r0, #0]
 80022c8:	600b      	str	r3, [r1, #0]
 80022ca:	bf18      	it	ne
 80022cc:	b22d      	sxthne	r5, r5
 80022ce:	e7ef      	b.n	80022b0 <_printf_i+0xbc>
 80022d0:	680b      	ldr	r3, [r1, #0]
 80022d2:	6825      	ldr	r5, [r4, #0]
 80022d4:	1d18      	adds	r0, r3, #4
 80022d6:	6008      	str	r0, [r1, #0]
 80022d8:	0628      	lsls	r0, r5, #24
 80022da:	d501      	bpl.n	80022e0 <_printf_i+0xec>
 80022dc:	681d      	ldr	r5, [r3, #0]
 80022de:	e002      	b.n	80022e6 <_printf_i+0xf2>
 80022e0:	0669      	lsls	r1, r5, #25
 80022e2:	d5fb      	bpl.n	80022dc <_printf_i+0xe8>
 80022e4:	881d      	ldrh	r5, [r3, #0]
 80022e6:	2f6f      	cmp	r7, #111	; 0x6f
 80022e8:	bf0c      	ite	eq
 80022ea:	2308      	moveq	r3, #8
 80022ec:	230a      	movne	r3, #10
 80022ee:	4852      	ldr	r0, [pc, #328]	; (8002438 <_printf_i+0x244>)
 80022f0:	2100      	movs	r1, #0
 80022f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80022f6:	6866      	ldr	r6, [r4, #4]
 80022f8:	2e00      	cmp	r6, #0
 80022fa:	bfa8      	it	ge
 80022fc:	6821      	ldrge	r1, [r4, #0]
 80022fe:	60a6      	str	r6, [r4, #8]
 8002300:	bfa4      	itt	ge
 8002302:	f021 0104 	bicge.w	r1, r1, #4
 8002306:	6021      	strge	r1, [r4, #0]
 8002308:	b90d      	cbnz	r5, 800230e <_printf_i+0x11a>
 800230a:	2e00      	cmp	r6, #0
 800230c:	d04d      	beq.n	80023aa <_printf_i+0x1b6>
 800230e:	4616      	mov	r6, r2
 8002310:	fbb5 f1f3 	udiv	r1, r5, r3
 8002314:	fb03 5711 	mls	r7, r3, r1, r5
 8002318:	5dc7      	ldrb	r7, [r0, r7]
 800231a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800231e:	462f      	mov	r7, r5
 8002320:	42bb      	cmp	r3, r7
 8002322:	460d      	mov	r5, r1
 8002324:	d9f4      	bls.n	8002310 <_printf_i+0x11c>
 8002326:	2b08      	cmp	r3, #8
 8002328:	d10b      	bne.n	8002342 <_printf_i+0x14e>
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	07df      	lsls	r7, r3, #31
 800232e:	d508      	bpl.n	8002342 <_printf_i+0x14e>
 8002330:	6923      	ldr	r3, [r4, #16]
 8002332:	6861      	ldr	r1, [r4, #4]
 8002334:	4299      	cmp	r1, r3
 8002336:	bfde      	ittt	le
 8002338:	2330      	movle	r3, #48	; 0x30
 800233a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800233e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002342:	1b92      	subs	r2, r2, r6
 8002344:	6122      	str	r2, [r4, #16]
 8002346:	464b      	mov	r3, r9
 8002348:	4621      	mov	r1, r4
 800234a:	4640      	mov	r0, r8
 800234c:	f8cd a000 	str.w	sl, [sp]
 8002350:	aa03      	add	r2, sp, #12
 8002352:	f7ff fedf 	bl	8002114 <_printf_common>
 8002356:	3001      	adds	r0, #1
 8002358:	d14c      	bne.n	80023f4 <_printf_i+0x200>
 800235a:	f04f 30ff 	mov.w	r0, #4294967295
 800235e:	b004      	add	sp, #16
 8002360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002364:	4834      	ldr	r0, [pc, #208]	; (8002438 <_printf_i+0x244>)
 8002366:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800236a:	680e      	ldr	r6, [r1, #0]
 800236c:	6823      	ldr	r3, [r4, #0]
 800236e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002372:	061f      	lsls	r7, r3, #24
 8002374:	600e      	str	r6, [r1, #0]
 8002376:	d514      	bpl.n	80023a2 <_printf_i+0x1ae>
 8002378:	07d9      	lsls	r1, r3, #31
 800237a:	bf44      	itt	mi
 800237c:	f043 0320 	orrmi.w	r3, r3, #32
 8002380:	6023      	strmi	r3, [r4, #0]
 8002382:	b91d      	cbnz	r5, 800238c <_printf_i+0x198>
 8002384:	6823      	ldr	r3, [r4, #0]
 8002386:	f023 0320 	bic.w	r3, r3, #32
 800238a:	6023      	str	r3, [r4, #0]
 800238c:	2310      	movs	r3, #16
 800238e:	e7af      	b.n	80022f0 <_printf_i+0xfc>
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	f043 0320 	orr.w	r3, r3, #32
 8002396:	6023      	str	r3, [r4, #0]
 8002398:	2378      	movs	r3, #120	; 0x78
 800239a:	4828      	ldr	r0, [pc, #160]	; (800243c <_printf_i+0x248>)
 800239c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80023a0:	e7e3      	b.n	800236a <_printf_i+0x176>
 80023a2:	065e      	lsls	r6, r3, #25
 80023a4:	bf48      	it	mi
 80023a6:	b2ad      	uxthmi	r5, r5
 80023a8:	e7e6      	b.n	8002378 <_printf_i+0x184>
 80023aa:	4616      	mov	r6, r2
 80023ac:	e7bb      	b.n	8002326 <_printf_i+0x132>
 80023ae:	680b      	ldr	r3, [r1, #0]
 80023b0:	6826      	ldr	r6, [r4, #0]
 80023b2:	1d1d      	adds	r5, r3, #4
 80023b4:	6960      	ldr	r0, [r4, #20]
 80023b6:	600d      	str	r5, [r1, #0]
 80023b8:	0635      	lsls	r5, r6, #24
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	d501      	bpl.n	80023c2 <_printf_i+0x1ce>
 80023be:	6018      	str	r0, [r3, #0]
 80023c0:	e002      	b.n	80023c8 <_printf_i+0x1d4>
 80023c2:	0671      	lsls	r1, r6, #25
 80023c4:	d5fb      	bpl.n	80023be <_printf_i+0x1ca>
 80023c6:	8018      	strh	r0, [r3, #0]
 80023c8:	2300      	movs	r3, #0
 80023ca:	4616      	mov	r6, r2
 80023cc:	6123      	str	r3, [r4, #16]
 80023ce:	e7ba      	b.n	8002346 <_printf_i+0x152>
 80023d0:	680b      	ldr	r3, [r1, #0]
 80023d2:	1d1a      	adds	r2, r3, #4
 80023d4:	600a      	str	r2, [r1, #0]
 80023d6:	681e      	ldr	r6, [r3, #0]
 80023d8:	2100      	movs	r1, #0
 80023da:	4630      	mov	r0, r6
 80023dc:	6862      	ldr	r2, [r4, #4]
 80023de:	f000 f82f 	bl	8002440 <memchr>
 80023e2:	b108      	cbz	r0, 80023e8 <_printf_i+0x1f4>
 80023e4:	1b80      	subs	r0, r0, r6
 80023e6:	6060      	str	r0, [r4, #4]
 80023e8:	6863      	ldr	r3, [r4, #4]
 80023ea:	6123      	str	r3, [r4, #16]
 80023ec:	2300      	movs	r3, #0
 80023ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023f2:	e7a8      	b.n	8002346 <_printf_i+0x152>
 80023f4:	4632      	mov	r2, r6
 80023f6:	4649      	mov	r1, r9
 80023f8:	4640      	mov	r0, r8
 80023fa:	6923      	ldr	r3, [r4, #16]
 80023fc:	47d0      	blx	sl
 80023fe:	3001      	adds	r0, #1
 8002400:	d0ab      	beq.n	800235a <_printf_i+0x166>
 8002402:	6823      	ldr	r3, [r4, #0]
 8002404:	079b      	lsls	r3, r3, #30
 8002406:	d413      	bmi.n	8002430 <_printf_i+0x23c>
 8002408:	68e0      	ldr	r0, [r4, #12]
 800240a:	9b03      	ldr	r3, [sp, #12]
 800240c:	4298      	cmp	r0, r3
 800240e:	bfb8      	it	lt
 8002410:	4618      	movlt	r0, r3
 8002412:	e7a4      	b.n	800235e <_printf_i+0x16a>
 8002414:	2301      	movs	r3, #1
 8002416:	4632      	mov	r2, r6
 8002418:	4649      	mov	r1, r9
 800241a:	4640      	mov	r0, r8
 800241c:	47d0      	blx	sl
 800241e:	3001      	adds	r0, #1
 8002420:	d09b      	beq.n	800235a <_printf_i+0x166>
 8002422:	3501      	adds	r5, #1
 8002424:	68e3      	ldr	r3, [r4, #12]
 8002426:	9903      	ldr	r1, [sp, #12]
 8002428:	1a5b      	subs	r3, r3, r1
 800242a:	42ab      	cmp	r3, r5
 800242c:	dcf2      	bgt.n	8002414 <_printf_i+0x220>
 800242e:	e7eb      	b.n	8002408 <_printf_i+0x214>
 8002430:	2500      	movs	r5, #0
 8002432:	f104 0619 	add.w	r6, r4, #25
 8002436:	e7f5      	b.n	8002424 <_printf_i+0x230>
 8002438:	080026f3 	.word	0x080026f3
 800243c:	08002704 	.word	0x08002704

08002440 <memchr>:
 8002440:	4603      	mov	r3, r0
 8002442:	b510      	push	{r4, lr}
 8002444:	b2c9      	uxtb	r1, r1
 8002446:	4402      	add	r2, r0
 8002448:	4293      	cmp	r3, r2
 800244a:	4618      	mov	r0, r3
 800244c:	d101      	bne.n	8002452 <memchr+0x12>
 800244e:	2000      	movs	r0, #0
 8002450:	e003      	b.n	800245a <memchr+0x1a>
 8002452:	7804      	ldrb	r4, [r0, #0]
 8002454:	3301      	adds	r3, #1
 8002456:	428c      	cmp	r4, r1
 8002458:	d1f6      	bne.n	8002448 <memchr+0x8>
 800245a:	bd10      	pop	{r4, pc}

0800245c <memcpy>:
 800245c:	440a      	add	r2, r1
 800245e:	4291      	cmp	r1, r2
 8002460:	f100 33ff 	add.w	r3, r0, #4294967295
 8002464:	d100      	bne.n	8002468 <memcpy+0xc>
 8002466:	4770      	bx	lr
 8002468:	b510      	push	{r4, lr}
 800246a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800246e:	4291      	cmp	r1, r2
 8002470:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002474:	d1f9      	bne.n	800246a <memcpy+0xe>
 8002476:	bd10      	pop	{r4, pc}

08002478 <memmove>:
 8002478:	4288      	cmp	r0, r1
 800247a:	b510      	push	{r4, lr}
 800247c:	eb01 0402 	add.w	r4, r1, r2
 8002480:	d902      	bls.n	8002488 <memmove+0x10>
 8002482:	4284      	cmp	r4, r0
 8002484:	4623      	mov	r3, r4
 8002486:	d807      	bhi.n	8002498 <memmove+0x20>
 8002488:	1e43      	subs	r3, r0, #1
 800248a:	42a1      	cmp	r1, r4
 800248c:	d008      	beq.n	80024a0 <memmove+0x28>
 800248e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002492:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002496:	e7f8      	b.n	800248a <memmove+0x12>
 8002498:	4601      	mov	r1, r0
 800249a:	4402      	add	r2, r0
 800249c:	428a      	cmp	r2, r1
 800249e:	d100      	bne.n	80024a2 <memmove+0x2a>
 80024a0:	bd10      	pop	{r4, pc}
 80024a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80024a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80024aa:	e7f7      	b.n	800249c <memmove+0x24>

080024ac <_free_r>:
 80024ac:	b538      	push	{r3, r4, r5, lr}
 80024ae:	4605      	mov	r5, r0
 80024b0:	2900      	cmp	r1, #0
 80024b2:	d043      	beq.n	800253c <_free_r+0x90>
 80024b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024b8:	1f0c      	subs	r4, r1, #4
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	bfb8      	it	lt
 80024be:	18e4      	addlt	r4, r4, r3
 80024c0:	f000 f8d0 	bl	8002664 <__malloc_lock>
 80024c4:	4a1e      	ldr	r2, [pc, #120]	; (8002540 <_free_r+0x94>)
 80024c6:	6813      	ldr	r3, [r2, #0]
 80024c8:	4610      	mov	r0, r2
 80024ca:	b933      	cbnz	r3, 80024da <_free_r+0x2e>
 80024cc:	6063      	str	r3, [r4, #4]
 80024ce:	6014      	str	r4, [r2, #0]
 80024d0:	4628      	mov	r0, r5
 80024d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024d6:	f000 b8cb 	b.w	8002670 <__malloc_unlock>
 80024da:	42a3      	cmp	r3, r4
 80024dc:	d90a      	bls.n	80024f4 <_free_r+0x48>
 80024de:	6821      	ldr	r1, [r4, #0]
 80024e0:	1862      	adds	r2, r4, r1
 80024e2:	4293      	cmp	r3, r2
 80024e4:	bf01      	itttt	eq
 80024e6:	681a      	ldreq	r2, [r3, #0]
 80024e8:	685b      	ldreq	r3, [r3, #4]
 80024ea:	1852      	addeq	r2, r2, r1
 80024ec:	6022      	streq	r2, [r4, #0]
 80024ee:	6063      	str	r3, [r4, #4]
 80024f0:	6004      	str	r4, [r0, #0]
 80024f2:	e7ed      	b.n	80024d0 <_free_r+0x24>
 80024f4:	461a      	mov	r2, r3
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	b10b      	cbz	r3, 80024fe <_free_r+0x52>
 80024fa:	42a3      	cmp	r3, r4
 80024fc:	d9fa      	bls.n	80024f4 <_free_r+0x48>
 80024fe:	6811      	ldr	r1, [r2, #0]
 8002500:	1850      	adds	r0, r2, r1
 8002502:	42a0      	cmp	r0, r4
 8002504:	d10b      	bne.n	800251e <_free_r+0x72>
 8002506:	6820      	ldr	r0, [r4, #0]
 8002508:	4401      	add	r1, r0
 800250a:	1850      	adds	r0, r2, r1
 800250c:	4283      	cmp	r3, r0
 800250e:	6011      	str	r1, [r2, #0]
 8002510:	d1de      	bne.n	80024d0 <_free_r+0x24>
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4401      	add	r1, r0
 8002518:	6011      	str	r1, [r2, #0]
 800251a:	6053      	str	r3, [r2, #4]
 800251c:	e7d8      	b.n	80024d0 <_free_r+0x24>
 800251e:	d902      	bls.n	8002526 <_free_r+0x7a>
 8002520:	230c      	movs	r3, #12
 8002522:	602b      	str	r3, [r5, #0]
 8002524:	e7d4      	b.n	80024d0 <_free_r+0x24>
 8002526:	6820      	ldr	r0, [r4, #0]
 8002528:	1821      	adds	r1, r4, r0
 800252a:	428b      	cmp	r3, r1
 800252c:	bf01      	itttt	eq
 800252e:	6819      	ldreq	r1, [r3, #0]
 8002530:	685b      	ldreq	r3, [r3, #4]
 8002532:	1809      	addeq	r1, r1, r0
 8002534:	6021      	streq	r1, [r4, #0]
 8002536:	6063      	str	r3, [r4, #4]
 8002538:	6054      	str	r4, [r2, #4]
 800253a:	e7c9      	b.n	80024d0 <_free_r+0x24>
 800253c:	bd38      	pop	{r3, r4, r5, pc}
 800253e:	bf00      	nop
 8002540:	20000090 	.word	0x20000090

08002544 <_malloc_r>:
 8002544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002546:	1ccd      	adds	r5, r1, #3
 8002548:	f025 0503 	bic.w	r5, r5, #3
 800254c:	3508      	adds	r5, #8
 800254e:	2d0c      	cmp	r5, #12
 8002550:	bf38      	it	cc
 8002552:	250c      	movcc	r5, #12
 8002554:	2d00      	cmp	r5, #0
 8002556:	4606      	mov	r6, r0
 8002558:	db01      	blt.n	800255e <_malloc_r+0x1a>
 800255a:	42a9      	cmp	r1, r5
 800255c:	d903      	bls.n	8002566 <_malloc_r+0x22>
 800255e:	230c      	movs	r3, #12
 8002560:	6033      	str	r3, [r6, #0]
 8002562:	2000      	movs	r0, #0
 8002564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002566:	f000 f87d 	bl	8002664 <__malloc_lock>
 800256a:	4921      	ldr	r1, [pc, #132]	; (80025f0 <_malloc_r+0xac>)
 800256c:	680a      	ldr	r2, [r1, #0]
 800256e:	4614      	mov	r4, r2
 8002570:	b99c      	cbnz	r4, 800259a <_malloc_r+0x56>
 8002572:	4f20      	ldr	r7, [pc, #128]	; (80025f4 <_malloc_r+0xb0>)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	b923      	cbnz	r3, 8002582 <_malloc_r+0x3e>
 8002578:	4621      	mov	r1, r4
 800257a:	4630      	mov	r0, r6
 800257c:	f000 f862 	bl	8002644 <_sbrk_r>
 8002580:	6038      	str	r0, [r7, #0]
 8002582:	4629      	mov	r1, r5
 8002584:	4630      	mov	r0, r6
 8002586:	f000 f85d 	bl	8002644 <_sbrk_r>
 800258a:	1c43      	adds	r3, r0, #1
 800258c:	d123      	bne.n	80025d6 <_malloc_r+0x92>
 800258e:	230c      	movs	r3, #12
 8002590:	4630      	mov	r0, r6
 8002592:	6033      	str	r3, [r6, #0]
 8002594:	f000 f86c 	bl	8002670 <__malloc_unlock>
 8002598:	e7e3      	b.n	8002562 <_malloc_r+0x1e>
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	1b5b      	subs	r3, r3, r5
 800259e:	d417      	bmi.n	80025d0 <_malloc_r+0x8c>
 80025a0:	2b0b      	cmp	r3, #11
 80025a2:	d903      	bls.n	80025ac <_malloc_r+0x68>
 80025a4:	6023      	str	r3, [r4, #0]
 80025a6:	441c      	add	r4, r3
 80025a8:	6025      	str	r5, [r4, #0]
 80025aa:	e004      	b.n	80025b6 <_malloc_r+0x72>
 80025ac:	6863      	ldr	r3, [r4, #4]
 80025ae:	42a2      	cmp	r2, r4
 80025b0:	bf0c      	ite	eq
 80025b2:	600b      	streq	r3, [r1, #0]
 80025b4:	6053      	strne	r3, [r2, #4]
 80025b6:	4630      	mov	r0, r6
 80025b8:	f000 f85a 	bl	8002670 <__malloc_unlock>
 80025bc:	f104 000b 	add.w	r0, r4, #11
 80025c0:	1d23      	adds	r3, r4, #4
 80025c2:	f020 0007 	bic.w	r0, r0, #7
 80025c6:	1ac2      	subs	r2, r0, r3
 80025c8:	d0cc      	beq.n	8002564 <_malloc_r+0x20>
 80025ca:	1a1b      	subs	r3, r3, r0
 80025cc:	50a3      	str	r3, [r4, r2]
 80025ce:	e7c9      	b.n	8002564 <_malloc_r+0x20>
 80025d0:	4622      	mov	r2, r4
 80025d2:	6864      	ldr	r4, [r4, #4]
 80025d4:	e7cc      	b.n	8002570 <_malloc_r+0x2c>
 80025d6:	1cc4      	adds	r4, r0, #3
 80025d8:	f024 0403 	bic.w	r4, r4, #3
 80025dc:	42a0      	cmp	r0, r4
 80025de:	d0e3      	beq.n	80025a8 <_malloc_r+0x64>
 80025e0:	1a21      	subs	r1, r4, r0
 80025e2:	4630      	mov	r0, r6
 80025e4:	f000 f82e 	bl	8002644 <_sbrk_r>
 80025e8:	3001      	adds	r0, #1
 80025ea:	d1dd      	bne.n	80025a8 <_malloc_r+0x64>
 80025ec:	e7cf      	b.n	800258e <_malloc_r+0x4a>
 80025ee:	bf00      	nop
 80025f0:	20000090 	.word	0x20000090
 80025f4:	20000094 	.word	0x20000094

080025f8 <_realloc_r>:
 80025f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fa:	4607      	mov	r7, r0
 80025fc:	4614      	mov	r4, r2
 80025fe:	460e      	mov	r6, r1
 8002600:	b921      	cbnz	r1, 800260c <_realloc_r+0x14>
 8002602:	4611      	mov	r1, r2
 8002604:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002608:	f7ff bf9c 	b.w	8002544 <_malloc_r>
 800260c:	b922      	cbnz	r2, 8002618 <_realloc_r+0x20>
 800260e:	f7ff ff4d 	bl	80024ac <_free_r>
 8002612:	4625      	mov	r5, r4
 8002614:	4628      	mov	r0, r5
 8002616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002618:	f000 f830 	bl	800267c <_malloc_usable_size_r>
 800261c:	42a0      	cmp	r0, r4
 800261e:	d20f      	bcs.n	8002640 <_realloc_r+0x48>
 8002620:	4621      	mov	r1, r4
 8002622:	4638      	mov	r0, r7
 8002624:	f7ff ff8e 	bl	8002544 <_malloc_r>
 8002628:	4605      	mov	r5, r0
 800262a:	2800      	cmp	r0, #0
 800262c:	d0f2      	beq.n	8002614 <_realloc_r+0x1c>
 800262e:	4631      	mov	r1, r6
 8002630:	4622      	mov	r2, r4
 8002632:	f7ff ff13 	bl	800245c <memcpy>
 8002636:	4631      	mov	r1, r6
 8002638:	4638      	mov	r0, r7
 800263a:	f7ff ff37 	bl	80024ac <_free_r>
 800263e:	e7e9      	b.n	8002614 <_realloc_r+0x1c>
 8002640:	4635      	mov	r5, r6
 8002642:	e7e7      	b.n	8002614 <_realloc_r+0x1c>

08002644 <_sbrk_r>:
 8002644:	b538      	push	{r3, r4, r5, lr}
 8002646:	2300      	movs	r3, #0
 8002648:	4d05      	ldr	r5, [pc, #20]	; (8002660 <_sbrk_r+0x1c>)
 800264a:	4604      	mov	r4, r0
 800264c:	4608      	mov	r0, r1
 800264e:	602b      	str	r3, [r5, #0]
 8002650:	f7fd ffca 	bl	80005e8 <_sbrk>
 8002654:	1c43      	adds	r3, r0, #1
 8002656:	d102      	bne.n	800265e <_sbrk_r+0x1a>
 8002658:	682b      	ldr	r3, [r5, #0]
 800265a:	b103      	cbz	r3, 800265e <_sbrk_r+0x1a>
 800265c:	6023      	str	r3, [r4, #0]
 800265e:	bd38      	pop	{r3, r4, r5, pc}
 8002660:	20000154 	.word	0x20000154

08002664 <__malloc_lock>:
 8002664:	4801      	ldr	r0, [pc, #4]	; (800266c <__malloc_lock+0x8>)
 8002666:	f000 b811 	b.w	800268c <__retarget_lock_acquire_recursive>
 800266a:	bf00      	nop
 800266c:	2000015c 	.word	0x2000015c

08002670 <__malloc_unlock>:
 8002670:	4801      	ldr	r0, [pc, #4]	; (8002678 <__malloc_unlock+0x8>)
 8002672:	f000 b80c 	b.w	800268e <__retarget_lock_release_recursive>
 8002676:	bf00      	nop
 8002678:	2000015c 	.word	0x2000015c

0800267c <_malloc_usable_size_r>:
 800267c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002680:	1f18      	subs	r0, r3, #4
 8002682:	2b00      	cmp	r3, #0
 8002684:	bfbc      	itt	lt
 8002686:	580b      	ldrlt	r3, [r1, r0]
 8002688:	18c0      	addlt	r0, r0, r3
 800268a:	4770      	bx	lr

0800268c <__retarget_lock_acquire_recursive>:
 800268c:	4770      	bx	lr

0800268e <__retarget_lock_release_recursive>:
 800268e:	4770      	bx	lr

08002690 <_init>:
 8002690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002692:	bf00      	nop
 8002694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002696:	bc08      	pop	{r3}
 8002698:	469e      	mov	lr, r3
 800269a:	4770      	bx	lr

0800269c <_fini>:
 800269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269e:	bf00      	nop
 80026a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a2:	bc08      	pop	{r3}
 80026a4:	469e      	mov	lr, r3
 80026a6:	4770      	bx	lr
