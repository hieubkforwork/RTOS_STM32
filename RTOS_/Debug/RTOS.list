
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b50  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08004d40  08004d40  00014d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e4c  08004e4c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004e4c  08004e4c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e4c  08004e4c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e4c  08004e4c  00014e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e50  08004e50  00014e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010b0  20000074  08004ec8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001124  08004ec8  00021124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001710f  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000315b  00000000  00000000  000371ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  0003a308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  0003b478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c25a  00000000  00000000  0003c4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001358c  00000000  00000000  0005871a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1f00  00000000  00000000  0006bca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010dba6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bc8  00000000  00000000  0010dbfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000074 	.word	0x20000074
 800020c:	00000000 	.word	0x00000000
 8000210:	08004d28 	.word	0x08004d28

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000078 	.word	0x20000078
 800022c:	08004d28 	.word	0x08004d28

08000230 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	4a06      	ldr	r2, [pc, #24]	; (8000258 <vApplicationGetIdleTaskMemory+0x28>)
 8000240:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	4a05      	ldr	r2, [pc, #20]	; (800025c <vApplicationGetIdleTaskMemory+0x2c>)
 8000246:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2280      	movs	r2, #128	; 0x80
 800024c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800024e:	bf00      	nop
 8000250:	3714      	adds	r7, #20
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	20000090 	.word	0x20000090
 800025c:	200000e4 	.word	0x200000e4

08000260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000260:	b5b0      	push	{r4, r5, r7, lr}
 8000262:	b09a      	sub	sp, #104	; 0x68
 8000264:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000266:	f000 fad9 	bl	800081c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026a:	f000 f85d 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026e:	f000 f8cb 	bl	8000408 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000272:	f000 f89f 	bl	80003b4 <MX_USART1_UART_Init>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  //osMessageQDef(myQueue01, 16, uint32_t);
  osMailQDef(myQueue1,16,DataType);
 8000276:	2310      	movs	r3, #16
 8000278:	65bb      	str	r3, [r7, #88]	; 0x58
 800027a:	2308      	movs	r3, #8
 800027c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800027e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000282:	663b      	str	r3, [r7, #96]	; 0x60
  //myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
  myQueue1Handle = osMailCreate(osMailQ(myQueue1), NULL);
 8000284:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f001 ff80 	bl	8002190 <osMailCreate>
 8000290:	4603      	mov	r3, r0
 8000292:	4a1e      	ldr	r2, [pc, #120]	; (800030c <main+0xac>)
 8000294:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000296:	4b1e      	ldr	r3, [pc, #120]	; (8000310 <main+0xb0>)
 8000298:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800029c:	461d      	mov	r5, r3
 800029e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002ae:	2100      	movs	r1, #0
 80002b0:	4618      	mov	r0, r3
 80002b2:	f001 fe4e 	bl	8001f52 <osThreadCreate>
 80002b6:	4603      	mov	r3, r0
 80002b8:	4a16      	ldr	r2, [pc, #88]	; (8000314 <main+0xb4>)
 80002ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartTask01, osPriorityNormal, 0, 128);
 80002bc:	4b16      	ldr	r3, [pc, #88]	; (8000318 <main+0xb8>)
 80002be:	f107 0420 	add.w	r4, r7, #32
 80002c2:	461d      	mov	r5, r3
 80002c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 80002d0:	f107 0320 	add.w	r3, r7, #32
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 fe3b 	bl	8001f52 <osThreadCreate>
 80002dc:	4603      	mov	r3, r0
 80002de:	4a0f      	ldr	r2, [pc, #60]	; (800031c <main+0xbc>)
 80002e0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(myTask02, StartTask02, 2, 0, 128);
 80002e2:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <main+0xc0>)
 80002e4:	1d3c      	adds	r4, r7, #4
 80002e6:	461d      	mov	r5, r3
 80002e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2100      	movs	r1, #0
 80002f8:	4618      	mov	r0, r3
 80002fa:	f001 fe2a 	bl	8001f52 <osThreadCreate>
 80002fe:	4603      	mov	r3, r0
 8000300:	4a08      	ldr	r2, [pc, #32]	; (8000324 <main+0xc4>)
 8000302:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000304:	f001 fe1e 	bl	8001f44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000308:	e7fe      	b.n	8000308 <main+0xa8>
 800030a:	bf00      	nop
 800030c:	2000109c 	.word	0x2000109c
 8000310:	08004d64 	.word	0x08004d64
 8000314:	20001044 	.word	0x20001044
 8000318:	08004d80 	.word	0x08004d80
 800031c:	20001098 	.word	0x20001098
 8000320:	08004d9c 	.word	0x08004d9c
 8000324:	20001090 	.word	0x20001090

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b090      	sub	sp, #64	; 0x40
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	f107 0318 	add.w	r3, r7, #24
 8000332:	2228      	movs	r2, #40	; 0x28
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f004 f8a8 	bl	800448c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800034a:	2301      	movs	r3, #1
 800034c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800034e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000352:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000358:	2301      	movs	r3, #1
 800035a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035c:	2302      	movs	r3, #2
 800035e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000360:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000364:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000366:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800036a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036c:	f107 0318 	add.w	r3, r7, #24
 8000370:	4618      	mov	r0, r3
 8000372:	f000 fcf9 	bl	8000d68 <HAL_RCC_OscConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800037c:	f000 f8ca 	bl	8000514 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000380:	230f      	movs	r3, #15
 8000382:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000384:	2302      	movs	r3, #2
 8000386:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000390:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2102      	movs	r1, #2
 800039a:	4618      	mov	r0, r3
 800039c:	f000 ff64 	bl	8001268 <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003a6:	f000 f8b5 	bl	8000514 <Error_Handler>
  }
}
 80003aa:	bf00      	nop
 80003ac:	3740      	adds	r7, #64	; 0x40
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
	...

080003b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003b8:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003ba:	4a12      	ldr	r2, [pc, #72]	; (8000404 <MX_USART1_UART_Init+0x50>)
 80003bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003be:	4b10      	ldr	r3, [pc, #64]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003da:	220c      	movs	r2, #12
 80003dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ea:	4805      	ldr	r0, [pc, #20]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003ec:	f001 fb5e 	bl	8001aac <HAL_UART_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003f6:	f000 f88d 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20001048 	.word	0x20001048
 8000404:	40013800 	.word	0x40013800

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <MX_GPIO_Init+0x40>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	4a0d      	ldr	r2, [pc, #52]	; (8000448 <MX_GPIO_Init+0x40>)
 8000414:	f043 0320 	orr.w	r3, r3, #32
 8000418:	6193      	str	r3, [r2, #24]
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <MX_GPIO_Init+0x40>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	f003 0320 	and.w	r3, r3, #32
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <MX_GPIO_Init+0x40>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	4a07      	ldr	r2, [pc, #28]	; (8000448 <MX_GPIO_Init+0x40>)
 800042c:	f043 0304 	orr.w	r3, r3, #4
 8000430:	6193      	str	r3, [r2, #24]
 8000432:	4b05      	ldr	r3, [pc, #20]	; (8000448 <MX_GPIO_Init+0x40>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f003 0304 	and.w	r3, r3, #4
 800043a:	603b      	str	r3, [r7, #0]
 800043c:	683b      	ldr	r3, [r7, #0]

}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	40021000 	.word	0x40021000

0800044c <StartTask02>:

/* USER CODE BEGIN 4 */
void StartTask02(void const * argument)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b086      	sub	sp, #24
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	osEvent data;
	DataType*p;
  for(;;)
  {
	 // GET DATA
	  mprintf("Task2 Running\n");
 8000454:	480c      	ldr	r0, [pc, #48]	; (8000488 <StartTask02+0x3c>)
 8000456:	f000 f863 	bl	8000520 <mprintf>
	  data = osMailGet(myQueue1Handle, osWaitForever);
 800045a:	4b0c      	ldr	r3, [pc, #48]	; (800048c <StartTask02+0x40>)
 800045c:	6819      	ldr	r1, [r3, #0]
 800045e:	f107 0308 	add.w	r3, r7, #8
 8000462:	f04f 32ff 	mov.w	r2, #4294967295
 8000466:	4618      	mov	r0, r3
 8000468:	f001 ff3e 	bl	80022e8 <osMailGet>
	  p = (DataType*)data.value.p;
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	617b      	str	r3, [r7, #20]
	  mprintf("Data: %#x\n", p->data1);
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4619      	mov	r1, r3
 8000476:	4806      	ldr	r0, [pc, #24]	; (8000490 <StartTask02+0x44>)
 8000478:	f000 f852 	bl	8000520 <mprintf>
	  osDelay(1000);
 800047c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000480:	f001 fdb3 	bl	8001fea <osDelay>
	  mprintf("Task2 Running\n");
 8000484:	e7e6      	b.n	8000454 <StartTask02+0x8>
 8000486:	bf00      	nop
 8000488:	08004db8 	.word	0x08004db8
 800048c:	2000109c 	.word	0x2000109c
 8000490:	08004dc8 	.word	0x08004dc8

08000494 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 800049c:	e7fe      	b.n	800049c <StartDefaultTask+0x8>
	...

080004a0 <StartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
	  DataType * data = osMailAlloc(myQueue1Handle, 100);
 80004a8:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <StartTask01+0x44>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2164      	movs	r1, #100	; 0x64
 80004ae:	4618      	mov	r0, r3
 80004b0:	f001 fec6 	bl	8002240 <osMailAlloc>
 80004b4:	60f8      	str	r0, [r7, #12]
	  data->data1=0x12345678;
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	4a0b      	ldr	r2, [pc, #44]	; (80004e8 <StartTask01+0x48>)
 80004ba:	601a      	str	r2, [r3, #0]
	  data->counter=0x0;
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	2200      	movs	r2, #0
 80004c0:	715a      	strb	r2, [r3, #5]
	  data->header=0x1;
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	2201      	movs	r2, #1
 80004c6:	711a      	strb	r2, [r3, #4]
  for(;;)
  {
	  mprintf("Task1 Running\n");
 80004c8:	4808      	ldr	r0, [pc, #32]	; (80004ec <StartTask01+0x4c>)
 80004ca:	f000 f829 	bl	8000520 <mprintf>
	  osMailPut(myQueue1Handle,data);
 80004ce:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <StartTask01+0x44>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	68f9      	ldr	r1, [r7, #12]
 80004d4:	4618      	mov	r0, r3
 80004d6:	f001 fec9 	bl	800226c <osMailPut>
	      osDelay(5000);
 80004da:	f241 3088 	movw	r0, #5000	; 0x1388
 80004de:	f001 fd84 	bl	8001fea <osDelay>
	  mprintf("Task1 Running\n");
 80004e2:	e7f1      	b.n	80004c8 <StartTask01+0x28>
 80004e4:	2000109c 	.word	0x2000109c
 80004e8:	12345678 	.word	0x12345678
 80004ec:	08004dd4 	.word	0x08004dd4

080004f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d101      	bne.n	8000506 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000502:	f000 f9a1 	bl	8000848 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40000800 	.word	0x40000800

08000514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000518:	b672      	cpsid	i
}
 800051a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800051c:	e7fe      	b.n	800051c <Error_Handler+0x8>
	...

08000520 <mprintf>:

UART_HandleTypeDef huart1;

char buff[40];

void mprintf(const char* format,...){
 8000520:	b40f      	push	{r0, r1, r2, r3}
 8000522:	b580      	push	{r7, lr}
 8000524:	b082      	sub	sp, #8
 8000526:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args,format);
 8000528:	f107 0314 	add.w	r3, r7, #20
 800052c:	607b      	str	r3, [r7, #4]
	vsnprintf(buff,sizeof(buff), format,args);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	693a      	ldr	r2, [r7, #16]
 8000532:	2128      	movs	r1, #40	; 0x28
 8000534:	4808      	ldr	r0, [pc, #32]	; (8000558 <mprintf+0x38>)
 8000536:	f003 ffdd 	bl	80044f4 <vsniprintf>
	va_end(args);

	HAL_UART_Transmit(&huart1, (uint8_t*)buff, 40, 1000);
 800053a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053e:	2228      	movs	r2, #40	; 0x28
 8000540:	4905      	ldr	r1, [pc, #20]	; (8000558 <mprintf+0x38>)
 8000542:	4806      	ldr	r0, [pc, #24]	; (800055c <mprintf+0x3c>)
 8000544:	f001 fb02 	bl	8001b4c <HAL_UART_Transmit>
}
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000552:	b004      	add	sp, #16
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	200010a0 	.word	0x200010a0
 800055c:	20001048 	.word	0x20001048

08000560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000566:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <HAL_MspInit+0x68>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	4a17      	ldr	r2, [pc, #92]	; (80005c8 <HAL_MspInit+0x68>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6193      	str	r3, [r2, #24]
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <HAL_MspInit+0x68>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <HAL_MspInit+0x68>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	4a11      	ldr	r2, [pc, #68]	; (80005c8 <HAL_MspInit+0x68>)
 8000584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000588:	61d3      	str	r3, [r2, #28]
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <HAL_MspInit+0x68>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	210f      	movs	r1, #15
 800059a:	f06f 0001 	mvn.w	r0, #1
 800059e:	f000 fa24 	bl	80009ea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <HAL_MspInit+0x6c>)
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_MspInit+0x6c>)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010000 	.word	0x40010000

080005d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a1c      	ldr	r2, [pc, #112]	; (800065c <HAL_UART_MspInit+0x8c>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d131      	bne.n	8000654 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <HAL_UART_MspInit+0x90>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a1a      	ldr	r2, [pc, #104]	; (8000660 <HAL_UART_MspInit+0x90>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b18      	ldr	r3, [pc, #96]	; (8000660 <HAL_UART_MspInit+0x90>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	4b15      	ldr	r3, [pc, #84]	; (8000660 <HAL_UART_MspInit+0x90>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a14      	ldr	r2, [pc, #80]	; (8000660 <HAL_UART_MspInit+0x90>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <HAL_UART_MspInit+0x90>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000624:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000626:	2302      	movs	r3, #2
 8000628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800062a:	2303      	movs	r3, #3
 800062c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	4619      	mov	r1, r3
 8000634:	480b      	ldr	r0, [pc, #44]	; (8000664 <HAL_UART_MspInit+0x94>)
 8000636:	f000 fa03 	bl	8000a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800063a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800063e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	4619      	mov	r1, r3
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <HAL_UART_MspInit+0x94>)
 8000650:	f000 f9f6 	bl	8000a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000654:	bf00      	nop
 8000656:	3720      	adds	r7, #32
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40013800 	.word	0x40013800
 8000660:	40021000 	.word	0x40021000
 8000664:	40010800 	.word	0x40010800

08000668 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08c      	sub	sp, #48	; 0x30
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000678:	2200      	movs	r2, #0
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	201e      	movs	r0, #30
 800067e:	f000 f9b4 	bl	80009ea <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000682:	201e      	movs	r0, #30
 8000684:	f000 f9cd 	bl	8000a22 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <HAL_InitTick+0xa0>)
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	4a1e      	ldr	r2, [pc, #120]	; (8000708 <HAL_InitTick+0xa0>)
 800068e:	f043 0304 	orr.w	r3, r3, #4
 8000692:	61d3      	str	r3, [r2, #28]
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <HAL_InitTick+0xa0>)
 8000696:	69db      	ldr	r3, [r3, #28]
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006a0:	f107 0210 	add.w	r2, r7, #16
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 ff4c 	bl	8001548 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80006b0:	f000 ff22 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 80006b4:	4603      	mov	r3, r0
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006bc:	4a13      	ldr	r2, [pc, #76]	; (800070c <HAL_InitTick+0xa4>)
 80006be:	fba2 2303 	umull	r2, r3, r2, r3
 80006c2:	0c9b      	lsrs	r3, r3, #18
 80006c4:	3b01      	subs	r3, #1
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <HAL_InitTick+0xa8>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <HAL_InitTick+0xac>)
 80006cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <HAL_InitTick+0xa8>)
 80006d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006d4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <HAL_InitTick+0xa8>)
 80006d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006da:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_InitTick+0xa8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <HAL_InitTick+0xa8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <HAL_InitTick+0xa8>)
 80006ea:	f000 ff7b 	bl	80015e4 <HAL_TIM_Base_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d104      	bne.n	80006fe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80006f4:	4806      	ldr	r0, [pc, #24]	; (8000710 <HAL_InitTick+0xa8>)
 80006f6:	f000 ffcd 	bl	8001694 <HAL_TIM_Base_Start_IT>
 80006fa:	4603      	mov	r3, r0
 80006fc:	e000      	b.n	8000700 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
}
 8000700:	4618      	mov	r0, r3
 8000702:	3730      	adds	r7, #48	; 0x30
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40021000 	.word	0x40021000
 800070c:	431bde83 	.word	0x431bde83
 8000710:	200010c8 	.word	0x200010c8
 8000714:	40000800 	.word	0x40000800

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800071c:	e7fe      	b.n	800071c <NMI_Handler+0x4>

0800071e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <MemManage_Handler+0x4>

0800072a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <BusFault_Handler+0x4>

08000730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <UsageFault_Handler+0x4>

08000736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
	...

08000744 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000748:	4802      	ldr	r0, [pc, #8]	; (8000754 <TIM4_IRQHandler+0x10>)
 800074a:	f001 f803 	bl	8001754 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200010c8 	.word	0x200010c8

08000758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000760:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <_sbrk+0x5c>)
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <_sbrk+0x60>)
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <_sbrk+0x64>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d102      	bne.n	800077a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <_sbrk+0x64>)
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <_sbrk+0x68>)
 8000778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <_sbrk+0x64>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	693a      	ldr	r2, [r7, #16]
 8000784:	429a      	cmp	r2, r3
 8000786:	d207      	bcs.n	8000798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000788:	f003 fe48 	bl	800441c <__errno>
 800078c:	4603      	mov	r3, r0
 800078e:	220c      	movs	r2, #12
 8000790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000792:	f04f 33ff 	mov.w	r3, #4294967295
 8000796:	e009      	b.n	80007ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <_sbrk+0x64>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <_sbrk+0x64>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4413      	add	r3, r2
 80007a6:	4a05      	ldr	r2, [pc, #20]	; (80007bc <_sbrk+0x64>)
 80007a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007aa:	68fb      	ldr	r3, [r7, #12]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000c000 	.word	0x2000c000
 80007b8:	00000400 	.word	0x00000400
 80007bc:	200002e4 	.word	0x200002e4
 80007c0:	20001128 	.word	0x20001128

080007c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007d0:	f7ff fff8 	bl	80007c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d4:	480b      	ldr	r0, [pc, #44]	; (8000804 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007d6:	490c      	ldr	r1, [pc, #48]	; (8000808 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007d8:	4a0c      	ldr	r2, [pc, #48]	; (800080c <LoopFillZerobss+0x16>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007dc:	e002      	b.n	80007e4 <LoopCopyDataInit>

080007de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e2:	3304      	adds	r3, #4

080007e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e8:	d3f9      	bcc.n	80007de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ea:	4a09      	ldr	r2, [pc, #36]	; (8000810 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007ec:	4c09      	ldr	r4, [pc, #36]	; (8000814 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f0:	e001      	b.n	80007f6 <LoopFillZerobss>

080007f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f4:	3204      	adds	r2, #4

080007f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f8:	d3fb      	bcc.n	80007f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007fa:	f003 fe15 	bl	8004428 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007fe:	f7ff fd2f 	bl	8000260 <main>
  bx lr
 8000802:	4770      	bx	lr
  ldr r0, =_sdata
 8000804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000808:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800080c:	08004e54 	.word	0x08004e54
  ldr r2, =_sbss
 8000810:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000814:	20001124 	.word	0x20001124

08000818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000818:	e7fe      	b.n	8000818 <ADC1_2_IRQHandler>
	...

0800081c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_Init+0x28>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a07      	ldr	r2, [pc, #28]	; (8000844 <HAL_Init+0x28>)
 8000826:	f043 0310 	orr.w	r3, r3, #16
 800082a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082c:	2003      	movs	r0, #3
 800082e:	f000 f8d1 	bl	80009d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000832:	200f      	movs	r0, #15
 8000834:	f7ff ff18 	bl	8000668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000838:	f7ff fe92 	bl	8000560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40022000 	.word	0x40022000

08000848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_IncTick+0x1c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <HAL_IncTick+0x20>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4413      	add	r3, r2
 8000858:	4a03      	ldr	r2, [pc, #12]	; (8000868 <HAL_IncTick+0x20>)
 800085a:	6013      	str	r3, [r2, #0]
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	20000008 	.word	0x20000008
 8000868:	20001110 	.word	0x20001110

0800086c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return uwTick;
 8000870:	4b02      	ldr	r3, [pc, #8]	; (800087c <HAL_GetTick+0x10>)
 8000872:	681b      	ldr	r3, [r3, #0]
}
 8000874:	4618      	mov	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	20001110 	.word	0x20001110

08000880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800089c:	4013      	ands	r3, r2
 800089e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008b2:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <__NVIC_SetPriorityGrouping+0x44>)
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	60d3      	str	r3, [r2, #12]
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <__NVIC_GetPriorityGrouping+0x18>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	f003 0307 	and.w	r3, r3, #7
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	db0b      	blt.n	800090e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	f003 021f 	and.w	r2, r3, #31
 80008fc:	4906      	ldr	r1, [pc, #24]	; (8000918 <__NVIC_EnableIRQ+0x34>)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	095b      	lsrs	r3, r3, #5
 8000904:	2001      	movs	r0, #1
 8000906:	fa00 f202 	lsl.w	r2, r0, r2
 800090a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	e000e100 	.word	0xe000e100

0800091c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092c:	2b00      	cmp	r3, #0
 800092e:	db0a      	blt.n	8000946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	b2da      	uxtb	r2, r3
 8000934:	490c      	ldr	r1, [pc, #48]	; (8000968 <__NVIC_SetPriority+0x4c>)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	0112      	lsls	r2, r2, #4
 800093c:	b2d2      	uxtb	r2, r2
 800093e:	440b      	add	r3, r1
 8000940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000944:	e00a      	b.n	800095c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	b2da      	uxtb	r2, r3
 800094a:	4908      	ldr	r1, [pc, #32]	; (800096c <__NVIC_SetPriority+0x50>)
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	f003 030f 	and.w	r3, r3, #15
 8000952:	3b04      	subs	r3, #4
 8000954:	0112      	lsls	r2, r2, #4
 8000956:	b2d2      	uxtb	r2, r2
 8000958:	440b      	add	r3, r1
 800095a:	761a      	strb	r2, [r3, #24]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000e100 	.word	0xe000e100
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000970:	b480      	push	{r7}
 8000972:	b089      	sub	sp, #36	; 0x24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	f1c3 0307 	rsb	r3, r3, #7
 800098a:	2b04      	cmp	r3, #4
 800098c:	bf28      	it	cs
 800098e:	2304      	movcs	r3, #4
 8000990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3304      	adds	r3, #4
 8000996:	2b06      	cmp	r3, #6
 8000998:	d902      	bls.n	80009a0 <NVIC_EncodePriority+0x30>
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3b03      	subs	r3, #3
 800099e:	e000      	b.n	80009a2 <NVIC_EncodePriority+0x32>
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	f04f 32ff 	mov.w	r2, #4294967295
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43da      	mvns	r2, r3
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	401a      	ands	r2, r3
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b8:	f04f 31ff 	mov.w	r1, #4294967295
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	fa01 f303 	lsl.w	r3, r1, r3
 80009c2:	43d9      	mvns	r1, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	4313      	orrs	r3, r2
         );
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3724      	adds	r7, #36	; 0x24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ff4f 	bl	8000880 <__NVIC_SetPriorityGrouping>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b086      	sub	sp, #24
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
 80009f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009fc:	f7ff ff64 	bl	80008c8 <__NVIC_GetPriorityGrouping>
 8000a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	68b9      	ldr	r1, [r7, #8]
 8000a06:	6978      	ldr	r0, [r7, #20]
 8000a08:	f7ff ffb2 	bl	8000970 <NVIC_EncodePriority>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff81 	bl	800091c <__NVIC_SetPriority>
}
 8000a1a:	bf00      	nop
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	4603      	mov	r3, r0
 8000a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff57 	bl	80008e4 <__NVIC_EnableIRQ>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b08b      	sub	sp, #44	; 0x2c
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a52:	e179      	b.n	8000d48 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a54:	2201      	movs	r2, #1
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	69fa      	ldr	r2, [r7, #28]
 8000a64:	4013      	ands	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	f040 8168 	bne.w	8000d42 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	4aa0      	ldr	r2, [pc, #640]	; (8000cf8 <HAL_GPIO_Init+0x2b8>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d05e      	beq.n	8000b3a <HAL_GPIO_Init+0xfa>
 8000a7c:	4a9e      	ldr	r2, [pc, #632]	; (8000cf8 <HAL_GPIO_Init+0x2b8>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d875      	bhi.n	8000b6e <HAL_GPIO_Init+0x12e>
 8000a82:	4a9e      	ldr	r2, [pc, #632]	; (8000cfc <HAL_GPIO_Init+0x2bc>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d058      	beq.n	8000b3a <HAL_GPIO_Init+0xfa>
 8000a88:	4a9c      	ldr	r2, [pc, #624]	; (8000cfc <HAL_GPIO_Init+0x2bc>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d86f      	bhi.n	8000b6e <HAL_GPIO_Init+0x12e>
 8000a8e:	4a9c      	ldr	r2, [pc, #624]	; (8000d00 <HAL_GPIO_Init+0x2c0>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d052      	beq.n	8000b3a <HAL_GPIO_Init+0xfa>
 8000a94:	4a9a      	ldr	r2, [pc, #616]	; (8000d00 <HAL_GPIO_Init+0x2c0>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d869      	bhi.n	8000b6e <HAL_GPIO_Init+0x12e>
 8000a9a:	4a9a      	ldr	r2, [pc, #616]	; (8000d04 <HAL_GPIO_Init+0x2c4>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d04c      	beq.n	8000b3a <HAL_GPIO_Init+0xfa>
 8000aa0:	4a98      	ldr	r2, [pc, #608]	; (8000d04 <HAL_GPIO_Init+0x2c4>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d863      	bhi.n	8000b6e <HAL_GPIO_Init+0x12e>
 8000aa6:	4a98      	ldr	r2, [pc, #608]	; (8000d08 <HAL_GPIO_Init+0x2c8>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d046      	beq.n	8000b3a <HAL_GPIO_Init+0xfa>
 8000aac:	4a96      	ldr	r2, [pc, #600]	; (8000d08 <HAL_GPIO_Init+0x2c8>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d85d      	bhi.n	8000b6e <HAL_GPIO_Init+0x12e>
 8000ab2:	2b12      	cmp	r3, #18
 8000ab4:	d82a      	bhi.n	8000b0c <HAL_GPIO_Init+0xcc>
 8000ab6:	2b12      	cmp	r3, #18
 8000ab8:	d859      	bhi.n	8000b6e <HAL_GPIO_Init+0x12e>
 8000aba:	a201      	add	r2, pc, #4	; (adr r2, 8000ac0 <HAL_GPIO_Init+0x80>)
 8000abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac0:	08000b3b 	.word	0x08000b3b
 8000ac4:	08000b15 	.word	0x08000b15
 8000ac8:	08000b27 	.word	0x08000b27
 8000acc:	08000b69 	.word	0x08000b69
 8000ad0:	08000b6f 	.word	0x08000b6f
 8000ad4:	08000b6f 	.word	0x08000b6f
 8000ad8:	08000b6f 	.word	0x08000b6f
 8000adc:	08000b6f 	.word	0x08000b6f
 8000ae0:	08000b6f 	.word	0x08000b6f
 8000ae4:	08000b6f 	.word	0x08000b6f
 8000ae8:	08000b6f 	.word	0x08000b6f
 8000aec:	08000b6f 	.word	0x08000b6f
 8000af0:	08000b6f 	.word	0x08000b6f
 8000af4:	08000b6f 	.word	0x08000b6f
 8000af8:	08000b6f 	.word	0x08000b6f
 8000afc:	08000b6f 	.word	0x08000b6f
 8000b00:	08000b6f 	.word	0x08000b6f
 8000b04:	08000b1d 	.word	0x08000b1d
 8000b08:	08000b31 	.word	0x08000b31
 8000b0c:	4a7f      	ldr	r2, [pc, #508]	; (8000d0c <HAL_GPIO_Init+0x2cc>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d013      	beq.n	8000b3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b12:	e02c      	b.n	8000b6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	623b      	str	r3, [r7, #32]
          break;
 8000b1a:	e029      	b.n	8000b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	3304      	adds	r3, #4
 8000b22:	623b      	str	r3, [r7, #32]
          break;
 8000b24:	e024      	b.n	8000b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	3308      	adds	r3, #8
 8000b2c:	623b      	str	r3, [r7, #32]
          break;
 8000b2e:	e01f      	b.n	8000b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	330c      	adds	r3, #12
 8000b36:	623b      	str	r3, [r7, #32]
          break;
 8000b38:	e01a      	b.n	8000b70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d102      	bne.n	8000b48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b42:	2304      	movs	r3, #4
 8000b44:	623b      	str	r3, [r7, #32]
          break;
 8000b46:	e013      	b.n	8000b70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d105      	bne.n	8000b5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b50:	2308      	movs	r3, #8
 8000b52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	69fa      	ldr	r2, [r7, #28]
 8000b58:	611a      	str	r2, [r3, #16]
          break;
 8000b5a:	e009      	b.n	8000b70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b5c:	2308      	movs	r3, #8
 8000b5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	69fa      	ldr	r2, [r7, #28]
 8000b64:	615a      	str	r2, [r3, #20]
          break;
 8000b66:	e003      	b.n	8000b70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
          break;
 8000b6c:	e000      	b.n	8000b70 <HAL_GPIO_Init+0x130>
          break;
 8000b6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	2bff      	cmp	r3, #255	; 0xff
 8000b74:	d801      	bhi.n	8000b7a <HAL_GPIO_Init+0x13a>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	e001      	b.n	8000b7e <HAL_GPIO_Init+0x13e>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	2bff      	cmp	r3, #255	; 0xff
 8000b84:	d802      	bhi.n	8000b8c <HAL_GPIO_Init+0x14c>
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	e002      	b.n	8000b92 <HAL_GPIO_Init+0x152>
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8e:	3b08      	subs	r3, #8
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	210f      	movs	r1, #15
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	6a39      	ldr	r1, [r7, #32]
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	431a      	orrs	r2, r3
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 80c1 	beq.w	8000d42 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bc0:	4b53      	ldr	r3, [pc, #332]	; (8000d10 <HAL_GPIO_Init+0x2d0>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a52      	ldr	r2, [pc, #328]	; (8000d10 <HAL_GPIO_Init+0x2d0>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b50      	ldr	r3, [pc, #320]	; (8000d10 <HAL_GPIO_Init+0x2d0>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bd8:	4a4e      	ldr	r2, [pc, #312]	; (8000d14 <HAL_GPIO_Init+0x2d4>)
 8000bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bdc:	089b      	lsrs	r3, r3, #2
 8000bde:	3302      	adds	r3, #2
 8000be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	220f      	movs	r2, #15
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a46      	ldr	r2, [pc, #280]	; (8000d18 <HAL_GPIO_Init+0x2d8>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d01f      	beq.n	8000c44 <HAL_GPIO_Init+0x204>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a45      	ldr	r2, [pc, #276]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d019      	beq.n	8000c40 <HAL_GPIO_Init+0x200>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a44      	ldr	r2, [pc, #272]	; (8000d20 <HAL_GPIO_Init+0x2e0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d013      	beq.n	8000c3c <HAL_GPIO_Init+0x1fc>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a43      	ldr	r2, [pc, #268]	; (8000d24 <HAL_GPIO_Init+0x2e4>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d00d      	beq.n	8000c38 <HAL_GPIO_Init+0x1f8>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a42      	ldr	r2, [pc, #264]	; (8000d28 <HAL_GPIO_Init+0x2e8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d007      	beq.n	8000c34 <HAL_GPIO_Init+0x1f4>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a41      	ldr	r2, [pc, #260]	; (8000d2c <HAL_GPIO_Init+0x2ec>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d101      	bne.n	8000c30 <HAL_GPIO_Init+0x1f0>
 8000c2c:	2305      	movs	r3, #5
 8000c2e:	e00a      	b.n	8000c46 <HAL_GPIO_Init+0x206>
 8000c30:	2306      	movs	r3, #6
 8000c32:	e008      	b.n	8000c46 <HAL_GPIO_Init+0x206>
 8000c34:	2304      	movs	r3, #4
 8000c36:	e006      	b.n	8000c46 <HAL_GPIO_Init+0x206>
 8000c38:	2303      	movs	r3, #3
 8000c3a:	e004      	b.n	8000c46 <HAL_GPIO_Init+0x206>
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	e002      	b.n	8000c46 <HAL_GPIO_Init+0x206>
 8000c40:	2301      	movs	r3, #1
 8000c42:	e000      	b.n	8000c46 <HAL_GPIO_Init+0x206>
 8000c44:	2300      	movs	r3, #0
 8000c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c48:	f002 0203 	and.w	r2, r2, #3
 8000c4c:	0092      	lsls	r2, r2, #2
 8000c4e:	4093      	lsls	r3, r2
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c56:	492f      	ldr	r1, [pc, #188]	; (8000d14 <HAL_GPIO_Init+0x2d4>)
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d006      	beq.n	8000c7e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c70:	4b2f      	ldr	r3, [pc, #188]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	492e      	ldr	r1, [pc, #184]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	608b      	str	r3, [r1, #8]
 8000c7c:	e006      	b.n	8000c8c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c7e:	4b2c      	ldr	r3, [pc, #176]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	492a      	ldr	r1, [pc, #168]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000c88:	4013      	ands	r3, r2
 8000c8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d006      	beq.n	8000ca6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c98:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	4924      	ldr	r1, [pc, #144]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	60cb      	str	r3, [r1, #12]
 8000ca4:	e006      	b.n	8000cb4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ca6:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000ca8:	68da      	ldr	r2, [r3, #12]
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	43db      	mvns	r3, r3
 8000cae:	4920      	ldr	r1, [pc, #128]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d006      	beq.n	8000cce <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	491a      	ldr	r1, [pc, #104]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	604b      	str	r3, [r1, #4]
 8000ccc:	e006      	b.n	8000cdc <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	4916      	ldr	r1, [pc, #88]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000cd8:	4013      	ands	r3, r2
 8000cda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d025      	beq.n	8000d34 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4910      	ldr	r1, [pc, #64]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	600b      	str	r3, [r1, #0]
 8000cf4:	e025      	b.n	8000d42 <HAL_GPIO_Init+0x302>
 8000cf6:	bf00      	nop
 8000cf8:	10320000 	.word	0x10320000
 8000cfc:	10310000 	.word	0x10310000
 8000d00:	10220000 	.word	0x10220000
 8000d04:	10210000 	.word	0x10210000
 8000d08:	10120000 	.word	0x10120000
 8000d0c:	10110000 	.word	0x10110000
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40010000 	.word	0x40010000
 8000d18:	40010800 	.word	0x40010800
 8000d1c:	40010c00 	.word	0x40010c00
 8000d20:	40011000 	.word	0x40011000
 8000d24:	40011400 	.word	0x40011400
 8000d28:	40011800 	.word	0x40011800
 8000d2c:	40011c00 	.word	0x40011c00
 8000d30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_GPIO_Init+0x324>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	4909      	ldr	r1, [pc, #36]	; (8000d64 <HAL_GPIO_Init+0x324>)
 8000d3e:	4013      	ands	r3, r2
 8000d40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	3301      	adds	r3, #1
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f47f ae7e 	bne.w	8000a54 <HAL_GPIO_Init+0x14>
  }
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	372c      	adds	r7, #44	; 0x2c
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	40010400 	.word	0x40010400

08000d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d101      	bne.n	8000d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e26c      	b.n	8001254 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 8087 	beq.w	8000e96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d88:	4b92      	ldr	r3, [pc, #584]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 030c 	and.w	r3, r3, #12
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	d00c      	beq.n	8000dae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d94:	4b8f      	ldr	r3, [pc, #572]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 030c 	and.w	r3, r3, #12
 8000d9c:	2b08      	cmp	r3, #8
 8000d9e:	d112      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x5e>
 8000da0:	4b8c      	ldr	r3, [pc, #560]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dac:	d10b      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dae:	4b89      	ldr	r3, [pc, #548]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d06c      	beq.n	8000e94 <HAL_RCC_OscConfig+0x12c>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d168      	bne.n	8000e94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e246      	b.n	8001254 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dce:	d106      	bne.n	8000dde <HAL_RCC_OscConfig+0x76>
 8000dd0:	4b80      	ldr	r3, [pc, #512]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a7f      	ldr	r2, [pc, #508]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	e02e      	b.n	8000e3c <HAL_RCC_OscConfig+0xd4>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10c      	bne.n	8000e00 <HAL_RCC_OscConfig+0x98>
 8000de6:	4b7b      	ldr	r3, [pc, #492]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a7a      	ldr	r2, [pc, #488]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	4b78      	ldr	r3, [pc, #480]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a77      	ldr	r2, [pc, #476]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000df8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e01d      	b.n	8000e3c <HAL_RCC_OscConfig+0xd4>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e08:	d10c      	bne.n	8000e24 <HAL_RCC_OscConfig+0xbc>
 8000e0a:	4b72      	ldr	r3, [pc, #456]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a71      	ldr	r2, [pc, #452]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	4b6f      	ldr	r3, [pc, #444]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a6e      	ldr	r2, [pc, #440]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	e00b      	b.n	8000e3c <HAL_RCC_OscConfig+0xd4>
 8000e24:	4b6b      	ldr	r3, [pc, #428]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a6a      	ldr	r2, [pc, #424]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	4b68      	ldr	r3, [pc, #416]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a67      	ldr	r2, [pc, #412]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d013      	beq.n	8000e6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e44:	f7ff fd12 	bl	800086c <HAL_GetTick>
 8000e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4a:	e008      	b.n	8000e5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e4c:	f7ff fd0e 	bl	800086c <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b64      	cmp	r3, #100	; 0x64
 8000e58:	d901      	bls.n	8000e5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e1fa      	b.n	8001254 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e5e:	4b5d      	ldr	r3, [pc, #372]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0f0      	beq.n	8000e4c <HAL_RCC_OscConfig+0xe4>
 8000e6a:	e014      	b.n	8000e96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fcfe 	bl	800086c <HAL_GetTick>
 8000e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e72:	e008      	b.n	8000e86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e74:	f7ff fcfa 	bl	800086c <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b64      	cmp	r3, #100	; 0x64
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e1e6      	b.n	8001254 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e86:	4b53      	ldr	r3, [pc, #332]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1f0      	bne.n	8000e74 <HAL_RCC_OscConfig+0x10c>
 8000e92:	e000      	b.n	8000e96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d063      	beq.n	8000f6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ea2:	4b4c      	ldr	r3, [pc, #304]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 030c 	and.w	r3, r3, #12
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d00b      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eae:	4b49      	ldr	r3, [pc, #292]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 030c 	and.w	r3, r3, #12
 8000eb6:	2b08      	cmp	r3, #8
 8000eb8:	d11c      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x18c>
 8000eba:	4b46      	ldr	r3, [pc, #280]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d116      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ec6:	4b43      	ldr	r3, [pc, #268]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d005      	beq.n	8000ede <HAL_RCC_OscConfig+0x176>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d001      	beq.n	8000ede <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e1ba      	b.n	8001254 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ede:	4b3d      	ldr	r3, [pc, #244]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	4939      	ldr	r1, [pc, #228]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef2:	e03a      	b.n	8000f6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d020      	beq.n	8000f3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000efc:	4b36      	ldr	r3, [pc, #216]	; (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f02:	f7ff fcb3 	bl	800086c <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f08:	e008      	b.n	8000f1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f0a:	f7ff fcaf 	bl	800086c <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e19b      	b.n	8001254 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0f0      	beq.n	8000f0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f28:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	4927      	ldr	r1, [pc, #156]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	600b      	str	r3, [r1, #0]
 8000f3c:	e015      	b.n	8000f6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f3e:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f44:	f7ff fc92 	bl	800086c <HAL_GetTick>
 8000f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f4a:	e008      	b.n	8000f5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f4c:	f7ff fc8e 	bl	800086c <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d901      	bls.n	8000f5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e17a      	b.n	8001254 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1f0      	bne.n	8000f4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0308 	and.w	r3, r3, #8
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d03a      	beq.n	8000fec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d019      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_RCC_OscConfig+0x274>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f84:	f7ff fc72 	bl	800086c <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f8c:	f7ff fc6e 	bl	800086c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e15a      	b.n	8001254 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f0      	beq.n	8000f8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000faa:	2001      	movs	r0, #1
 8000fac:	f000 fafc 	bl	80015a8 <RCC_Delay>
 8000fb0:	e01c      	b.n	8000fec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_RCC_OscConfig+0x274>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb8:	f7ff fc58 	bl	800086c <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fbe:	e00f      	b.n	8000fe0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fc0:	f7ff fc54 	bl	800086c <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d908      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e140      	b.n	8001254 <HAL_RCC_OscConfig+0x4ec>
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	42420000 	.word	0x42420000
 8000fdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe0:	4b9e      	ldr	r3, [pc, #632]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1e9      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 80a6 	beq.w	8001146 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ffe:	4b97      	ldr	r3, [pc, #604]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10d      	bne.n	8001026 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	4b94      	ldr	r3, [pc, #592]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a93      	ldr	r2, [pc, #588]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001014:	61d3      	str	r3, [r2, #28]
 8001016:	4b91      	ldr	r3, [pc, #580]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001022:	2301      	movs	r3, #1
 8001024:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001026:	4b8e      	ldr	r3, [pc, #568]	; (8001260 <HAL_RCC_OscConfig+0x4f8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102e:	2b00      	cmp	r3, #0
 8001030:	d118      	bne.n	8001064 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001032:	4b8b      	ldr	r3, [pc, #556]	; (8001260 <HAL_RCC_OscConfig+0x4f8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a8a      	ldr	r2, [pc, #552]	; (8001260 <HAL_RCC_OscConfig+0x4f8>)
 8001038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800103e:	f7ff fc15 	bl	800086c <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001046:	f7ff fc11 	bl	800086c <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b64      	cmp	r3, #100	; 0x64
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e0fd      	b.n	8001254 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001058:	4b81      	ldr	r3, [pc, #516]	; (8001260 <HAL_RCC_OscConfig+0x4f8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f0      	beq.n	8001046 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d106      	bne.n	800107a <HAL_RCC_OscConfig+0x312>
 800106c:	4b7b      	ldr	r3, [pc, #492]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	4a7a      	ldr	r2, [pc, #488]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6213      	str	r3, [r2, #32]
 8001078:	e02d      	b.n	80010d6 <HAL_RCC_OscConfig+0x36e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10c      	bne.n	800109c <HAL_RCC_OscConfig+0x334>
 8001082:	4b76      	ldr	r3, [pc, #472]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4a75      	ldr	r2, [pc, #468]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 8001088:	f023 0301 	bic.w	r3, r3, #1
 800108c:	6213      	str	r3, [r2, #32]
 800108e:	4b73      	ldr	r3, [pc, #460]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 8001090:	6a1b      	ldr	r3, [r3, #32]
 8001092:	4a72      	ldr	r2, [pc, #456]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 8001094:	f023 0304 	bic.w	r3, r3, #4
 8001098:	6213      	str	r3, [r2, #32]
 800109a:	e01c      	b.n	80010d6 <HAL_RCC_OscConfig+0x36e>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	2b05      	cmp	r3, #5
 80010a2:	d10c      	bne.n	80010be <HAL_RCC_OscConfig+0x356>
 80010a4:	4b6d      	ldr	r3, [pc, #436]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	4a6c      	ldr	r2, [pc, #432]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	6213      	str	r3, [r2, #32]
 80010b0:	4b6a      	ldr	r3, [pc, #424]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	4a69      	ldr	r2, [pc, #420]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6213      	str	r3, [r2, #32]
 80010bc:	e00b      	b.n	80010d6 <HAL_RCC_OscConfig+0x36e>
 80010be:	4b67      	ldr	r3, [pc, #412]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	4a66      	ldr	r2, [pc, #408]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 80010c4:	f023 0301 	bic.w	r3, r3, #1
 80010c8:	6213      	str	r3, [r2, #32]
 80010ca:	4b64      	ldr	r3, [pc, #400]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	4a63      	ldr	r2, [pc, #396]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 80010d0:	f023 0304 	bic.w	r3, r3, #4
 80010d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d015      	beq.n	800110a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010de:	f7ff fbc5 	bl	800086c <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e4:	e00a      	b.n	80010fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e6:	f7ff fbc1 	bl	800086c <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e0ab      	b.n	8001254 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010fc:	4b57      	ldr	r3, [pc, #348]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0ee      	beq.n	80010e6 <HAL_RCC_OscConfig+0x37e>
 8001108:	e014      	b.n	8001134 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110a:	f7ff fbaf 	bl	800086c <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001110:	e00a      	b.n	8001128 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001112:	f7ff fbab 	bl	800086c <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001120:	4293      	cmp	r3, r2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e095      	b.n	8001254 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001128:	4b4c      	ldr	r3, [pc, #304]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1ee      	bne.n	8001112 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001134:	7dfb      	ldrb	r3, [r7, #23]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d105      	bne.n	8001146 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800113a:	4b48      	ldr	r3, [pc, #288]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	4a47      	ldr	r2, [pc, #284]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 8001140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001144:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 8081 	beq.w	8001252 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001150:	4b42      	ldr	r3, [pc, #264]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 030c 	and.w	r3, r3, #12
 8001158:	2b08      	cmp	r3, #8
 800115a:	d061      	beq.n	8001220 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d146      	bne.n	80011f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001164:	4b3f      	ldr	r3, [pc, #252]	; (8001264 <HAL_RCC_OscConfig+0x4fc>)
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116a:	f7ff fb7f 	bl	800086c <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001172:	f7ff fb7b 	bl	800086c <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e067      	b.n	8001254 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001184:	4b35      	ldr	r3, [pc, #212]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1f0      	bne.n	8001172 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001198:	d108      	bne.n	80011ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800119a:	4b30      	ldr	r3, [pc, #192]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	492d      	ldr	r1, [pc, #180]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011ac:	4b2b      	ldr	r3, [pc, #172]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a19      	ldr	r1, [r3, #32]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	430b      	orrs	r3, r1
 80011be:	4927      	ldr	r1, [pc, #156]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 80011c0:	4313      	orrs	r3, r2
 80011c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011c4:	4b27      	ldr	r3, [pc, #156]	; (8001264 <HAL_RCC_OscConfig+0x4fc>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ca:	f7ff fb4f 	bl	800086c <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011d2:	f7ff fb4b 	bl	800086c <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e037      	b.n	8001254 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0x46a>
 80011f0:	e02f      	b.n	8001252 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <HAL_RCC_OscConfig+0x4fc>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fb38 	bl	800086c <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001200:	f7ff fb34 	bl	800086c <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e020      	b.n	8001254 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f0      	bne.n	8001200 <HAL_RCC_OscConfig+0x498>
 800121e:	e018      	b.n	8001252 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d101      	bne.n	800122c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e013      	b.n	8001254 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_RCC_OscConfig+0x4f4>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	429a      	cmp	r2, r3
 800123e:	d106      	bne.n	800124e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800124a:	429a      	cmp	r2, r3
 800124c:	d001      	beq.n	8001252 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021000 	.word	0x40021000
 8001260:	40007000 	.word	0x40007000
 8001264:	42420060 	.word	0x42420060

08001268 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e0d0      	b.n	800141e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800127c:	4b6a      	ldr	r3, [pc, #424]	; (8001428 <HAL_RCC_ClockConfig+0x1c0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	d910      	bls.n	80012ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128a:	4b67      	ldr	r3, [pc, #412]	; (8001428 <HAL_RCC_ClockConfig+0x1c0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f023 0207 	bic.w	r2, r3, #7
 8001292:	4965      	ldr	r1, [pc, #404]	; (8001428 <HAL_RCC_ClockConfig+0x1c0>)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	4313      	orrs	r3, r2
 8001298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800129a:	4b63      	ldr	r3, [pc, #396]	; (8001428 <HAL_RCC_ClockConfig+0x1c0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d001      	beq.n	80012ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0b8      	b.n	800141e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d020      	beq.n	80012fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012c4:	4b59      	ldr	r3, [pc, #356]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	4a58      	ldr	r2, [pc, #352]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0308 	and.w	r3, r3, #8
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012dc:	4b53      	ldr	r3, [pc, #332]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	4a52      	ldr	r2, [pc, #328]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e8:	4b50      	ldr	r3, [pc, #320]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	494d      	ldr	r1, [pc, #308]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d040      	beq.n	8001388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d107      	bne.n	800131e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	4b47      	ldr	r3, [pc, #284]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d115      	bne.n	8001346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e07f      	b.n	800141e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d107      	bne.n	8001336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001326:	4b41      	ldr	r3, [pc, #260]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d109      	bne.n	8001346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e073      	b.n	800141e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001336:	4b3d      	ldr	r3, [pc, #244]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e06b      	b.n	800141e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001346:	4b39      	ldr	r3, [pc, #228]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f023 0203 	bic.w	r2, r3, #3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	4936      	ldr	r1, [pc, #216]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001358:	f7ff fa88 	bl	800086c <HAL_GetTick>
 800135c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135e:	e00a      	b.n	8001376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001360:	f7ff fa84 	bl	800086c <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	f241 3288 	movw	r2, #5000	; 0x1388
 800136e:	4293      	cmp	r3, r2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e053      	b.n	800141e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001376:	4b2d      	ldr	r3, [pc, #180]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 020c 	and.w	r2, r3, #12
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	429a      	cmp	r2, r3
 8001386:	d1eb      	bne.n	8001360 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <HAL_RCC_ClockConfig+0x1c0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d210      	bcs.n	80013b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001396:	4b24      	ldr	r3, [pc, #144]	; (8001428 <HAL_RCC_ClockConfig+0x1c0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 0207 	bic.w	r2, r3, #7
 800139e:	4922      	ldr	r1, [pc, #136]	; (8001428 <HAL_RCC_ClockConfig+0x1c0>)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <HAL_RCC_ClockConfig+0x1c0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e032      	b.n	800141e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d008      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	4916      	ldr	r1, [pc, #88]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d009      	beq.n	80013f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	490e      	ldr	r1, [pc, #56]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013f6:	f000 f821 	bl	800143c <HAL_RCC_GetSysClockFreq>
 80013fa:	4602      	mov	r2, r0
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_RCC_ClockConfig+0x1c4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	490a      	ldr	r1, [pc, #40]	; (8001430 <HAL_RCC_ClockConfig+0x1c8>)
 8001408:	5ccb      	ldrb	r3, [r1, r3]
 800140a:	fa22 f303 	lsr.w	r3, r2, r3
 800140e:	4a09      	ldr	r2, [pc, #36]	; (8001434 <HAL_RCC_ClockConfig+0x1cc>)
 8001410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_RCC_ClockConfig+0x1d0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f926 	bl	8000668 <HAL_InitTick>

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40022000 	.word	0x40022000
 800142c:	40021000 	.word	0x40021000
 8001430:	08004dec 	.word	0x08004dec
 8001434:	20000000 	.word	0x20000000
 8001438:	20000004 	.word	0x20000004

0800143c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800143c:	b480      	push	{r7}
 800143e:	b087      	sub	sp, #28
 8001440:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001456:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f003 030c 	and.w	r3, r3, #12
 8001462:	2b04      	cmp	r3, #4
 8001464:	d002      	beq.n	800146c <HAL_RCC_GetSysClockFreq+0x30>
 8001466:	2b08      	cmp	r3, #8
 8001468:	d003      	beq.n	8001472 <HAL_RCC_GetSysClockFreq+0x36>
 800146a:	e027      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800146e:	613b      	str	r3, [r7, #16]
      break;
 8001470:	e027      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	0c9b      	lsrs	r3, r3, #18
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800147c:	5cd3      	ldrb	r3, [r2, r3]
 800147e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d010      	beq.n	80014ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	0c5b      	lsrs	r3, r3, #17
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	4a11      	ldr	r2, [pc, #68]	; (80014dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001496:	5cd3      	ldrb	r3, [r2, r3]
 8001498:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800149e:	fb02 f203 	mul.w	r2, r2, r3
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	e004      	b.n	80014b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80014b0:	fb02 f303 	mul.w	r3, r2, r3
 80014b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	613b      	str	r3, [r7, #16]
      break;
 80014ba:	e002      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80014be:	613b      	str	r3, [r7, #16]
      break;
 80014c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014c2:	693b      	ldr	r3, [r7, #16]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	371c      	adds	r7, #28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000
 80014d4:	007a1200 	.word	0x007a1200
 80014d8:	08004e04 	.word	0x08004e04
 80014dc:	08004e14 	.word	0x08004e14
 80014e0:	003d0900 	.word	0x003d0900

080014e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e8:	4b02      	ldr	r3, [pc, #8]	; (80014f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	20000000 	.word	0x20000000

080014f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014fc:	f7ff fff2 	bl	80014e4 <HAL_RCC_GetHCLKFreq>
 8001500:	4602      	mov	r2, r0
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	4903      	ldr	r1, [pc, #12]	; (800151c <HAL_RCC_GetPCLK1Freq+0x24>)
 800150e:	5ccb      	ldrb	r3, [r1, r3]
 8001510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001514:	4618      	mov	r0, r3
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000
 800151c:	08004dfc 	.word	0x08004dfc

08001520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001524:	f7ff ffde 	bl	80014e4 <HAL_RCC_GetHCLKFreq>
 8001528:	4602      	mov	r2, r0
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	0adb      	lsrs	r3, r3, #11
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	4903      	ldr	r1, [pc, #12]	; (8001544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001536:	5ccb      	ldrb	r3, [r1, r3]
 8001538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800153c:	4618      	mov	r0, r3
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021000 	.word	0x40021000
 8001544:	08004dfc 	.word	0x08004dfc

08001548 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	220f      	movs	r2, #15
 8001556:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0203 	and.w	r2, r3, #3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_RCC_GetClockConfig+0x5c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0207 	and.w	r2, r3, #7
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40022000 	.word	0x40022000

080015a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <RCC_Delay+0x34>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <RCC_Delay+0x38>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	0a5b      	lsrs	r3, r3, #9
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015c4:	bf00      	nop
  }
  while (Delay --);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1e5a      	subs	r2, r3, #1
 80015ca:	60fa      	str	r2, [r7, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1f9      	bne.n	80015c4 <RCC_Delay+0x1c>
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	20000000 	.word	0x20000000
 80015e0:	10624dd3 	.word	0x10624dd3

080015e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e041      	b.n	800167a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d106      	bne.n	8001610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f839 	bl	8001682 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2202      	movs	r2, #2
 8001614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3304      	adds	r3, #4
 8001620:	4619      	mov	r1, r3
 8001622:	4610      	mov	r0, r2
 8001624:	f000 f9aa 	bl	800197c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d001      	beq.n	80016ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e044      	b.n	8001736 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2202      	movs	r2, #2
 80016b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <HAL_TIM_Base_Start_IT+0xac>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d018      	beq.n	8001700 <HAL_TIM_Base_Start_IT+0x6c>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a1c      	ldr	r2, [pc, #112]	; (8001744 <HAL_TIM_Base_Start_IT+0xb0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d013      	beq.n	8001700 <HAL_TIM_Base_Start_IT+0x6c>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e0:	d00e      	beq.n	8001700 <HAL_TIM_Base_Start_IT+0x6c>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a18      	ldr	r2, [pc, #96]	; (8001748 <HAL_TIM_Base_Start_IT+0xb4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d009      	beq.n	8001700 <HAL_TIM_Base_Start_IT+0x6c>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a16      	ldr	r2, [pc, #88]	; (800174c <HAL_TIM_Base_Start_IT+0xb8>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d004      	beq.n	8001700 <HAL_TIM_Base_Start_IT+0x6c>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a15      	ldr	r2, [pc, #84]	; (8001750 <HAL_TIM_Base_Start_IT+0xbc>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d111      	bne.n	8001724 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b06      	cmp	r3, #6
 8001710:	d010      	beq.n	8001734 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f042 0201 	orr.w	r2, r2, #1
 8001720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001722:	e007      	b.n	8001734 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f042 0201 	orr.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	40012c00 	.word	0x40012c00
 8001744:	40013400 	.word	0x40013400
 8001748:	40000400 	.word	0x40000400
 800174c:	40000800 	.word	0x40000800
 8001750:	40000c00 	.word	0x40000c00

08001754 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d020      	beq.n	80017b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01b      	beq.n	80017b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f06f 0202 	mvn.w	r2, #2
 8001788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f8d1 	bl	8001946 <HAL_TIM_IC_CaptureCallback>
 80017a4:	e005      	b.n	80017b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f8c4 	bl	8001934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f8d3 	bl	8001958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d020      	beq.n	8001804 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d01b      	beq.n	8001804 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f06f 0204 	mvn.w	r2, #4
 80017d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2202      	movs	r2, #2
 80017da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f8ab 	bl	8001946 <HAL_TIM_IC_CaptureCallback>
 80017f0:	e005      	b.n	80017fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f89e 	bl	8001934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f8ad 	bl	8001958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d020      	beq.n	8001850 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d01b      	beq.n	8001850 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f06f 0208 	mvn.w	r2, #8
 8001820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2204      	movs	r2, #4
 8001826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f885 	bl	8001946 <HAL_TIM_IC_CaptureCallback>
 800183c:	e005      	b.n	800184a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f878 	bl	8001934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f887 	bl	8001958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	2b00      	cmp	r3, #0
 8001858:	d020      	beq.n	800189c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	2b00      	cmp	r3, #0
 8001862:	d01b      	beq.n	800189c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f06f 0210 	mvn.w	r2, #16
 800186c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2208      	movs	r2, #8
 8001872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f85f 	bl	8001946 <HAL_TIM_IC_CaptureCallback>
 8001888:	e005      	b.n	8001896 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f852 	bl	8001934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f861 	bl	8001958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00c      	beq.n	80018c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d007      	beq.n	80018c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f06f 0201 	mvn.w	r2, #1
 80018b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7fe fe18 	bl	80004f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00c      	beq.n	80018e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d007      	beq.n	80018e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f8db 	bl	8001a9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00c      	beq.n	8001908 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d007      	beq.n	8001908 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f831 	bl	800196a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	f003 0320 	and.w	r3, r3, #32
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00c      	beq.n	800192c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f003 0320 	and.w	r3, r3, #32
 8001918:	2b00      	cmp	r3, #0
 800191a:	d007      	beq.n	800192c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f06f 0220 	mvn.w	r2, #32
 8001924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f8ae 	bl	8001a88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr

0800196a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a39      	ldr	r2, [pc, #228]	; (8001a74 <TIM_Base_SetConfig+0xf8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d013      	beq.n	80019bc <TIM_Base_SetConfig+0x40>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a38      	ldr	r2, [pc, #224]	; (8001a78 <TIM_Base_SetConfig+0xfc>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d00f      	beq.n	80019bc <TIM_Base_SetConfig+0x40>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a2:	d00b      	beq.n	80019bc <TIM_Base_SetConfig+0x40>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a35      	ldr	r2, [pc, #212]	; (8001a7c <TIM_Base_SetConfig+0x100>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d007      	beq.n	80019bc <TIM_Base_SetConfig+0x40>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a34      	ldr	r2, [pc, #208]	; (8001a80 <TIM_Base_SetConfig+0x104>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d003      	beq.n	80019bc <TIM_Base_SetConfig+0x40>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a33      	ldr	r2, [pc, #204]	; (8001a84 <TIM_Base_SetConfig+0x108>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d108      	bne.n	80019ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a28      	ldr	r2, [pc, #160]	; (8001a74 <TIM_Base_SetConfig+0xf8>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d013      	beq.n	80019fe <TIM_Base_SetConfig+0x82>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a27      	ldr	r2, [pc, #156]	; (8001a78 <TIM_Base_SetConfig+0xfc>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00f      	beq.n	80019fe <TIM_Base_SetConfig+0x82>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e4:	d00b      	beq.n	80019fe <TIM_Base_SetConfig+0x82>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a24      	ldr	r2, [pc, #144]	; (8001a7c <TIM_Base_SetConfig+0x100>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d007      	beq.n	80019fe <TIM_Base_SetConfig+0x82>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a23      	ldr	r2, [pc, #140]	; (8001a80 <TIM_Base_SetConfig+0x104>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d003      	beq.n	80019fe <TIM_Base_SetConfig+0x82>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a22      	ldr	r2, [pc, #136]	; (8001a84 <TIM_Base_SetConfig+0x108>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d108      	bne.n	8001a10 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a0f      	ldr	r2, [pc, #60]	; (8001a74 <TIM_Base_SetConfig+0xf8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d003      	beq.n	8001a44 <TIM_Base_SetConfig+0xc8>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a0e      	ldr	r2, [pc, #56]	; (8001a78 <TIM_Base_SetConfig+0xfc>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d103      	bne.n	8001a4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d005      	beq.n	8001a6a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f023 0201 	bic.w	r2, r3, #1
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	611a      	str	r2, [r3, #16]
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	40012c00 	.word	0x40012c00
 8001a78:	40013400 	.word	0x40013400
 8001a7c:	40000400 	.word	0x40000400
 8001a80:	40000800 	.word	0x40000800
 8001a84:	40000c00 	.word	0x40000c00

08001a88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e042      	b.n	8001b44 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d106      	bne.n	8001ad8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7fe fd7c 	bl	80005d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2224      	movs	r2, #36	; 0x24
 8001adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f971 	bl	8001dd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b20      	cmp	r3, #32
 8001b6a:	d175      	bne.n	8001c58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <HAL_UART_Transmit+0x2c>
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e06e      	b.n	8001c5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2221      	movs	r2, #33	; 0x21
 8001b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b8a:	f7fe fe6f 	bl	800086c <HAL_GetTick>
 8001b8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	88fa      	ldrh	r2, [r7, #6]
 8001b94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	88fa      	ldrh	r2, [r7, #6]
 8001b9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba4:	d108      	bne.n	8001bb8 <HAL_UART_Transmit+0x6c>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d104      	bne.n	8001bb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	61bb      	str	r3, [r7, #24]
 8001bb6:	e003      	b.n	8001bc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001bc0:	e02e      	b.n	8001c20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2180      	movs	r1, #128	; 0x80
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f000 f848 	bl	8001c62 <UART_WaitOnFlagUntilTimeout>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e03a      	b.n	8001c5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10b      	bne.n	8001c02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	61bb      	str	r3, [r7, #24]
 8001c00:	e007      	b.n	8001c12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	781a      	ldrb	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1cb      	bne.n	8001bc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2200      	movs	r2, #0
 8001c32:	2140      	movs	r1, #64	; 0x40
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 f814 	bl	8001c62 <UART_WaitOnFlagUntilTimeout>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2220      	movs	r2, #32
 8001c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e006      	b.n	8001c5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	e000      	b.n	8001c5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001c58:	2302      	movs	r3, #2
  }
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3720      	adds	r7, #32
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c72:	e03b      	b.n	8001cec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7a:	d037      	beq.n	8001cec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c7c:	f7fe fdf6 	bl	800086c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	6a3a      	ldr	r2, [r7, #32]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d302      	bcc.n	8001c92 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e03a      	b.n	8001d0c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d023      	beq.n	8001cec <UART_WaitOnFlagUntilTimeout+0x8a>
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b80      	cmp	r3, #128	; 0x80
 8001ca8:	d020      	beq.n	8001cec <UART_WaitOnFlagUntilTimeout+0x8a>
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2b40      	cmp	r3, #64	; 0x40
 8001cae:	d01d      	beq.n	8001cec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d116      	bne.n	8001cec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 f81d 	bl	8001d14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2208      	movs	r2, #8
 8001cde:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e00f      	b.n	8001d0c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	bf0c      	ite	eq
 8001cfc:	2301      	moveq	r3, #1
 8001cfe:	2300      	movne	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	461a      	mov	r2, r3
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d0b4      	beq.n	8001c74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b095      	sub	sp, #84	; 0x54
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	330c      	adds	r3, #12
 8001d22:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d26:	e853 3f00 	ldrex	r3, [r3]
 8001d2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	330c      	adds	r3, #12
 8001d3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d3c:	643a      	str	r2, [r7, #64]	; 0x40
 8001d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001d42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d44:	e841 2300 	strex	r3, r2, [r1]
 8001d48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1e5      	bne.n	8001d1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	3314      	adds	r3, #20
 8001d56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	e853 3f00 	ldrex	r3, [r3]
 8001d5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f023 0301 	bic.w	r3, r3, #1
 8001d66:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	3314      	adds	r3, #20
 8001d6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d78:	e841 2300 	strex	r3, r2, [r1]
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1e5      	bne.n	8001d50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d119      	bne.n	8001dc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	330c      	adds	r3, #12
 8001d92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	e853 3f00 	ldrex	r3, [r3]
 8001d9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f023 0310 	bic.w	r3, r3, #16
 8001da2:	647b      	str	r3, [r7, #68]	; 0x44
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	330c      	adds	r3, #12
 8001daa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001dac:	61ba      	str	r2, [r7, #24]
 8001dae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001db0:	6979      	ldr	r1, [r7, #20]
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	e841 2300 	strex	r3, r2, [r1]
 8001db8:	613b      	str	r3, [r7, #16]
   return(result);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1e5      	bne.n	8001d8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001dce:	bf00      	nop
 8001dd0:	3754      	adds	r7, #84	; 0x54
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e12:	f023 030c 	bic.w	r3, r3, #12
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	68b9      	ldr	r1, [r7, #8]
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699a      	ldr	r2, [r3, #24]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a2c      	ldr	r2, [pc, #176]	; (8001eec <UART_SetConfig+0x114>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d103      	bne.n	8001e48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e40:	f7ff fb6e 	bl	8001520 <HAL_RCC_GetPCLK2Freq>
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	e002      	b.n	8001e4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e48:	f7ff fb56 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8001e4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	009a      	lsls	r2, r3, #2
 8001e58:	441a      	add	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e64:	4a22      	ldr	r2, [pc, #136]	; (8001ef0 <UART_SetConfig+0x118>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	0119      	lsls	r1, r3, #4
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	009a      	lsls	r2, r3, #2
 8001e78:	441a      	add	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e84:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <UART_SetConfig+0x118>)
 8001e86:	fba3 0302 	umull	r0, r3, r3, r2
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	2064      	movs	r0, #100	; 0x64
 8001e8e:	fb00 f303 	mul.w	r3, r0, r3
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	3332      	adds	r3, #50	; 0x32
 8001e98:	4a15      	ldr	r2, [pc, #84]	; (8001ef0 <UART_SetConfig+0x118>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ea4:	4419      	add	r1, r3
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	009a      	lsls	r2, r3, #2
 8001eb0:	441a      	add	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <UART_SetConfig+0x118>)
 8001ebe:	fba3 0302 	umull	r0, r3, r3, r2
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	2064      	movs	r0, #100	; 0x64
 8001ec6:	fb00 f303 	mul.w	r3, r0, r3
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	3332      	adds	r3, #50	; 0x32
 8001ed0:	4a07      	ldr	r2, [pc, #28]	; (8001ef0 <UART_SetConfig+0x118>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	f003 020f 	and.w	r2, r3, #15
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	440a      	add	r2, r1
 8001ee2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ee4:	bf00      	nop
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40013800 	.word	0x40013800
 8001ef0:	51eb851f 	.word	0x51eb851f

08001ef4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f06:	2b84      	cmp	r3, #132	; 0x84
 8001f08:	d005      	beq.n	8001f16 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001f0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4413      	add	r3, r2
 8001f12:	3303      	adds	r3, #3
 8001f14:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001f16:	68fb      	ldr	r3, [r7, #12]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr

08001f22 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f28:	f3ef 8305 	mrs	r3, IPSR
 8001f2c:	607b      	str	r3, [r7, #4]
  return(result);
 8001f2e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	bf14      	ite	ne
 8001f34:	2301      	movne	r3, #1
 8001f36:	2300      	moveq	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001f48:	f001 f986 	bl	8003258 <vTaskStartScheduler>
  
  return osOK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001f52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f54:	b089      	sub	sp, #36	; 0x24
 8001f56:	af04      	add	r7, sp, #16
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d020      	beq.n	8001fa6 <osThreadCreate+0x54>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01c      	beq.n	8001fa6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685c      	ldr	r4, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681d      	ldr	r5, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691e      	ldr	r6, [r3, #16]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ffb8 	bl	8001ef4 <makeFreeRtosPriority>
 8001f84:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f8e:	9202      	str	r2, [sp, #8]
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	9100      	str	r1, [sp, #0]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4632      	mov	r2, r6
 8001f98:	4629      	mov	r1, r5
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	f000 ff94 	bl	8002ec8 <xTaskCreateStatic>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	e01c      	b.n	8001fe0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685c      	ldr	r4, [r3, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fb2:	b29e      	uxth	r6, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff ff9a 	bl	8001ef4 <makeFreeRtosPriority>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	f107 030c 	add.w	r3, r7, #12
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	9200      	str	r2, [sp, #0]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	4632      	mov	r2, r6
 8001fce:	4629      	mov	r1, r5
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	f000 ffd6 	bl	8002f82 <xTaskCreate>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d001      	beq.n	8001fe0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	e000      	b.n	8001fe2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fea <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b084      	sub	sp, #16
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <osDelay+0x16>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	e000      	b.n	8002002 <osDelay+0x18>
 8002000:	2301      	movs	r3, #1
 8002002:	4618      	mov	r0, r3
 8002004:	f001 f8f4 	bl	80031f0 <vTaskDelay>
  
  return osOK;
 8002008:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b086      	sub	sp, #24
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	3303      	adds	r3, #3
 8002020:	f023 0303 	bic.w	r3, r3, #3
 8002024:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8002026:	2014      	movs	r0, #20
 8002028:	f002 f810 	bl	800404c <pvPortMalloc>
 800202c:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d046      	beq.n	80020c2 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f001 fffd 	bl	800404c <pvPortMalloc>
 8002052:	4602      	mov	r2, r0
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d02b      	beq.n	80020b8 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	4618      	mov	r0, r3
 800206c:	f001 ffee 	bl	800404c <pvPortMalloc>
 8002070:	4602      	mov	r2, r0
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d011      	beq.n	80020a2 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	e008      	b.n	8002096 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4413      	add	r3, r2
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	3301      	adds	r3, #1
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	429a      	cmp	r2, r3
 800209e:	d3f1      	bcc.n	8002084 <osPoolCreate+0x72>
 80020a0:	e00f      	b.n	80020c2 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 f89c 	bl	80041e4 <vPortFree>
        vPortFree(thePool);
 80020ac:	6978      	ldr	r0, [r7, #20]
 80020ae:	f002 f899 	bl	80041e4 <vPortFree>
        thePool = NULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	e004      	b.n	80020c2 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80020b8:	6978      	ldr	r0, [r7, #20]
 80020ba:	f002 f893 	bl	80041e4 <vPortFree>
      thePool = NULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80020c2:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80020dc:	f7ff ff21 	bl	8001f22 <inHandlerMode>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00e      	beq.n	8002104 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80020e6:	f3ef 8211 	mrs	r2, BASEPRI
 80020ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ee:	f383 8811 	msr	BASEPRI, r3
 80020f2:	f3bf 8f6f 	isb	sy
 80020f6:	f3bf 8f4f 	dsb	sy
 80020fa:	617a      	str	r2, [r7, #20]
 80020fc:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80020fe:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
 8002102:	e001      	b.n	8002108 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8002104:	f001 fea2 	bl	8003e4c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8002108:	2300      	movs	r3, #0
 800210a:	61fb      	str	r3, [r7, #28]
 800210c:	e029      	b.n	8002162 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	4413      	add	r3, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6892      	ldr	r2, [r2, #8]
 800211a:	fbb3 f1f2 	udiv	r1, r3, r2
 800211e:	fb02 f201 	mul.w	r2, r2, r1
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4413      	add	r3, r2
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d113      	bne.n	800215c <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	4413      	add	r3, r2
 800213c:	2201      	movs	r2, #1
 800213e:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4619      	mov	r1, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	fb02 f303 	mul.w	r3, r2, r3
 8002150:	440b      	add	r3, r1
 8002152:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	611a      	str	r2, [r3, #16]
      break;
 800215a:	e007      	b.n	800216c <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	3301      	adds	r3, #1
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	429a      	cmp	r2, r3
 800216a:	d3d0      	bcc.n	800210e <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800216c:	f7ff fed9 	bl	8001f22 <inHandlerMode>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002180:	e001      	b.n	8002186 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8002182:	f001 fe93 	bl	8003eac <vPortExitCritical>
  }
  
  return p;
 8002186:	6a3b      	ldr	r3, [r7, #32]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3728      	adds	r7, #40	; 0x28
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689c      	ldr	r4, [r3, #8]
 80021ae:	200c      	movs	r0, #12
 80021b0:	f001 ff4c 	bl	800404c <pvPortMalloc>
 80021b4:	4603      	mov	r3, r0
 80021b6:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <osMailCreate+0x36>
    return NULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	e038      	b.n	8002238 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	681c      	ldr	r4, [r3, #0]
 80021da:	2200      	movs	r2, #0
 80021dc:	2104      	movs	r1, #4
 80021de:	f000 fa0f 	bl	8002600 <xQueueGenericCreate>
 80021e2:	4603      	mov	r3, r0
 80021e4:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d107      	bne.n	8002202 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f001 fff3 	bl	80041e4 <vPortFree>
    return NULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	e01a      	b.n	8002238 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	681c      	ldr	r4, [r3, #0]
 8002208:	f107 030c 	add.w	r3, r7, #12
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff00 	bl	8002012 <osPoolCreate>
 8002212:	4603      	mov	r3, r0
 8002214:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d107      	bne.n	8002232 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f001 ffdb 	bl	80041e4 <vPortFree>
    return NULL;
 800222e:	2300      	movs	r3, #0
 8002230:	e002      	b.n	8002238 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8002238:	4618      	mov	r0, r3
 800223a:	371c      	adds	r7, #28
 800223c:	46bd      	mov	sp, r7
 800223e:	bd90      	pop	{r4, r7, pc}

08002240 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <osMailAlloc+0x14>
    return NULL;
 8002250:	2300      	movs	r3, #0
 8002252:	e006      	b.n	8002262 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff37 	bl	80020cc <osPoolAlloc>
 800225e:	60f8      	str	r0, [r7, #12]
  
  return p;
 8002260:	68fb      	ldr	r3, [r7, #12]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <osMailPut+0x14>
    return osErrorParameter;
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	e02c      	b.n	80022da <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8002284:	f7ff fe4d 	bl	8001f22 <inHandlerMode>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d018      	beq.n	80022c0 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6858      	ldr	r0, [r3, #4]
 8002292:	f107 020c 	add.w	r2, r7, #12
 8002296:	4639      	mov	r1, r7
 8002298:	2300      	movs	r3, #0
 800229a:	f000 fb09 	bl	80028b0 <xQueueGenericSendFromISR>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d001      	beq.n	80022a8 <osMailPut+0x3c>
      return osErrorOS;
 80022a4:	23ff      	movs	r3, #255	; 0xff
 80022a6:	e018      	b.n	80022da <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d014      	beq.n	80022d8 <osMailPut+0x6c>
 80022ae:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <osMailPut+0x78>)
 80022b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	f3bf 8f4f 	dsb	sy
 80022ba:	f3bf 8f6f 	isb	sy
 80022be:	e00b      	b.n	80022d8 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6858      	ldr	r0, [r3, #4]
 80022c4:	4639      	mov	r1, r7
 80022c6:	2300      	movs	r3, #0
 80022c8:	2200      	movs	r2, #0
 80022ca:	f000 f9f3 	bl	80026b4 <xQueueGenericSend>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d001      	beq.n	80022d8 <osMailPut+0x6c>
      return osErrorOS;
 80022d4:	23ff      	movs	r3, #255	; 0xff
 80022d6:	e000      	b.n	80022da <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	e000ed04 	.word	0xe000ed04

080022e8 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b08b      	sub	sp, #44	; 0x2c
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10a      	bne.n	8002314 <osMailGet+0x2c>
    event.status = osErrorParameter;
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	617b      	str	r3, [r7, #20]
    return event;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	461c      	mov	r4, r3
 8002306:	f107 0314 	add.w	r3, r7, #20
 800230a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800230e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002312:	e056      	b.n	80023c2 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002314:	2300      	movs	r3, #0
 8002316:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002322:	d103      	bne.n	800232c <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8002324:	f04f 33ff 	mov.w	r3, #4294967295
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
 800232a:	e009      	b.n	8002340 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d006      	beq.n	8002340 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <osMailGet+0x58>
      ticks = 1;
 800233c:	2301      	movs	r3, #1
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002340:	f7ff fdef 	bl	8001f22 <inHandlerMode>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d01d      	beq.n	8002386 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	6858      	ldr	r0, [r3, #4]
 800234e:	f107 0220 	add.w	r2, r7, #32
 8002352:	f107 0314 	add.w	r3, r7, #20
 8002356:	3304      	adds	r3, #4
 8002358:	4619      	mov	r1, r3
 800235a:	f000 fc25 	bl	8002ba8 <xQueueReceiveFromISR>
 800235e:	4603      	mov	r3, r0
 8002360:	2b01      	cmp	r3, #1
 8002362:	d102      	bne.n	800236a <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8002364:	2320      	movs	r3, #32
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	e001      	b.n	800236e <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d01e      	beq.n	80023b2 <osMailGet+0xca>
 8002374:	4b15      	ldr	r3, [pc, #84]	; (80023cc <osMailGet+0xe4>)
 8002376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	f3bf 8f4f 	dsb	sy
 8002380:	f3bf 8f6f 	isb	sy
 8002384:	e015      	b.n	80023b2 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	6858      	ldr	r0, [r3, #4]
 800238a:	f107 0314 	add.w	r3, r7, #20
 800238e:	3304      	adds	r3, #4
 8002390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002392:	4619      	mov	r1, r3
 8002394:	f000 fb28 	bl	80029e8 <xQueueReceive>
 8002398:	4603      	mov	r3, r0
 800239a:	2b01      	cmp	r3, #1
 800239c:	d102      	bne.n	80023a4 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800239e:	2320      	movs	r3, #32
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	e006      	b.n	80023b2 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <osMailGet+0xc6>
 80023aa:	2300      	movs	r3, #0
 80023ac:	e000      	b.n	80023b0 <osMailGet+0xc8>
 80023ae:	2340      	movs	r3, #64	; 0x40
 80023b0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	461c      	mov	r4, r3
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	372c      	adds	r7, #44	; 0x2c
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd90      	pop	{r4, r7, pc}
 80023ca:	bf00      	nop
 80023cc:	e000ed04 	.word	0xe000ed04

080023d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f103 0208 	add.w	r2, r3, #8
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295
 80023e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f103 0208 	add.w	r2, r3, #8
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f103 0208 	add.w	r2, r3, #8
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002426:	b480      	push	{r7}
 8002428:	b085      	sub	sp, #20
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	601a      	str	r2, [r3, #0]
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002482:	d103      	bne.n	800248c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	e00c      	b.n	80024a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3308      	adds	r3, #8
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	e002      	b.n	800249a <vListInsert+0x2e>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d2f6      	bcs.n	8002494 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	601a      	str	r2, [r3, #0]
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6892      	ldr	r2, [r2, #8]
 80024f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6852      	ldr	r2, [r2, #4]
 80024fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	d103      	bne.n	8002510 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	1e5a      	subs	r2, r3, #1
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
	...

08002530 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10a      	bne.n	800255a <xQueueGenericReset+0x2a>
	__asm volatile
 8002544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002548:	f383 8811 	msr	BASEPRI, r3
 800254c:	f3bf 8f6f 	isb	sy
 8002550:	f3bf 8f4f 	dsb	sy
 8002554:	60bb      	str	r3, [r7, #8]
}
 8002556:	bf00      	nop
 8002558:	e7fe      	b.n	8002558 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800255a:	f001 fc77 	bl	8003e4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002566:	68f9      	ldr	r1, [r7, #12]
 8002568:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	441a      	add	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258a:	3b01      	subs	r3, #1
 800258c:	68f9      	ldr	r1, [r7, #12]
 800258e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	441a      	add	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	22ff      	movs	r2, #255	; 0xff
 800259e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	22ff      	movs	r2, #255	; 0xff
 80025a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d114      	bne.n	80025da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01a      	beq.n	80025ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	3310      	adds	r3, #16
 80025bc:	4618      	mov	r0, r3
 80025be:	f001 f88b 	bl	80036d8 <xTaskRemoveFromEventList>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d012      	beq.n	80025ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <xQueueGenericReset+0xcc>)
 80025ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	f3bf 8f6f 	isb	sy
 80025d8:	e009      	b.n	80025ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	3310      	adds	r3, #16
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fef6 	bl	80023d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	3324      	adds	r3, #36	; 0x24
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fef1 	bl	80023d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80025ee:	f001 fc5d 	bl	8003eac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80025f2:	2301      	movs	r3, #1
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	e000ed04 	.word	0xe000ed04

08002600 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08a      	sub	sp, #40	; 0x28
 8002604:	af02      	add	r7, sp, #8
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	4613      	mov	r3, r2
 800260c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10a      	bne.n	800262a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	613b      	str	r3, [r7, #16]
}
 8002626:	bf00      	nop
 8002628:	e7fe      	b.n	8002628 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	fb02 f303 	mul.w	r3, r2, r3
 8002632:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	3348      	adds	r3, #72	; 0x48
 8002638:	4618      	mov	r0, r3
 800263a:	f001 fd07 	bl	800404c <pvPortMalloc>
 800263e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d011      	beq.n	800266a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3348      	adds	r3, #72	; 0x48
 800264e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002658:	79fa      	ldrb	r2, [r7, #7]
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	4613      	mov	r3, r2
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f805 	bl	8002674 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800266a:	69bb      	ldr	r3, [r7, #24]
	}
 800266c:	4618      	mov	r0, r3
 800266e:	3720      	adds	r7, #32
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d103      	bne.n	8002690 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e002      	b.n	8002696 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026a2:	2101      	movs	r1, #1
 80026a4:	69b8      	ldr	r0, [r7, #24]
 80026a6:	f7ff ff43 	bl	8002530 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08e      	sub	sp, #56	; 0x38
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
 80026c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80026c2:	2300      	movs	r3, #0
 80026c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80026ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10a      	bne.n	80026e6 <xQueueGenericSend+0x32>
	__asm volatile
 80026d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d4:	f383 8811 	msr	BASEPRI, r3
 80026d8:	f3bf 8f6f 	isb	sy
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80026e2:	bf00      	nop
 80026e4:	e7fe      	b.n	80026e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d103      	bne.n	80026f4 <xQueueGenericSend+0x40>
 80026ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <xQueueGenericSend+0x44>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <xQueueGenericSend+0x46>
 80026f8:	2300      	movs	r3, #0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10a      	bne.n	8002714 <xQueueGenericSend+0x60>
	__asm volatile
 80026fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002702:	f383 8811 	msr	BASEPRI, r3
 8002706:	f3bf 8f6f 	isb	sy
 800270a:	f3bf 8f4f 	dsb	sy
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002710:	bf00      	nop
 8002712:	e7fe      	b.n	8002712 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d103      	bne.n	8002722 <xQueueGenericSend+0x6e>
 800271a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <xQueueGenericSend+0x72>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <xQueueGenericSend+0x74>
 8002726:	2300      	movs	r3, #0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10a      	bne.n	8002742 <xQueueGenericSend+0x8e>
	__asm volatile
 800272c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002730:	f383 8811 	msr	BASEPRI, r3
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	623b      	str	r3, [r7, #32]
}
 800273e:	bf00      	nop
 8002740:	e7fe      	b.n	8002740 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002742:	f001 f985 	bl	8003a50 <xTaskGetSchedulerState>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d102      	bne.n	8002752 <xQueueGenericSend+0x9e>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <xQueueGenericSend+0xa2>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <xQueueGenericSend+0xa4>
 8002756:	2300      	movs	r3, #0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10a      	bne.n	8002772 <xQueueGenericSend+0xbe>
	__asm volatile
 800275c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002760:	f383 8811 	msr	BASEPRI, r3
 8002764:	f3bf 8f6f 	isb	sy
 8002768:	f3bf 8f4f 	dsb	sy
 800276c:	61fb      	str	r3, [r7, #28]
}
 800276e:	bf00      	nop
 8002770:	e7fe      	b.n	8002770 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002772:	f001 fb6b 	bl	8003e4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277e:	429a      	cmp	r2, r3
 8002780:	d302      	bcc.n	8002788 <xQueueGenericSend+0xd4>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d129      	bne.n	80027dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	68b9      	ldr	r1, [r7, #8]
 800278c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800278e:	f000 fa8b 	bl	8002ca8 <prvCopyDataToQueue>
 8002792:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	2b00      	cmp	r3, #0
 800279a:	d010      	beq.n	80027be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800279c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279e:	3324      	adds	r3, #36	; 0x24
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 ff99 	bl	80036d8 <xTaskRemoveFromEventList>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d013      	beq.n	80027d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80027ac:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <xQueueGenericSend+0x1f8>)
 80027ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	f3bf 8f6f 	isb	sy
 80027bc:	e00a      	b.n	80027d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80027be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d007      	beq.n	80027d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80027c4:	4b39      	ldr	r3, [pc, #228]	; (80028ac <xQueueGenericSend+0x1f8>)
 80027c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80027d4:	f001 fb6a 	bl	8003eac <vPortExitCritical>
				return pdPASS;
 80027d8:	2301      	movs	r3, #1
 80027da:	e063      	b.n	80028a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d103      	bne.n	80027ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027e2:	f001 fb63 	bl	8003eac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	e05c      	b.n	80028a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d106      	bne.n	80027fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 ffd1 	bl	800379c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027fa:	2301      	movs	r3, #1
 80027fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027fe:	f001 fb55 	bl	8003eac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002802:	f000 fd89 	bl	8003318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002806:	f001 fb21 	bl	8003e4c <vPortEnterCritical>
 800280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002810:	b25b      	sxtb	r3, r3
 8002812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002816:	d103      	bne.n	8002820 <xQueueGenericSend+0x16c>
 8002818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002826:	b25b      	sxtb	r3, r3
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282c:	d103      	bne.n	8002836 <xQueueGenericSend+0x182>
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002836:	f001 fb39 	bl	8003eac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800283a:	1d3a      	adds	r2, r7, #4
 800283c:	f107 0314 	add.w	r3, r7, #20
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f000 ffc0 	bl	80037c8 <xTaskCheckForTimeOut>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d124      	bne.n	8002898 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800284e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002850:	f000 fb22 	bl	8002e98 <prvIsQueueFull>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d018      	beq.n	800288c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285c:	3310      	adds	r3, #16
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	4611      	mov	r1, r2
 8002862:	4618      	mov	r0, r3
 8002864:	f000 ff14 	bl	8003690 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800286a:	f000 faad 	bl	8002dc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800286e:	f000 fd61 	bl	8003334 <xTaskResumeAll>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	f47f af7c 	bne.w	8002772 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <xQueueGenericSend+0x1f8>)
 800287c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	f3bf 8f4f 	dsb	sy
 8002886:	f3bf 8f6f 	isb	sy
 800288a:	e772      	b.n	8002772 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800288c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800288e:	f000 fa9b 	bl	8002dc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002892:	f000 fd4f 	bl	8003334 <xTaskResumeAll>
 8002896:	e76c      	b.n	8002772 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800289a:	f000 fa95 	bl	8002dc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800289e:	f000 fd49 	bl	8003334 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80028a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3738      	adds	r7, #56	; 0x38
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	e000ed04 	.word	0xe000ed04

080028b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b090      	sub	sp, #64	; 0x40
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80028c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80028c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028cc:	f383 8811 	msr	BASEPRI, r3
 80028d0:	f3bf 8f6f 	isb	sy
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028da:	bf00      	nop
 80028dc:	e7fe      	b.n	80028dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d103      	bne.n	80028ec <xQueueGenericSendFromISR+0x3c>
 80028e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <xQueueGenericSendFromISR+0x40>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <xQueueGenericSendFromISR+0x42>
 80028f0:	2300      	movs	r3, #0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10a      	bne.n	800290c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80028f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002908:	bf00      	nop
 800290a:	e7fe      	b.n	800290a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d103      	bne.n	800291a <xQueueGenericSendFromISR+0x6a>
 8002912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <xQueueGenericSendFromISR+0x6e>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <xQueueGenericSendFromISR+0x70>
 800291e:	2300      	movs	r3, #0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	623b      	str	r3, [r7, #32]
}
 8002936:	bf00      	nop
 8002938:	e7fe      	b.n	8002938 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800293a:	f001 fb49 	bl	8003fd0 <vPortValidateInterruptPriority>
	__asm volatile
 800293e:	f3ef 8211 	mrs	r2, BASEPRI
 8002942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002946:	f383 8811 	msr	BASEPRI, r3
 800294a:	f3bf 8f6f 	isb	sy
 800294e:	f3bf 8f4f 	dsb	sy
 8002952:	61fa      	str	r2, [r7, #28]
 8002954:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8002956:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002958:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800295a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800295e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002962:	429a      	cmp	r2, r3
 8002964:	d302      	bcc.n	800296c <xQueueGenericSendFromISR+0xbc>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d12f      	bne.n	80029cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800296c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	68b9      	ldr	r1, [r7, #8]
 8002980:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002982:	f000 f991 	bl	8002ca8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002986:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800298a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298e:	d112      	bne.n	80029b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	2b00      	cmp	r3, #0
 8002996:	d016      	beq.n	80029c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299a:	3324      	adds	r3, #36	; 0x24
 800299c:	4618      	mov	r0, r3
 800299e:	f000 fe9b 	bl	80036d8 <xTaskRemoveFromEventList>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00e      	beq.n	80029c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00b      	beq.n	80029c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e007      	b.n	80029c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80029b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80029ba:	3301      	adds	r3, #1
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	b25a      	sxtb	r2, r3
 80029c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80029c6:	2301      	movs	r3, #1
 80029c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80029ca:	e001      	b.n	80029d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d2:	617b      	str	r3, [r7, #20]
	__asm volatile
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f383 8811 	msr	BASEPRI, r3
}
 80029da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80029dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3740      	adds	r7, #64	; 0x40
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08c      	sub	sp, #48	; 0x30
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10a      	bne.n	8002a18 <xQueueReceive+0x30>
	__asm volatile
 8002a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a06:	f383 8811 	msr	BASEPRI, r3
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	623b      	str	r3, [r7, #32]
}
 8002a14:	bf00      	nop
 8002a16:	e7fe      	b.n	8002a16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d103      	bne.n	8002a26 <xQueueReceive+0x3e>
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <xQueueReceive+0x42>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <xQueueReceive+0x44>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <xQueueReceive+0x5e>
	__asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	61fb      	str	r3, [r7, #28]
}
 8002a42:	bf00      	nop
 8002a44:	e7fe      	b.n	8002a44 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a46:	f001 f803 	bl	8003a50 <xTaskGetSchedulerState>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <xQueueReceive+0x6e>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <xQueueReceive+0x72>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <xQueueReceive+0x74>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10a      	bne.n	8002a76 <xQueueReceive+0x8e>
	__asm volatile
 8002a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	61bb      	str	r3, [r7, #24]
}
 8002a72:	bf00      	nop
 8002a74:	e7fe      	b.n	8002a74 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a76:	f001 f9e9 	bl	8003e4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d01f      	beq.n	8002ac6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a86:	68b9      	ldr	r1, [r7, #8]
 8002a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a8a:	f000 f977 	bl	8002d7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	1e5a      	subs	r2, r3, #1
 8002a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00f      	beq.n	8002abe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa0:	3310      	adds	r3, #16
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fe18 	bl	80036d8 <xTaskRemoveFromEventList>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002aae:	4b3d      	ldr	r3, [pc, #244]	; (8002ba4 <xQueueReceive+0x1bc>)
 8002ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	f3bf 8f4f 	dsb	sy
 8002aba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002abe:	f001 f9f5 	bl	8003eac <vPortExitCritical>
				return pdPASS;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e069      	b.n	8002b9a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d103      	bne.n	8002ad4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002acc:	f001 f9ee 	bl	8003eac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e062      	b.n	8002b9a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ada:	f107 0310 	add.w	r3, r7, #16
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 fe5c 	bl	800379c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ae8:	f001 f9e0 	bl	8003eac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002aec:	f000 fc14 	bl	8003318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002af0:	f001 f9ac 	bl	8003e4c <vPortEnterCritical>
 8002af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002afa:	b25b      	sxtb	r3, r3
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	d103      	bne.n	8002b0a <xQueueReceive+0x122>
 8002b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b10:	b25b      	sxtb	r3, r3
 8002b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b16:	d103      	bne.n	8002b20 <xQueueReceive+0x138>
 8002b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b20:	f001 f9c4 	bl	8003eac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b24:	1d3a      	adds	r2, r7, #4
 8002b26:	f107 0310 	add.w	r3, r7, #16
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fe4b 	bl	80037c8 <xTaskCheckForTimeOut>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d123      	bne.n	8002b80 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b3a:	f000 f997 	bl	8002e6c <prvIsQueueEmpty>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d017      	beq.n	8002b74 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	3324      	adds	r3, #36	; 0x24
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fd9f 	bl	8003690 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002b52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b54:	f000 f938 	bl	8002dc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002b58:	f000 fbec 	bl	8003334 <xTaskResumeAll>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d189      	bne.n	8002a76 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002b62:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <xQueueReceive+0x1bc>)
 8002b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	f3bf 8f4f 	dsb	sy
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	e780      	b.n	8002a76 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b76:	f000 f927 	bl	8002dc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b7a:	f000 fbdb 	bl	8003334 <xTaskResumeAll>
 8002b7e:	e77a      	b.n	8002a76 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b82:	f000 f921 	bl	8002dc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b86:	f000 fbd5 	bl	8003334 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b8c:	f000 f96e 	bl	8002e6c <prvIsQueueEmpty>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f43f af6f 	beq.w	8002a76 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002b98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3730      	adds	r7, #48	; 0x30
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	e000ed04 	.word	0xe000ed04

08002ba8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08e      	sub	sp, #56	; 0x38
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10a      	bne.n	8002bd4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc2:	f383 8811 	msr	BASEPRI, r3
 8002bc6:	f3bf 8f6f 	isb	sy
 8002bca:	f3bf 8f4f 	dsb	sy
 8002bce:	623b      	str	r3, [r7, #32]
}
 8002bd0:	bf00      	nop
 8002bd2:	e7fe      	b.n	8002bd2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d103      	bne.n	8002be2 <xQueueReceiveFromISR+0x3a>
 8002bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <xQueueReceiveFromISR+0x3e>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <xQueueReceiveFromISR+0x40>
 8002be6:	2300      	movs	r3, #0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10a      	bne.n	8002c02 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf0:	f383 8811 	msr	BASEPRI, r3
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	61fb      	str	r3, [r7, #28]
}
 8002bfe:	bf00      	nop
 8002c00:	e7fe      	b.n	8002c00 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c02:	f001 f9e5 	bl	8003fd0 <vPortValidateInterruptPriority>
	__asm volatile
 8002c06:	f3ef 8211 	mrs	r2, BASEPRI
 8002c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0e:	f383 8811 	msr	BASEPRI, r3
 8002c12:	f3bf 8f6f 	isb	sy
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	61ba      	str	r2, [r7, #24]
 8002c1c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002c1e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d02f      	beq.n	8002c8e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c3c:	f000 f89e 	bl	8002d7c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c42:	1e5a      	subs	r2, r3, #1
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002c48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d112      	bne.n	8002c78 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d016      	beq.n	8002c88 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	3310      	adds	r3, #16
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fd3a 	bl	80036d8 <xTaskRemoveFromEventList>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00e      	beq.n	8002c88 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00b      	beq.n	8002c88 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e007      	b.n	8002c88 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	b25a      	sxtb	r2, r3
 8002c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8c:	e001      	b.n	8002c92 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	637b      	str	r3, [r7, #52]	; 0x34
 8002c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c94:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f383 8811 	msr	BASEPRI, r3
}
 8002c9c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3738      	adds	r7, #56	; 0x38
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10d      	bne.n	8002ce2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d14d      	bne.n	8002d6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 feda 	bl	8003a8c <xTaskPriorityDisinherit>
 8002cd8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	e043      	b.n	8002d6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d119      	bne.n	8002d1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6858      	ldr	r0, [r3, #4]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	68b9      	ldr	r1, [r7, #8]
 8002cf4:	f001 fbbc 	bl	8004470 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	441a      	add	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d32b      	bcc.n	8002d6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	e026      	b.n	8002d6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	68d8      	ldr	r0, [r3, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	461a      	mov	r2, r3
 8002d26:	68b9      	ldr	r1, [r7, #8]
 8002d28:	f001 fba2 	bl	8004470 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	425b      	negs	r3, r3
 8002d36:	441a      	add	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d207      	bcs.n	8002d58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	425b      	negs	r3, r3
 8002d52:	441a      	add	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d105      	bne.n	8002d6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002d72:	697b      	ldr	r3, [r7, #20]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d018      	beq.n	8002dc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	441a      	add	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d303      	bcc.n	8002db0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68d9      	ldr	r1, [r3, #12]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	461a      	mov	r2, r3
 8002dba:	6838      	ldr	r0, [r7, #0]
 8002dbc:	f001 fb58 	bl	8004470 <memcpy>
	}
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002dd0:	f001 f83c 	bl	8003e4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ddc:	e011      	b.n	8002e02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d012      	beq.n	8002e0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3324      	adds	r3, #36	; 0x24
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fc74 	bl	80036d8 <xTaskRemoveFromEventList>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002df6:	f000 fd49 	bl	800388c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	dce9      	bgt.n	8002dde <prvUnlockQueue+0x16>
 8002e0a:	e000      	b.n	8002e0e <prvUnlockQueue+0x46>
					break;
 8002e0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	22ff      	movs	r2, #255	; 0xff
 8002e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002e16:	f001 f849 	bl	8003eac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e1a:	f001 f817 	bl	8003e4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e26:	e011      	b.n	8002e4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d012      	beq.n	8002e56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3310      	adds	r3, #16
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 fc4f 	bl	80036d8 <xTaskRemoveFromEventList>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002e40:	f000 fd24 	bl	800388c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002e44:	7bbb      	ldrb	r3, [r7, #14]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	dce9      	bgt.n	8002e28 <prvUnlockQueue+0x60>
 8002e54:	e000      	b.n	8002e58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002e56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	22ff      	movs	r2, #255	; 0xff
 8002e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002e60:	f001 f824 	bl	8003eac <vPortExitCritical>
}
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e74:	f000 ffea 	bl	8003e4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d102      	bne.n	8002e86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002e80:	2301      	movs	r3, #1
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	e001      	b.n	8002e8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e8a:	f001 f80f 	bl	8003eac <vPortExitCritical>

	return xReturn;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ea0:	f000 ffd4 	bl	8003e4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d102      	bne.n	8002eb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	e001      	b.n	8002eba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002eba:	f000 fff7 	bl	8003eac <vPortExitCritical>

	return xReturn;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08e      	sub	sp, #56	; 0x38
 8002ecc:	af04      	add	r7, sp, #16
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
 8002ed4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10a      	bne.n	8002ef2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	623b      	str	r3, [r7, #32]
}
 8002eee:	bf00      	nop
 8002ef0:	e7fe      	b.n	8002ef0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <xTaskCreateStatic+0x46>
	__asm volatile
 8002ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efc:	f383 8811 	msr	BASEPRI, r3
 8002f00:	f3bf 8f6f 	isb	sy
 8002f04:	f3bf 8f4f 	dsb	sy
 8002f08:	61fb      	str	r3, [r7, #28]
}
 8002f0a:	bf00      	nop
 8002f0c:	e7fe      	b.n	8002f0c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f0e:	2354      	movs	r3, #84	; 0x54
 8002f10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	2b54      	cmp	r3, #84	; 0x54
 8002f16:	d00a      	beq.n	8002f2e <xTaskCreateStatic+0x66>
	__asm volatile
 8002f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	61bb      	str	r3, [r7, #24]
}
 8002f2a:	bf00      	nop
 8002f2c:	e7fe      	b.n	8002f2c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002f2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d01e      	beq.n	8002f74 <xTaskCreateStatic+0xac>
 8002f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d01b      	beq.n	8002f74 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	2202      	movs	r2, #2
 8002f4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002f4e:	2300      	movs	r3, #0
 8002f50:	9303      	str	r3, [sp, #12]
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	9302      	str	r3, [sp, #8]
 8002f56:	f107 0314 	add.w	r3, r7, #20
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f850 	bl	800300c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f6e:	f000 f8d5 	bl	800311c <prvAddNewTaskToReadyList>
 8002f72:	e001      	b.n	8002f78 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002f78:	697b      	ldr	r3, [r7, #20]
	}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3728      	adds	r7, #40	; 0x28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b08c      	sub	sp, #48	; 0x30
 8002f86:	af04      	add	r7, sp, #16
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	603b      	str	r3, [r7, #0]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f001 f858 	bl	800404c <pvPortMalloc>
 8002f9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00e      	beq.n	8002fc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002fa4:	2054      	movs	r0, #84	; 0x54
 8002fa6:	f001 f851 	bl	800404c <pvPortMalloc>
 8002faa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
 8002fb8:	e005      	b.n	8002fc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002fba:	6978      	ldr	r0, [r7, #20]
 8002fbc:	f001 f912 	bl	80041e4 <vPortFree>
 8002fc0:	e001      	b.n	8002fc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d017      	beq.n	8002ffc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002fd4:	88fa      	ldrh	r2, [r7, #6]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	9303      	str	r3, [sp, #12]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	9302      	str	r3, [sp, #8]
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	9301      	str	r3, [sp, #4]
 8002fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 f80e 	bl	800300c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ff0:	69f8      	ldr	r0, [r7, #28]
 8002ff2:	f000 f893 	bl	800311c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	e002      	b.n	8003002 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8003000:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003002:	69bb      	ldr	r3, [r7, #24]
	}
 8003004:	4618      	mov	r0, r3
 8003006:	3720      	adds	r7, #32
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003024:	3b01      	subs	r3, #1
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	f023 0307 	bic.w	r3, r3, #7
 8003032:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <prvInitialiseNewTask+0x48>
	__asm volatile
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	617b      	str	r3, [r7, #20]
}
 8003050:	bf00      	nop
 8003052:	e7fe      	b.n	8003052 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d01f      	beq.n	800309a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800305a:	2300      	movs	r3, #0
 800305c:	61fb      	str	r3, [r7, #28]
 800305e:	e012      	b.n	8003086 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	4413      	add	r3, r2
 8003066:	7819      	ldrb	r1, [r3, #0]
 8003068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	4413      	add	r3, r2
 800306e:	3334      	adds	r3, #52	; 0x34
 8003070:	460a      	mov	r2, r1
 8003072:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	4413      	add	r3, r2
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	3301      	adds	r3, #1
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	2b0f      	cmp	r3, #15
 800308a:	d9e9      	bls.n	8003060 <prvInitialiseNewTask+0x54>
 800308c:	e000      	b.n	8003090 <prvInitialiseNewTask+0x84>
			{
				break;
 800308e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003098:	e003      	b.n	80030a2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a4:	2b06      	cmp	r3, #6
 80030a6:	d901      	bls.n	80030ac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030a8:	2306      	movs	r3, #6
 80030aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80030ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80030b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030b6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80030b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ba:	2200      	movs	r2, #0
 80030bc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c0:	3304      	adds	r3, #4
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff f9a3 	bl	800240e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ca:	3318      	adds	r3, #24
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff f99e 	bl	800240e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030da:	f1c3 0207 	rsb	r2, r3, #7
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80030e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ea:	2200      	movs	r2, #0
 80030ec:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80030ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	68f9      	ldr	r1, [r7, #12]
 80030fa:	69b8      	ldr	r0, [r7, #24]
 80030fc:	f000 fdb2 	bl	8003c64 <pxPortInitialiseStack>
 8003100:	4602      	mov	r2, r0
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800310c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003110:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003112:	bf00      	nop
 8003114:	3720      	adds	r7, #32
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003124:	f000 fe92 	bl	8003e4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003128:	4b2a      	ldr	r3, [pc, #168]	; (80031d4 <prvAddNewTaskToReadyList+0xb8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3301      	adds	r3, #1
 800312e:	4a29      	ldr	r2, [pc, #164]	; (80031d4 <prvAddNewTaskToReadyList+0xb8>)
 8003130:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003132:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <prvAddNewTaskToReadyList+0xbc>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800313a:	4a27      	ldr	r2, [pc, #156]	; (80031d8 <prvAddNewTaskToReadyList+0xbc>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003140:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <prvAddNewTaskToReadyList+0xb8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d110      	bne.n	800316a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003148:	f000 fbc4 	bl	80038d4 <prvInitialiseTaskLists>
 800314c:	e00d      	b.n	800316a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800314e:	4b23      	ldr	r3, [pc, #140]	; (80031dc <prvAddNewTaskToReadyList+0xc0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003156:	4b20      	ldr	r3, [pc, #128]	; (80031d8 <prvAddNewTaskToReadyList+0xbc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	429a      	cmp	r2, r3
 8003162:	d802      	bhi.n	800316a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003164:	4a1c      	ldr	r2, [pc, #112]	; (80031d8 <prvAddNewTaskToReadyList+0xbc>)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800316a:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <prvAddNewTaskToReadyList+0xc4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	3301      	adds	r3, #1
 8003170:	4a1b      	ldr	r2, [pc, #108]	; (80031e0 <prvAddNewTaskToReadyList+0xc4>)
 8003172:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	2201      	movs	r2, #1
 800317a:	409a      	lsls	r2, r3
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <prvAddNewTaskToReadyList+0xc8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4313      	orrs	r3, r2
 8003182:	4a18      	ldr	r2, [pc, #96]	; (80031e4 <prvAddNewTaskToReadyList+0xc8>)
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4a15      	ldr	r2, [pc, #84]	; (80031e8 <prvAddNewTaskToReadyList+0xcc>)
 8003194:	441a      	add	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	3304      	adds	r3, #4
 800319a:	4619      	mov	r1, r3
 800319c:	4610      	mov	r0, r2
 800319e:	f7ff f942 	bl	8002426 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80031a2:	f000 fe83 	bl	8003eac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80031a6:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <prvAddNewTaskToReadyList+0xc0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00e      	beq.n	80031cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <prvAddNewTaskToReadyList+0xbc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d207      	bcs.n	80031cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <prvAddNewTaskToReadyList+0xd0>)
 80031be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	200003e8 	.word	0x200003e8
 80031d8:	200002e8 	.word	0x200002e8
 80031dc:	200003f4 	.word	0x200003f4
 80031e0:	20000404 	.word	0x20000404
 80031e4:	200003f0 	.word	0x200003f0
 80031e8:	200002ec 	.word	0x200002ec
 80031ec:	e000ed04 	.word	0xe000ed04

080031f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d017      	beq.n	8003232 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <vTaskDelay+0x60>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <vTaskDelay+0x30>
	__asm volatile
 800320a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320e:	f383 8811 	msr	BASEPRI, r3
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	f3bf 8f4f 	dsb	sy
 800321a:	60bb      	str	r3, [r7, #8]
}
 800321c:	bf00      	nop
 800321e:	e7fe      	b.n	800321e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003220:	f000 f87a 	bl	8003318 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003224:	2100      	movs	r1, #0
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fcb6 	bl	8003b98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800322c:	f000 f882 	bl	8003334 <xTaskResumeAll>
 8003230:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d107      	bne.n	8003248 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <vTaskDelay+0x64>)
 800323a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003248:	bf00      	nop
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20000410 	.word	0x20000410
 8003254:	e000ed04 	.word	0xe000ed04

08003258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08a      	sub	sp, #40	; 0x28
 800325c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800325e:	2300      	movs	r3, #0
 8003260:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003262:	2300      	movs	r3, #0
 8003264:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003266:	463a      	mov	r2, r7
 8003268:	1d39      	adds	r1, r7, #4
 800326a:	f107 0308 	add.w	r3, r7, #8
 800326e:	4618      	mov	r0, r3
 8003270:	f7fc ffde 	bl	8000230 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003274:	6839      	ldr	r1, [r7, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	9202      	str	r2, [sp, #8]
 800327c:	9301      	str	r3, [sp, #4]
 800327e:	2300      	movs	r3, #0
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	2300      	movs	r3, #0
 8003284:	460a      	mov	r2, r1
 8003286:	491e      	ldr	r1, [pc, #120]	; (8003300 <vTaskStartScheduler+0xa8>)
 8003288:	481e      	ldr	r0, [pc, #120]	; (8003304 <vTaskStartScheduler+0xac>)
 800328a:	f7ff fe1d 	bl	8002ec8 <xTaskCreateStatic>
 800328e:	4603      	mov	r3, r0
 8003290:	4a1d      	ldr	r2, [pc, #116]	; (8003308 <vTaskStartScheduler+0xb0>)
 8003292:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003294:	4b1c      	ldr	r3, [pc, #112]	; (8003308 <vTaskStartScheduler+0xb0>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800329c:	2301      	movs	r3, #1
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	e001      	b.n	80032a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d116      	bne.n	80032da <vTaskStartScheduler+0x82>
	__asm volatile
 80032ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b0:	f383 8811 	msr	BASEPRI, r3
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	613b      	str	r3, [r7, #16]
}
 80032be:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80032c0:	4b12      	ldr	r3, [pc, #72]	; (800330c <vTaskStartScheduler+0xb4>)
 80032c2:	f04f 32ff 	mov.w	r2, #4294967295
 80032c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80032c8:	4b11      	ldr	r3, [pc, #68]	; (8003310 <vTaskStartScheduler+0xb8>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <vTaskStartScheduler+0xbc>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80032d4:	f000 fd48 	bl	8003d68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80032d8:	e00e      	b.n	80032f8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e0:	d10a      	bne.n	80032f8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80032e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e6:	f383 8811 	msr	BASEPRI, r3
 80032ea:	f3bf 8f6f 	isb	sy
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	60fb      	str	r3, [r7, #12]
}
 80032f4:	bf00      	nop
 80032f6:	e7fe      	b.n	80032f6 <vTaskStartScheduler+0x9e>
}
 80032f8:	bf00      	nop
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	08004de4 	.word	0x08004de4
 8003304:	080038a5 	.word	0x080038a5
 8003308:	2000040c 	.word	0x2000040c
 800330c:	20000408 	.word	0x20000408
 8003310:	200003f4 	.word	0x200003f4
 8003314:	200003ec 	.word	0x200003ec

08003318 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800331c:	4b04      	ldr	r3, [pc, #16]	; (8003330 <vTaskSuspendAll+0x18>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3301      	adds	r3, #1
 8003322:	4a03      	ldr	r2, [pc, #12]	; (8003330 <vTaskSuspendAll+0x18>)
 8003324:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003326:	bf00      	nop
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	20000410 	.word	0x20000410

08003334 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800333e:	2300      	movs	r3, #0
 8003340:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003342:	4b41      	ldr	r3, [pc, #260]	; (8003448 <xTaskResumeAll+0x114>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10a      	bne.n	8003360 <xTaskResumeAll+0x2c>
	__asm volatile
 800334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	603b      	str	r3, [r7, #0]
}
 800335c:	bf00      	nop
 800335e:	e7fe      	b.n	800335e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003360:	f000 fd74 	bl	8003e4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003364:	4b38      	ldr	r3, [pc, #224]	; (8003448 <xTaskResumeAll+0x114>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3b01      	subs	r3, #1
 800336a:	4a37      	ldr	r2, [pc, #220]	; (8003448 <xTaskResumeAll+0x114>)
 800336c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800336e:	4b36      	ldr	r3, [pc, #216]	; (8003448 <xTaskResumeAll+0x114>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d161      	bne.n	800343a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003376:	4b35      	ldr	r3, [pc, #212]	; (800344c <xTaskResumeAll+0x118>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d05d      	beq.n	800343a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800337e:	e02e      	b.n	80033de <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003380:	4b33      	ldr	r3, [pc, #204]	; (8003450 <xTaskResumeAll+0x11c>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	3318      	adds	r3, #24
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff f8a5 	bl	80024dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	3304      	adds	r3, #4
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff f8a0 	bl	80024dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	2201      	movs	r2, #1
 80033a2:	409a      	lsls	r2, r3
 80033a4:	4b2b      	ldr	r3, [pc, #172]	; (8003454 <xTaskResumeAll+0x120>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	4a2a      	ldr	r2, [pc, #168]	; (8003454 <xTaskResumeAll+0x120>)
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4a27      	ldr	r2, [pc, #156]	; (8003458 <xTaskResumeAll+0x124>)
 80033bc:	441a      	add	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3304      	adds	r3, #4
 80033c2:	4619      	mov	r1, r3
 80033c4:	4610      	mov	r0, r2
 80033c6:	f7ff f82e 	bl	8002426 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ce:	4b23      	ldr	r3, [pc, #140]	; (800345c <xTaskResumeAll+0x128>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d302      	bcc.n	80033de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80033d8:	4b21      	ldr	r3, [pc, #132]	; (8003460 <xTaskResumeAll+0x12c>)
 80033da:	2201      	movs	r2, #1
 80033dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033de:	4b1c      	ldr	r3, [pc, #112]	; (8003450 <xTaskResumeAll+0x11c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1cc      	bne.n	8003380 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80033ec:	f000 fb10 	bl	8003a10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80033f0:	4b1c      	ldr	r3, [pc, #112]	; (8003464 <xTaskResumeAll+0x130>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d010      	beq.n	800341e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80033fc:	f000 f836 	bl	800346c <xTaskIncrementTick>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003406:	4b16      	ldr	r3, [pc, #88]	; (8003460 <xTaskResumeAll+0x12c>)
 8003408:	2201      	movs	r2, #1
 800340a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f1      	bne.n	80033fc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003418:	4b12      	ldr	r3, [pc, #72]	; (8003464 <xTaskResumeAll+0x130>)
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800341e:	4b10      	ldr	r3, [pc, #64]	; (8003460 <xTaskResumeAll+0x12c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003426:	2301      	movs	r3, #1
 8003428:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800342a:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <xTaskResumeAll+0x134>)
 800342c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800343a:	f000 fd37 	bl	8003eac <vPortExitCritical>

	return xAlreadyYielded;
 800343e:	68bb      	ldr	r3, [r7, #8]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20000410 	.word	0x20000410
 800344c:	200003e8 	.word	0x200003e8
 8003450:	200003a8 	.word	0x200003a8
 8003454:	200003f0 	.word	0x200003f0
 8003458:	200002ec 	.word	0x200002ec
 800345c:	200002e8 	.word	0x200002e8
 8003460:	200003fc 	.word	0x200003fc
 8003464:	200003f8 	.word	0x200003f8
 8003468:	e000ed04 	.word	0xe000ed04

0800346c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003476:	4b4e      	ldr	r3, [pc, #312]	; (80035b0 <xTaskIncrementTick+0x144>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	f040 808e 	bne.w	800359c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003480:	4b4c      	ldr	r3, [pc, #304]	; (80035b4 <xTaskIncrementTick+0x148>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3301      	adds	r3, #1
 8003486:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003488:	4a4a      	ldr	r2, [pc, #296]	; (80035b4 <xTaskIncrementTick+0x148>)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d120      	bne.n	80034d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003494:	4b48      	ldr	r3, [pc, #288]	; (80035b8 <xTaskIncrementTick+0x14c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	603b      	str	r3, [r7, #0]
}
 80034b0:	bf00      	nop
 80034b2:	e7fe      	b.n	80034b2 <xTaskIncrementTick+0x46>
 80034b4:	4b40      	ldr	r3, [pc, #256]	; (80035b8 <xTaskIncrementTick+0x14c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	4b40      	ldr	r3, [pc, #256]	; (80035bc <xTaskIncrementTick+0x150>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a3e      	ldr	r2, [pc, #248]	; (80035b8 <xTaskIncrementTick+0x14c>)
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	4a3e      	ldr	r2, [pc, #248]	; (80035bc <xTaskIncrementTick+0x150>)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	4b3d      	ldr	r3, [pc, #244]	; (80035c0 <xTaskIncrementTick+0x154>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3301      	adds	r3, #1
 80034ce:	4a3c      	ldr	r2, [pc, #240]	; (80035c0 <xTaskIncrementTick+0x154>)
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	f000 fa9d 	bl	8003a10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034d6:	4b3b      	ldr	r3, [pc, #236]	; (80035c4 <xTaskIncrementTick+0x158>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d348      	bcc.n	8003572 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034e0:	4b35      	ldr	r3, [pc, #212]	; (80035b8 <xTaskIncrementTick+0x14c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d104      	bne.n	80034f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034ea:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <xTaskIncrementTick+0x158>)
 80034ec:	f04f 32ff 	mov.w	r2, #4294967295
 80034f0:	601a      	str	r2, [r3, #0]
					break;
 80034f2:	e03e      	b.n	8003572 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034f4:	4b30      	ldr	r3, [pc, #192]	; (80035b8 <xTaskIncrementTick+0x14c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	429a      	cmp	r2, r3
 800350a:	d203      	bcs.n	8003514 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800350c:	4a2d      	ldr	r2, [pc, #180]	; (80035c4 <xTaskIncrementTick+0x158>)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003512:	e02e      	b.n	8003572 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	3304      	adds	r3, #4
 8003518:	4618      	mov	r0, r3
 800351a:	f7fe ffdf 	bl	80024dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	2b00      	cmp	r3, #0
 8003524:	d004      	beq.n	8003530 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	3318      	adds	r3, #24
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe ffd6 	bl	80024dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	2201      	movs	r2, #1
 8003536:	409a      	lsls	r2, r3
 8003538:	4b23      	ldr	r3, [pc, #140]	; (80035c8 <xTaskIncrementTick+0x15c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4313      	orrs	r3, r2
 800353e:	4a22      	ldr	r2, [pc, #136]	; (80035c8 <xTaskIncrementTick+0x15c>)
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4a1f      	ldr	r2, [pc, #124]	; (80035cc <xTaskIncrementTick+0x160>)
 8003550:	441a      	add	r2, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	3304      	adds	r3, #4
 8003556:	4619      	mov	r1, r3
 8003558:	4610      	mov	r0, r2
 800355a:	f7fe ff64 	bl	8002426 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003562:	4b1b      	ldr	r3, [pc, #108]	; (80035d0 <xTaskIncrementTick+0x164>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	429a      	cmp	r2, r3
 800356a:	d3b9      	bcc.n	80034e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800356c:	2301      	movs	r3, #1
 800356e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003570:	e7b6      	b.n	80034e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003572:	4b17      	ldr	r3, [pc, #92]	; (80035d0 <xTaskIncrementTick+0x164>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003578:	4914      	ldr	r1, [pc, #80]	; (80035cc <xTaskIncrementTick+0x160>)
 800357a:	4613      	mov	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d901      	bls.n	800358e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800358a:	2301      	movs	r3, #1
 800358c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800358e:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <xTaskIncrementTick+0x168>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d007      	beq.n	80035a6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003596:	2301      	movs	r3, #1
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	e004      	b.n	80035a6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800359c:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <xTaskIncrementTick+0x16c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3301      	adds	r3, #1
 80035a2:	4a0d      	ldr	r2, [pc, #52]	; (80035d8 <xTaskIncrementTick+0x16c>)
 80035a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80035a6:	697b      	ldr	r3, [r7, #20]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20000410 	.word	0x20000410
 80035b4:	200003ec 	.word	0x200003ec
 80035b8:	200003a0 	.word	0x200003a0
 80035bc:	200003a4 	.word	0x200003a4
 80035c0:	20000400 	.word	0x20000400
 80035c4:	20000408 	.word	0x20000408
 80035c8:	200003f0 	.word	0x200003f0
 80035cc:	200002ec 	.word	0x200002ec
 80035d0:	200002e8 	.word	0x200002e8
 80035d4:	200003fc 	.word	0x200003fc
 80035d8:	200003f8 	.word	0x200003f8

080035dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035e2:	4b26      	ldr	r3, [pc, #152]	; (800367c <vTaskSwitchContext+0xa0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80035ea:	4b25      	ldr	r3, [pc, #148]	; (8003680 <vTaskSwitchContext+0xa4>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80035f0:	e03f      	b.n	8003672 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80035f2:	4b23      	ldr	r3, [pc, #140]	; (8003680 <vTaskSwitchContext+0xa4>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035f8:	4b22      	ldr	r3, [pc, #136]	; (8003684 <vTaskSwitchContext+0xa8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	fab3 f383 	clz	r3, r3
 8003604:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003606:	7afb      	ldrb	r3, [r7, #11]
 8003608:	f1c3 031f 	rsb	r3, r3, #31
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	491e      	ldr	r1, [pc, #120]	; (8003688 <vTaskSwitchContext+0xac>)
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10a      	bne.n	8003638 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003626:	f383 8811 	msr	BASEPRI, r3
 800362a:	f3bf 8f6f 	isb	sy
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	607b      	str	r3, [r7, #4]
}
 8003634:	bf00      	nop
 8003636:	e7fe      	b.n	8003636 <vTaskSwitchContext+0x5a>
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4a11      	ldr	r2, [pc, #68]	; (8003688 <vTaskSwitchContext+0xac>)
 8003644:	4413      	add	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	605a      	str	r2, [r3, #4]
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	3308      	adds	r3, #8
 800365a:	429a      	cmp	r2, r3
 800365c:	d104      	bne.n	8003668 <vTaskSwitchContext+0x8c>
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	605a      	str	r2, [r3, #4]
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	4a07      	ldr	r2, [pc, #28]	; (800368c <vTaskSwitchContext+0xb0>)
 8003670:	6013      	str	r3, [r2, #0]
}
 8003672:	bf00      	nop
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr
 800367c:	20000410 	.word	0x20000410
 8003680:	200003fc 	.word	0x200003fc
 8003684:	200003f0 	.word	0x200003f0
 8003688:	200002ec 	.word	0x200002ec
 800368c:	200002e8 	.word	0x200002e8

08003690 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10a      	bne.n	80036b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	60fb      	str	r3, [r7, #12]
}
 80036b2:	bf00      	nop
 80036b4:	e7fe      	b.n	80036b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036b6:	4b07      	ldr	r3, [pc, #28]	; (80036d4 <vTaskPlaceOnEventList+0x44>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3318      	adds	r3, #24
 80036bc:	4619      	mov	r1, r3
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fe fed4 	bl	800246c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036c4:	2101      	movs	r1, #1
 80036c6:	6838      	ldr	r0, [r7, #0]
 80036c8:	f000 fa66 	bl	8003b98 <prvAddCurrentTaskToDelayedList>
}
 80036cc:	bf00      	nop
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	200002e8 	.word	0x200002e8

080036d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10a      	bne.n	8003704 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80036ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f2:	f383 8811 	msr	BASEPRI, r3
 80036f6:	f3bf 8f6f 	isb	sy
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	60fb      	str	r3, [r7, #12]
}
 8003700:	bf00      	nop
 8003702:	e7fe      	b.n	8003702 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	3318      	adds	r3, #24
 8003708:	4618      	mov	r0, r3
 800370a:	f7fe fee7 	bl	80024dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800370e:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <xTaskRemoveFromEventList+0xac>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d11c      	bne.n	8003750 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	3304      	adds	r3, #4
 800371a:	4618      	mov	r0, r3
 800371c:	f7fe fede 	bl	80024dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	2201      	movs	r2, #1
 8003726:	409a      	lsls	r2, r3
 8003728:	4b17      	ldr	r3, [pc, #92]	; (8003788 <xTaskRemoveFromEventList+0xb0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4313      	orrs	r3, r2
 800372e:	4a16      	ldr	r2, [pc, #88]	; (8003788 <xTaskRemoveFromEventList+0xb0>)
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4a13      	ldr	r2, [pc, #76]	; (800378c <xTaskRemoveFromEventList+0xb4>)
 8003740:	441a      	add	r2, r3
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	3304      	adds	r3, #4
 8003746:	4619      	mov	r1, r3
 8003748:	4610      	mov	r0, r2
 800374a:	f7fe fe6c 	bl	8002426 <vListInsertEnd>
 800374e:	e005      	b.n	800375c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	3318      	adds	r3, #24
 8003754:	4619      	mov	r1, r3
 8003756:	480e      	ldr	r0, [pc, #56]	; (8003790 <xTaskRemoveFromEventList+0xb8>)
 8003758:	f7fe fe65 	bl	8002426 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <xTaskRemoveFromEventList+0xbc>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	429a      	cmp	r2, r3
 8003768:	d905      	bls.n	8003776 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800376a:	2301      	movs	r3, #1
 800376c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800376e:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <xTaskRemoveFromEventList+0xc0>)
 8003770:	2201      	movs	r2, #1
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	e001      	b.n	800377a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800377a:	697b      	ldr	r3, [r7, #20]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20000410 	.word	0x20000410
 8003788:	200003f0 	.word	0x200003f0
 800378c:	200002ec 	.word	0x200002ec
 8003790:	200003a8 	.word	0x200003a8
 8003794:	200002e8 	.word	0x200002e8
 8003798:	200003fc 	.word	0x200003fc

0800379c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037a4:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <vTaskInternalSetTimeOutState+0x24>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <vTaskInternalSetTimeOutState+0x28>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	605a      	str	r2, [r3, #4]
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	20000400 	.word	0x20000400
 80037c4:	200003ec 	.word	0x200003ec

080037c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80037d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	613b      	str	r3, [r7, #16]
}
 80037ea:	bf00      	nop
 80037ec:	e7fe      	b.n	80037ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10a      	bne.n	800380a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80037f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	60fb      	str	r3, [r7, #12]
}
 8003806:	bf00      	nop
 8003808:	e7fe      	b.n	8003808 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800380a:	f000 fb1f 	bl	8003e4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800380e:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <xTaskCheckForTimeOut+0xbc>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003826:	d102      	bne.n	800382e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003828:	2300      	movs	r3, #0
 800382a:	61fb      	str	r3, [r7, #28]
 800382c:	e023      	b.n	8003876 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4b15      	ldr	r3, [pc, #84]	; (8003888 <xTaskCheckForTimeOut+0xc0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d007      	beq.n	800384a <xTaskCheckForTimeOut+0x82>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	429a      	cmp	r2, r3
 8003842:	d302      	bcc.n	800384a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003844:	2301      	movs	r3, #1
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	e015      	b.n	8003876 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	429a      	cmp	r2, r3
 8003852:	d20b      	bcs.n	800386c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	1ad2      	subs	r2, r2, r3
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff ff9b 	bl	800379c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003866:	2300      	movs	r3, #0
 8003868:	61fb      	str	r3, [r7, #28]
 800386a:	e004      	b.n	8003876 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003872:	2301      	movs	r3, #1
 8003874:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003876:	f000 fb19 	bl	8003eac <vPortExitCritical>

	return xReturn;
 800387a:	69fb      	ldr	r3, [r7, #28]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3720      	adds	r7, #32
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	200003ec 	.word	0x200003ec
 8003888:	20000400 	.word	0x20000400

0800388c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003890:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <vTaskMissedYield+0x14>)
 8003892:	2201      	movs	r2, #1
 8003894:	601a      	str	r2, [r3, #0]
}
 8003896:	bf00      	nop
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	200003fc 	.word	0x200003fc

080038a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80038ac:	f000 f852 	bl	8003954 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <prvIdleTask+0x28>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d9f9      	bls.n	80038ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <prvIdleTask+0x2c>)
 80038ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80038c8:	e7f0      	b.n	80038ac <prvIdleTask+0x8>
 80038ca:	bf00      	nop
 80038cc:	200002ec 	.word	0x200002ec
 80038d0:	e000ed04 	.word	0xe000ed04

080038d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038da:	2300      	movs	r3, #0
 80038dc:	607b      	str	r3, [r7, #4]
 80038de:	e00c      	b.n	80038fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4a12      	ldr	r2, [pc, #72]	; (8003934 <prvInitialiseTaskLists+0x60>)
 80038ec:	4413      	add	r3, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe fd6e 	bl	80023d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3301      	adds	r3, #1
 80038f8:	607b      	str	r3, [r7, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b06      	cmp	r3, #6
 80038fe:	d9ef      	bls.n	80038e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003900:	480d      	ldr	r0, [pc, #52]	; (8003938 <prvInitialiseTaskLists+0x64>)
 8003902:	f7fe fd65 	bl	80023d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003906:	480d      	ldr	r0, [pc, #52]	; (800393c <prvInitialiseTaskLists+0x68>)
 8003908:	f7fe fd62 	bl	80023d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800390c:	480c      	ldr	r0, [pc, #48]	; (8003940 <prvInitialiseTaskLists+0x6c>)
 800390e:	f7fe fd5f 	bl	80023d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003912:	480c      	ldr	r0, [pc, #48]	; (8003944 <prvInitialiseTaskLists+0x70>)
 8003914:	f7fe fd5c 	bl	80023d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003918:	480b      	ldr	r0, [pc, #44]	; (8003948 <prvInitialiseTaskLists+0x74>)
 800391a:	f7fe fd59 	bl	80023d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800391e:	4b0b      	ldr	r3, [pc, #44]	; (800394c <prvInitialiseTaskLists+0x78>)
 8003920:	4a05      	ldr	r2, [pc, #20]	; (8003938 <prvInitialiseTaskLists+0x64>)
 8003922:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003924:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <prvInitialiseTaskLists+0x7c>)
 8003926:	4a05      	ldr	r2, [pc, #20]	; (800393c <prvInitialiseTaskLists+0x68>)
 8003928:	601a      	str	r2, [r3, #0]
}
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	200002ec 	.word	0x200002ec
 8003938:	20000378 	.word	0x20000378
 800393c:	2000038c 	.word	0x2000038c
 8003940:	200003a8 	.word	0x200003a8
 8003944:	200003bc 	.word	0x200003bc
 8003948:	200003d4 	.word	0x200003d4
 800394c:	200003a0 	.word	0x200003a0
 8003950:	200003a4 	.word	0x200003a4

08003954 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800395a:	e019      	b.n	8003990 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800395c:	f000 fa76 	bl	8003e4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003960:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <prvCheckTasksWaitingTermination+0x50>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3304      	adds	r3, #4
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe fdb5 	bl	80024dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003972:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <prvCheckTasksWaitingTermination+0x54>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3b01      	subs	r3, #1
 8003978:	4a0b      	ldr	r2, [pc, #44]	; (80039a8 <prvCheckTasksWaitingTermination+0x54>)
 800397a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <prvCheckTasksWaitingTermination+0x58>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3b01      	subs	r3, #1
 8003982:	4a0a      	ldr	r2, [pc, #40]	; (80039ac <prvCheckTasksWaitingTermination+0x58>)
 8003984:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003986:	f000 fa91 	bl	8003eac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f810 	bl	80039b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <prvCheckTasksWaitingTermination+0x58>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e1      	bne.n	800395c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003998:	bf00      	nop
 800399a:	bf00      	nop
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	200003bc 	.word	0x200003bc
 80039a8:	200003e8 	.word	0x200003e8
 80039ac:	200003d0 	.word	0x200003d0

080039b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d108      	bne.n	80039d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fc0c 	bl	80041e4 <vPortFree>
				vPortFree( pxTCB );
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fc09 	bl	80041e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80039d2:	e018      	b.n	8003a06 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d103      	bne.n	80039e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fc00 	bl	80041e4 <vPortFree>
	}
 80039e4:	e00f      	b.n	8003a06 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d00a      	beq.n	8003a06 <prvDeleteTCB+0x56>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	60fb      	str	r3, [r7, #12]
}
 8003a02:	bf00      	nop
 8003a04:	e7fe      	b.n	8003a04 <prvDeleteTCB+0x54>
	}
 8003a06:	bf00      	nop
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a16:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <prvResetNextTaskUnblockTime+0x38>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d104      	bne.n	8003a2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a20:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <prvResetNextTaskUnblockTime+0x3c>)
 8003a22:	f04f 32ff 	mov.w	r2, #4294967295
 8003a26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a28:	e008      	b.n	8003a3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a2a:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <prvResetNextTaskUnblockTime+0x38>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4a04      	ldr	r2, [pc, #16]	; (8003a4c <prvResetNextTaskUnblockTime+0x3c>)
 8003a3a:	6013      	str	r3, [r2, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	200003a0 	.word	0x200003a0
 8003a4c:	20000408 	.word	0x20000408

08003a50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003a56:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <xTaskGetSchedulerState+0x34>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	607b      	str	r3, [r7, #4]
 8003a62:	e008      	b.n	8003a76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a64:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <xTaskGetSchedulerState+0x38>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d102      	bne.n	8003a72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	607b      	str	r3, [r7, #4]
 8003a70:	e001      	b.n	8003a76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a72:	2300      	movs	r3, #0
 8003a74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a76:	687b      	ldr	r3, [r7, #4]
	}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	200003f4 	.word	0x200003f4
 8003a88:	20000410 	.word	0x20000410

08003a8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d06e      	beq.n	8003b80 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003aa2:	4b3a      	ldr	r3, [pc, #232]	; (8003b8c <xTaskPriorityDisinherit+0x100>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d00a      	beq.n	8003ac2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	60fb      	str	r3, [r7, #12]
}
 8003abe:	bf00      	nop
 8003ac0:	e7fe      	b.n	8003ac0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10a      	bne.n	8003ae0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	60bb      	str	r3, [r7, #8]
}
 8003adc:	bf00      	nop
 8003ade:	e7fe      	b.n	8003ade <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae4:	1e5a      	subs	r2, r3, #1
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d044      	beq.n	8003b80 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d140      	bne.n	8003b80 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	3304      	adds	r3, #4
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe fcea 	bl	80024dc <uxListRemove>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d115      	bne.n	8003b3a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b12:	491f      	ldr	r1, [pc, #124]	; (8003b90 <xTaskPriorityDisinherit+0x104>)
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10a      	bne.n	8003b3a <xTaskPriorityDisinherit+0xae>
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	2201      	movs	r2, #1
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	43da      	mvns	r2, r3
 8003b30:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <xTaskPriorityDisinherit+0x108>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4013      	ands	r3, r2
 8003b36:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <xTaskPriorityDisinherit+0x108>)
 8003b38:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	f1c3 0207 	rsb	r2, r3, #7
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	2201      	movs	r2, #1
 8003b54:	409a      	lsls	r2, r3
 8003b56:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <xTaskPriorityDisinherit+0x108>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	4a0d      	ldr	r2, [pc, #52]	; (8003b94 <xTaskPriorityDisinherit+0x108>)
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4a08      	ldr	r2, [pc, #32]	; (8003b90 <xTaskPriorityDisinherit+0x104>)
 8003b6e:	441a      	add	r2, r3
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	3304      	adds	r3, #4
 8003b74:	4619      	mov	r1, r3
 8003b76:	4610      	mov	r0, r2
 8003b78:	f7fe fc55 	bl	8002426 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b80:	697b      	ldr	r3, [r7, #20]
	}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	200002e8 	.word	0x200002e8
 8003b90:	200002ec 	.word	0x200002ec
 8003b94:	200003f0 	.word	0x200003f0

08003b98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ba2:	4b29      	ldr	r3, [pc, #164]	; (8003c48 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ba8:	4b28      	ldr	r3, [pc, #160]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3304      	adds	r3, #4
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe fc94 	bl	80024dc <uxListRemove>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10b      	bne.n	8003bd2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003bba:	4b24      	ldr	r3, [pc, #144]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43da      	mvns	r2, r3
 8003bc8:	4b21      	ldr	r3, [pc, #132]	; (8003c50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	4a20      	ldr	r2, [pc, #128]	; (8003c50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003bd0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d10a      	bne.n	8003bf0 <prvAddCurrentTaskToDelayedList+0x58>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003be0:	4b1a      	ldr	r3, [pc, #104]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3304      	adds	r3, #4
 8003be6:	4619      	mov	r1, r3
 8003be8:	481a      	ldr	r0, [pc, #104]	; (8003c54 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003bea:	f7fe fc1c 	bl	8002426 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003bee:	e026      	b.n	8003c3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bf8:	4b14      	ldr	r3, [pc, #80]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d209      	bcs.n	8003c1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c08:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4619      	mov	r1, r3
 8003c14:	4610      	mov	r0, r2
 8003c16:	f7fe fc29 	bl	800246c <vListInsert>
}
 8003c1a:	e010      	b.n	8003c3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3304      	adds	r3, #4
 8003c26:	4619      	mov	r1, r3
 8003c28:	4610      	mov	r0, r2
 8003c2a:	f7fe fc1f 	bl	800246c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d202      	bcs.n	8003c3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003c38:	4a09      	ldr	r2, [pc, #36]	; (8003c60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	6013      	str	r3, [r2, #0]
}
 8003c3e:	bf00      	nop
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	200003ec 	.word	0x200003ec
 8003c4c:	200002e8 	.word	0x200002e8
 8003c50:	200003f0 	.word	0x200003f0
 8003c54:	200003d4 	.word	0x200003d4
 8003c58:	200003a4 	.word	0x200003a4
 8003c5c:	200003a0 	.word	0x200003a0
 8003c60:	20000408 	.word	0x20000408

08003c64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3b04      	subs	r3, #4
 8003c74:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	3b04      	subs	r3, #4
 8003c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f023 0201 	bic.w	r2, r3, #1
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3b04      	subs	r3, #4
 8003c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c94:	4a08      	ldr	r2, [pc, #32]	; (8003cb8 <pxPortInitialiseStack+0x54>)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3b14      	subs	r3, #20
 8003c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	3b20      	subs	r3, #32
 8003caa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003cac:	68fb      	ldr	r3, [r7, #12]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr
 8003cb8:	08003cbd 	.word	0x08003cbd

08003cbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003cc6:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <prvTaskExitError+0x54>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cce:	d00a      	beq.n	8003ce6 <prvTaskExitError+0x2a>
	__asm volatile
 8003cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	60fb      	str	r3, [r7, #12]
}
 8003ce2:	bf00      	nop
 8003ce4:	e7fe      	b.n	8003ce4 <prvTaskExitError+0x28>
	__asm volatile
 8003ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	60bb      	str	r3, [r7, #8]
}
 8003cf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003cfa:	bf00      	nop
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0fc      	beq.n	8003cfc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003d02:	bf00      	nop
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	2000000c 	.word	0x2000000c
	...

08003d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003d20:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <pxCurrentTCBConst2>)
 8003d22:	6819      	ldr	r1, [r3, #0]
 8003d24:	6808      	ldr	r0, [r1, #0]
 8003d26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003d2a:	f380 8809 	msr	PSP, r0
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f04f 0000 	mov.w	r0, #0
 8003d36:	f380 8811 	msr	BASEPRI, r0
 8003d3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003d3e:	4770      	bx	lr

08003d40 <pxCurrentTCBConst2>:
 8003d40:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003d44:	bf00      	nop
 8003d46:	bf00      	nop

08003d48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003d48:	4806      	ldr	r0, [pc, #24]	; (8003d64 <prvPortStartFirstTask+0x1c>)
 8003d4a:	6800      	ldr	r0, [r0, #0]
 8003d4c:	6800      	ldr	r0, [r0, #0]
 8003d4e:	f380 8808 	msr	MSP, r0
 8003d52:	b662      	cpsie	i
 8003d54:	b661      	cpsie	f
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	df00      	svc	0
 8003d60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d62:	bf00      	nop
 8003d64:	e000ed08 	.word	0xe000ed08

08003d68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d6e:	4b32      	ldr	r3, [pc, #200]	; (8003e38 <xPortStartScheduler+0xd0>)
 8003d70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	22ff      	movs	r2, #255	; 0xff
 8003d7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	4b2a      	ldr	r3, [pc, #168]	; (8003e3c <xPortStartScheduler+0xd4>)
 8003d94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d96:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <xPortStartScheduler+0xd8>)
 8003d98:	2207      	movs	r2, #7
 8003d9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d9c:	e009      	b.n	8003db2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003d9e:	4b28      	ldr	r3, [pc, #160]	; (8003e40 <xPortStartScheduler+0xd8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	4a26      	ldr	r2, [pc, #152]	; (8003e40 <xPortStartScheduler+0xd8>)
 8003da6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003db2:	78fb      	ldrb	r3, [r7, #3]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dba:	2b80      	cmp	r3, #128	; 0x80
 8003dbc:	d0ef      	beq.n	8003d9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003dbe:	4b20      	ldr	r3, [pc, #128]	; (8003e40 <xPortStartScheduler+0xd8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f1c3 0307 	rsb	r3, r3, #7
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d00a      	beq.n	8003de0 <xPortStartScheduler+0x78>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	60bb      	str	r3, [r7, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	e7fe      	b.n	8003dde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003de0:	4b17      	ldr	r3, [pc, #92]	; (8003e40 <xPortStartScheduler+0xd8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	021b      	lsls	r3, r3, #8
 8003de6:	4a16      	ldr	r2, [pc, #88]	; (8003e40 <xPortStartScheduler+0xd8>)
 8003de8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003dea:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <xPortStartScheduler+0xd8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003df2:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <xPortStartScheduler+0xd8>)
 8003df4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003dfe:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <xPortStartScheduler+0xdc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a10      	ldr	r2, [pc, #64]	; (8003e44 <xPortStartScheduler+0xdc>)
 8003e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003e0a:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <xPortStartScheduler+0xdc>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a0d      	ldr	r2, [pc, #52]	; (8003e44 <xPortStartScheduler+0xdc>)
 8003e10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003e14:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003e16:	f000 f8b9 	bl	8003f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e1a:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <xPortStartScheduler+0xe0>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003e20:	f7ff ff92 	bl	8003d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e24:	f7ff fbda 	bl	80035dc <vTaskSwitchContext>
	prvTaskExitError();
 8003e28:	f7ff ff48 	bl	8003cbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	e000e400 	.word	0xe000e400
 8003e3c:	20000414 	.word	0x20000414
 8003e40:	20000418 	.word	0x20000418
 8003e44:	e000ed20 	.word	0xe000ed20
 8003e48:	2000000c 	.word	0x2000000c

08003e4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	607b      	str	r3, [r7, #4]
}
 8003e64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003e66:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <vPortEnterCritical+0x58>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ea4 <vPortEnterCritical+0x58>)
 8003e6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003e70:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <vPortEnterCritical+0x58>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d10f      	bne.n	8003e98 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <vPortEnterCritical+0x5c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <vPortEnterCritical+0x4c>
	__asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	603b      	str	r3, [r7, #0]
}
 8003e94:	bf00      	nop
 8003e96:	e7fe      	b.n	8003e96 <vPortEnterCritical+0x4a>
	}
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	2000000c 	.word	0x2000000c
 8003ea8:	e000ed04 	.word	0xe000ed04

08003eac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003eb2:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <vPortExitCritical+0x4c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10a      	bne.n	8003ed0 <vPortExitCritical+0x24>
	__asm volatile
 8003eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	607b      	str	r3, [r7, #4]
}
 8003ecc:	bf00      	nop
 8003ece:	e7fe      	b.n	8003ece <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ed0:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <vPortExitCritical+0x4c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	4a08      	ldr	r2, [pc, #32]	; (8003ef8 <vPortExitCritical+0x4c>)
 8003ed8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003eda:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <vPortExitCritical+0x4c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d105      	bne.n	8003eee <vPortExitCritical+0x42>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	f383 8811 	msr	BASEPRI, r3
}
 8003eec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr
 8003ef8:	2000000c 	.word	0x2000000c
 8003efc:	00000000 	.word	0x00000000

08003f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f00:	f3ef 8009 	mrs	r0, PSP
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <pxCurrentTCBConst>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f10:	6010      	str	r0, [r2, #0]
 8003f12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003f16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f1a:	f380 8811 	msr	BASEPRI, r0
 8003f1e:	f7ff fb5d 	bl	80035dc <vTaskSwitchContext>
 8003f22:	f04f 0000 	mov.w	r0, #0
 8003f26:	f380 8811 	msr	BASEPRI, r0
 8003f2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003f2e:	6819      	ldr	r1, [r3, #0]
 8003f30:	6808      	ldr	r0, [r1, #0]
 8003f32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f36:	f380 8809 	msr	PSP, r0
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	4770      	bx	lr

08003f40 <pxCurrentTCBConst>:
 8003f40:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop

08003f48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	607b      	str	r3, [r7, #4]
}
 8003f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f62:	f7ff fa83 	bl	800346c <xTaskIncrementTick>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f6c:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <SysTick_Handler+0x40>)
 8003f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	2300      	movs	r3, #0
 8003f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	f383 8811 	msr	BASEPRI, r3
}
 8003f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003f80:	bf00      	nop
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	e000ed04 	.word	0xe000ed04

08003f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f90:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <vPortSetupTimerInterrupt+0x30>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f96:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <vPortSetupTimerInterrupt+0x34>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f9c:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <vPortSetupTimerInterrupt+0x38>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a09      	ldr	r2, [pc, #36]	; (8003fc8 <vPortSetupTimerInterrupt+0x3c>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	099b      	lsrs	r3, r3, #6
 8003fa8:	4a08      	ldr	r2, [pc, #32]	; (8003fcc <vPortSetupTimerInterrupt+0x40>)
 8003faa:	3b01      	subs	r3, #1
 8003fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003fae:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <vPortSetupTimerInterrupt+0x30>)
 8003fb0:	2207      	movs	r2, #7
 8003fb2:	601a      	str	r2, [r3, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr
 8003fbc:	e000e010 	.word	0xe000e010
 8003fc0:	e000e018 	.word	0xe000e018
 8003fc4:	20000000 	.word	0x20000000
 8003fc8:	10624dd3 	.word	0x10624dd3
 8003fcc:	e000e014 	.word	0xe000e014

08003fd0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003fd6:	f3ef 8305 	mrs	r3, IPSR
 8003fda:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b0f      	cmp	r3, #15
 8003fe0:	d914      	bls.n	800400c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003fe2:	4a16      	ldr	r2, [pc, #88]	; (800403c <vPortValidateInterruptPriority+0x6c>)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003fec:	4b14      	ldr	r3, [pc, #80]	; (8004040 <vPortValidateInterruptPriority+0x70>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	7afa      	ldrb	r2, [r7, #11]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d20a      	bcs.n	800400c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffa:	f383 8811 	msr	BASEPRI, r3
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	607b      	str	r3, [r7, #4]
}
 8004008:	bf00      	nop
 800400a:	e7fe      	b.n	800400a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800400c:	4b0d      	ldr	r3, [pc, #52]	; (8004044 <vPortValidateInterruptPriority+0x74>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004014:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <vPortValidateInterruptPriority+0x78>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d90a      	bls.n	8004032 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800401c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	603b      	str	r3, [r7, #0]
}
 800402e:	bf00      	nop
 8004030:	e7fe      	b.n	8004030 <vPortValidateInterruptPriority+0x60>
	}
 8004032:	bf00      	nop
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr
 800403c:	e000e3f0 	.word	0xe000e3f0
 8004040:	20000414 	.word	0x20000414
 8004044:	e000ed0c 	.word	0xe000ed0c
 8004048:	20000418 	.word	0x20000418

0800404c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08a      	sub	sp, #40	; 0x28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004054:	2300      	movs	r3, #0
 8004056:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004058:	f7ff f95e 	bl	8003318 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800405c:	4b5b      	ldr	r3, [pc, #364]	; (80041cc <pvPortMalloc+0x180>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004064:	f000 f920 	bl	80042a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004068:	4b59      	ldr	r3, [pc, #356]	; (80041d0 <pvPortMalloc+0x184>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4013      	ands	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	f040 8093 	bne.w	800419c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01d      	beq.n	80040b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800407c:	2208      	movs	r2, #8
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4413      	add	r3, r2
 8004082:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	2b00      	cmp	r3, #0
 800408c:	d014      	beq.n	80040b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f023 0307 	bic.w	r3, r3, #7
 8004094:	3308      	adds	r3, #8
 8004096:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <pvPortMalloc+0x6c>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	617b      	str	r3, [r7, #20]
}
 80040b4:	bf00      	nop
 80040b6:	e7fe      	b.n	80040b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d06e      	beq.n	800419c <pvPortMalloc+0x150>
 80040be:	4b45      	ldr	r3, [pc, #276]	; (80041d4 <pvPortMalloc+0x188>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d869      	bhi.n	800419c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80040c8:	4b43      	ldr	r3, [pc, #268]	; (80041d8 <pvPortMalloc+0x18c>)
 80040ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80040cc:	4b42      	ldr	r3, [pc, #264]	; (80041d8 <pvPortMalloc+0x18c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040d2:	e004      	b.n	80040de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d903      	bls.n	80040f0 <pvPortMalloc+0xa4>
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1f1      	bne.n	80040d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80040f0:	4b36      	ldr	r3, [pc, #216]	; (80041cc <pvPortMalloc+0x180>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d050      	beq.n	800419c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2208      	movs	r2, #8
 8004100:	4413      	add	r3, r2
 8004102:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	1ad2      	subs	r2, r2, r3
 8004114:	2308      	movs	r3, #8
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	429a      	cmp	r2, r3
 800411a:	d91f      	bls.n	800415c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800411c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4413      	add	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <pvPortMalloc+0xf8>
	__asm volatile
 800412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	613b      	str	r3, [r7, #16]
}
 8004140:	bf00      	nop
 8004142:	e7fe      	b.n	8004142 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	1ad2      	subs	r2, r2, r3
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004156:	69b8      	ldr	r0, [r7, #24]
 8004158:	f000 f908 	bl	800436c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800415c:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <pvPortMalloc+0x188>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	4a1b      	ldr	r2, [pc, #108]	; (80041d4 <pvPortMalloc+0x188>)
 8004168:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800416a:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <pvPortMalloc+0x188>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	4b1b      	ldr	r3, [pc, #108]	; (80041dc <pvPortMalloc+0x190>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	429a      	cmp	r2, r3
 8004174:	d203      	bcs.n	800417e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004176:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <pvPortMalloc+0x188>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a18      	ldr	r2, [pc, #96]	; (80041dc <pvPortMalloc+0x190>)
 800417c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <pvPortMalloc+0x184>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	431a      	orrs	r2, r3
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004192:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <pvPortMalloc+0x194>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3301      	adds	r3, #1
 8004198:	4a11      	ldr	r2, [pc, #68]	; (80041e0 <pvPortMalloc+0x194>)
 800419a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800419c:	f7ff f8ca 	bl	8003334 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <pvPortMalloc+0x174>
	__asm volatile
 80041aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	60fb      	str	r3, [r7, #12]
}
 80041bc:	bf00      	nop
 80041be:	e7fe      	b.n	80041be <pvPortMalloc+0x172>
	return pvReturn;
 80041c0:	69fb      	ldr	r3, [r7, #28]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3728      	adds	r7, #40	; 0x28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20001024 	.word	0x20001024
 80041d0:	20001038 	.word	0x20001038
 80041d4:	20001028 	.word	0x20001028
 80041d8:	2000101c 	.word	0x2000101c
 80041dc:	2000102c 	.word	0x2000102c
 80041e0:	20001030 	.word	0x20001030

080041e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d04d      	beq.n	8004292 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80041f6:	2308      	movs	r3, #8
 80041f8:	425b      	negs	r3, r3
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4413      	add	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	4b24      	ldr	r3, [pc, #144]	; (800429c <vPortFree+0xb8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4013      	ands	r3, r2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <vPortFree+0x44>
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	60fb      	str	r3, [r7, #12]
}
 8004224:	bf00      	nop
 8004226:	e7fe      	b.n	8004226 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <vPortFree+0x62>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	60bb      	str	r3, [r7, #8]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	4b14      	ldr	r3, [pc, #80]	; (800429c <vPortFree+0xb8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4013      	ands	r3, r2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d01e      	beq.n	8004292 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d11a      	bne.n	8004292 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	4b0e      	ldr	r3, [pc, #56]	; (800429c <vPortFree+0xb8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	43db      	mvns	r3, r3
 8004266:	401a      	ands	r2, r3
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800426c:	f7ff f854 	bl	8003318 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <vPortFree+0xbc>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4413      	add	r3, r2
 800427a:	4a09      	ldr	r2, [pc, #36]	; (80042a0 <vPortFree+0xbc>)
 800427c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800427e:	6938      	ldr	r0, [r7, #16]
 8004280:	f000 f874 	bl	800436c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004284:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <vPortFree+0xc0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3301      	adds	r3, #1
 800428a:	4a06      	ldr	r2, [pc, #24]	; (80042a4 <vPortFree+0xc0>)
 800428c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800428e:	f7ff f851 	bl	8003334 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004292:	bf00      	nop
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20001038 	.word	0x20001038
 80042a0:	20001028 	.word	0x20001028
 80042a4:	20001034 	.word	0x20001034

080042a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80042b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80042b4:	4b27      	ldr	r3, [pc, #156]	; (8004354 <prvHeapInit+0xac>)
 80042b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00c      	beq.n	80042dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3307      	adds	r3, #7
 80042c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0307 	bic.w	r3, r3, #7
 80042ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	4a1f      	ldr	r2, [pc, #124]	; (8004354 <prvHeapInit+0xac>)
 80042d8:	4413      	add	r3, r2
 80042da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042e0:	4a1d      	ldr	r2, [pc, #116]	; (8004358 <prvHeapInit+0xb0>)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80042e6:	4b1c      	ldr	r3, [pc, #112]	; (8004358 <prvHeapInit+0xb0>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	4413      	add	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80042f4:	2208      	movs	r2, #8
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1a9b      	subs	r3, r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0307 	bic.w	r3, r3, #7
 8004302:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4a15      	ldr	r2, [pc, #84]	; (800435c <prvHeapInit+0xb4>)
 8004308:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800430a:	4b14      	ldr	r3, [pc, #80]	; (800435c <prvHeapInit+0xb4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2200      	movs	r2, #0
 8004310:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004312:	4b12      	ldr	r3, [pc, #72]	; (800435c <prvHeapInit+0xb4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	1ad2      	subs	r2, r2, r3
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <prvHeapInit+0xb4>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	4a0a      	ldr	r2, [pc, #40]	; (8004360 <prvHeapInit+0xb8>)
 8004336:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4a09      	ldr	r2, [pc, #36]	; (8004364 <prvHeapInit+0xbc>)
 800433e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004340:	4b09      	ldr	r3, [pc, #36]	; (8004368 <prvHeapInit+0xc0>)
 8004342:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004346:	601a      	str	r2, [r3, #0]
}
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	2000041c 	.word	0x2000041c
 8004358:	2000101c 	.word	0x2000101c
 800435c:	20001024 	.word	0x20001024
 8004360:	2000102c 	.word	0x2000102c
 8004364:	20001028 	.word	0x20001028
 8004368:	20001038 	.word	0x20001038

0800436c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004374:	4b27      	ldr	r3, [pc, #156]	; (8004414 <prvInsertBlockIntoFreeList+0xa8>)
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	e002      	b.n	8004380 <prvInsertBlockIntoFreeList+0x14>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	429a      	cmp	r2, r3
 8004388:	d8f7      	bhi.n	800437a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	4413      	add	r3, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	429a      	cmp	r2, r3
 800439a:	d108      	bne.n	80043ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	441a      	add	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	441a      	add	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d118      	bne.n	80043f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4b14      	ldr	r3, [pc, #80]	; (8004418 <prvInsertBlockIntoFreeList+0xac>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d00d      	beq.n	80043ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	441a      	add	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	e008      	b.n	80043fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043ea:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <prvInsertBlockIntoFreeList+0xac>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e003      	b.n	80043fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	429a      	cmp	r2, r3
 8004402:	d002      	beq.n	800440a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800440a:	bf00      	nop
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr
 8004414:	2000101c 	.word	0x2000101c
 8004418:	20001024 	.word	0x20001024

0800441c <__errno>:
 800441c:	4b01      	ldr	r3, [pc, #4]	; (8004424 <__errno+0x8>)
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20000010 	.word	0x20000010

08004428 <__libc_init_array>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	2600      	movs	r6, #0
 800442c:	4d0c      	ldr	r5, [pc, #48]	; (8004460 <__libc_init_array+0x38>)
 800442e:	4c0d      	ldr	r4, [pc, #52]	; (8004464 <__libc_init_array+0x3c>)
 8004430:	1b64      	subs	r4, r4, r5
 8004432:	10a4      	asrs	r4, r4, #2
 8004434:	42a6      	cmp	r6, r4
 8004436:	d109      	bne.n	800444c <__libc_init_array+0x24>
 8004438:	f000 fc76 	bl	8004d28 <_init>
 800443c:	2600      	movs	r6, #0
 800443e:	4d0a      	ldr	r5, [pc, #40]	; (8004468 <__libc_init_array+0x40>)
 8004440:	4c0a      	ldr	r4, [pc, #40]	; (800446c <__libc_init_array+0x44>)
 8004442:	1b64      	subs	r4, r4, r5
 8004444:	10a4      	asrs	r4, r4, #2
 8004446:	42a6      	cmp	r6, r4
 8004448:	d105      	bne.n	8004456 <__libc_init_array+0x2e>
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004450:	4798      	blx	r3
 8004452:	3601      	adds	r6, #1
 8004454:	e7ee      	b.n	8004434 <__libc_init_array+0xc>
 8004456:	f855 3b04 	ldr.w	r3, [r5], #4
 800445a:	4798      	blx	r3
 800445c:	3601      	adds	r6, #1
 800445e:	e7f2      	b.n	8004446 <__libc_init_array+0x1e>
 8004460:	08004e4c 	.word	0x08004e4c
 8004464:	08004e4c 	.word	0x08004e4c
 8004468:	08004e4c 	.word	0x08004e4c
 800446c:	08004e50 	.word	0x08004e50

08004470 <memcpy>:
 8004470:	440a      	add	r2, r1
 8004472:	4291      	cmp	r1, r2
 8004474:	f100 33ff 	add.w	r3, r0, #4294967295
 8004478:	d100      	bne.n	800447c <memcpy+0xc>
 800447a:	4770      	bx	lr
 800447c:	b510      	push	{r4, lr}
 800447e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004482:	4291      	cmp	r1, r2
 8004484:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004488:	d1f9      	bne.n	800447e <memcpy+0xe>
 800448a:	bd10      	pop	{r4, pc}

0800448c <memset>:
 800448c:	4603      	mov	r3, r0
 800448e:	4402      	add	r2, r0
 8004490:	4293      	cmp	r3, r2
 8004492:	d100      	bne.n	8004496 <memset+0xa>
 8004494:	4770      	bx	lr
 8004496:	f803 1b01 	strb.w	r1, [r3], #1
 800449a:	e7f9      	b.n	8004490 <memset+0x4>

0800449c <_vsniprintf_r>:
 800449c:	b530      	push	{r4, r5, lr}
 800449e:	1e14      	subs	r4, r2, #0
 80044a0:	4605      	mov	r5, r0
 80044a2:	b09b      	sub	sp, #108	; 0x6c
 80044a4:	4618      	mov	r0, r3
 80044a6:	da05      	bge.n	80044b4 <_vsniprintf_r+0x18>
 80044a8:	238b      	movs	r3, #139	; 0x8b
 80044aa:	f04f 30ff 	mov.w	r0, #4294967295
 80044ae:	602b      	str	r3, [r5, #0]
 80044b0:	b01b      	add	sp, #108	; 0x6c
 80044b2:	bd30      	pop	{r4, r5, pc}
 80044b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80044b8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80044bc:	bf0c      	ite	eq
 80044be:	4623      	moveq	r3, r4
 80044c0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80044c4:	9302      	str	r3, [sp, #8]
 80044c6:	9305      	str	r3, [sp, #20]
 80044c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044cc:	4602      	mov	r2, r0
 80044ce:	9100      	str	r1, [sp, #0]
 80044d0:	9104      	str	r1, [sp, #16]
 80044d2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80044d6:	4669      	mov	r1, sp
 80044d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80044da:	4628      	mov	r0, r5
 80044dc:	f000 f874 	bl	80045c8 <_svfiprintf_r>
 80044e0:	1c43      	adds	r3, r0, #1
 80044e2:	bfbc      	itt	lt
 80044e4:	238b      	movlt	r3, #139	; 0x8b
 80044e6:	602b      	strlt	r3, [r5, #0]
 80044e8:	2c00      	cmp	r4, #0
 80044ea:	d0e1      	beq.n	80044b0 <_vsniprintf_r+0x14>
 80044ec:	2200      	movs	r2, #0
 80044ee:	9b00      	ldr	r3, [sp, #0]
 80044f0:	701a      	strb	r2, [r3, #0]
 80044f2:	e7dd      	b.n	80044b0 <_vsniprintf_r+0x14>

080044f4 <vsniprintf>:
 80044f4:	b507      	push	{r0, r1, r2, lr}
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	4613      	mov	r3, r2
 80044fa:	460a      	mov	r2, r1
 80044fc:	4601      	mov	r1, r0
 80044fe:	4803      	ldr	r0, [pc, #12]	; (800450c <vsniprintf+0x18>)
 8004500:	6800      	ldr	r0, [r0, #0]
 8004502:	f7ff ffcb 	bl	800449c <_vsniprintf_r>
 8004506:	b003      	add	sp, #12
 8004508:	f85d fb04 	ldr.w	pc, [sp], #4
 800450c:	20000010 	.word	0x20000010

08004510 <__ssputs_r>:
 8004510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004514:	688e      	ldr	r6, [r1, #8]
 8004516:	4682      	mov	sl, r0
 8004518:	429e      	cmp	r6, r3
 800451a:	460c      	mov	r4, r1
 800451c:	4690      	mov	r8, r2
 800451e:	461f      	mov	r7, r3
 8004520:	d838      	bhi.n	8004594 <__ssputs_r+0x84>
 8004522:	898a      	ldrh	r2, [r1, #12]
 8004524:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004528:	d032      	beq.n	8004590 <__ssputs_r+0x80>
 800452a:	6825      	ldr	r5, [r4, #0]
 800452c:	6909      	ldr	r1, [r1, #16]
 800452e:	3301      	adds	r3, #1
 8004530:	eba5 0901 	sub.w	r9, r5, r1
 8004534:	6965      	ldr	r5, [r4, #20]
 8004536:	444b      	add	r3, r9
 8004538:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800453c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004540:	106d      	asrs	r5, r5, #1
 8004542:	429d      	cmp	r5, r3
 8004544:	bf38      	it	cc
 8004546:	461d      	movcc	r5, r3
 8004548:	0553      	lsls	r3, r2, #21
 800454a:	d531      	bpl.n	80045b0 <__ssputs_r+0xa0>
 800454c:	4629      	mov	r1, r5
 800454e:	f000 fb45 	bl	8004bdc <_malloc_r>
 8004552:	4606      	mov	r6, r0
 8004554:	b950      	cbnz	r0, 800456c <__ssputs_r+0x5c>
 8004556:	230c      	movs	r3, #12
 8004558:	f04f 30ff 	mov.w	r0, #4294967295
 800455c:	f8ca 3000 	str.w	r3, [sl]
 8004560:	89a3      	ldrh	r3, [r4, #12]
 8004562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004566:	81a3      	strh	r3, [r4, #12]
 8004568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800456c:	464a      	mov	r2, r9
 800456e:	6921      	ldr	r1, [r4, #16]
 8004570:	f7ff ff7e 	bl	8004470 <memcpy>
 8004574:	89a3      	ldrh	r3, [r4, #12]
 8004576:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800457a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800457e:	81a3      	strh	r3, [r4, #12]
 8004580:	6126      	str	r6, [r4, #16]
 8004582:	444e      	add	r6, r9
 8004584:	6026      	str	r6, [r4, #0]
 8004586:	463e      	mov	r6, r7
 8004588:	6165      	str	r5, [r4, #20]
 800458a:	eba5 0509 	sub.w	r5, r5, r9
 800458e:	60a5      	str	r5, [r4, #8]
 8004590:	42be      	cmp	r6, r7
 8004592:	d900      	bls.n	8004596 <__ssputs_r+0x86>
 8004594:	463e      	mov	r6, r7
 8004596:	4632      	mov	r2, r6
 8004598:	4641      	mov	r1, r8
 800459a:	6820      	ldr	r0, [r4, #0]
 800459c:	f000 fab8 	bl	8004b10 <memmove>
 80045a0:	68a3      	ldr	r3, [r4, #8]
 80045a2:	6822      	ldr	r2, [r4, #0]
 80045a4:	1b9b      	subs	r3, r3, r6
 80045a6:	4432      	add	r2, r6
 80045a8:	2000      	movs	r0, #0
 80045aa:	60a3      	str	r3, [r4, #8]
 80045ac:	6022      	str	r2, [r4, #0]
 80045ae:	e7db      	b.n	8004568 <__ssputs_r+0x58>
 80045b0:	462a      	mov	r2, r5
 80045b2:	f000 fb6d 	bl	8004c90 <_realloc_r>
 80045b6:	4606      	mov	r6, r0
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d1e1      	bne.n	8004580 <__ssputs_r+0x70>
 80045bc:	4650      	mov	r0, sl
 80045be:	6921      	ldr	r1, [r4, #16]
 80045c0:	f000 fac0 	bl	8004b44 <_free_r>
 80045c4:	e7c7      	b.n	8004556 <__ssputs_r+0x46>
	...

080045c8 <_svfiprintf_r>:
 80045c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045cc:	4698      	mov	r8, r3
 80045ce:	898b      	ldrh	r3, [r1, #12]
 80045d0:	4607      	mov	r7, r0
 80045d2:	061b      	lsls	r3, r3, #24
 80045d4:	460d      	mov	r5, r1
 80045d6:	4614      	mov	r4, r2
 80045d8:	b09d      	sub	sp, #116	; 0x74
 80045da:	d50e      	bpl.n	80045fa <_svfiprintf_r+0x32>
 80045dc:	690b      	ldr	r3, [r1, #16]
 80045de:	b963      	cbnz	r3, 80045fa <_svfiprintf_r+0x32>
 80045e0:	2140      	movs	r1, #64	; 0x40
 80045e2:	f000 fafb 	bl	8004bdc <_malloc_r>
 80045e6:	6028      	str	r0, [r5, #0]
 80045e8:	6128      	str	r0, [r5, #16]
 80045ea:	b920      	cbnz	r0, 80045f6 <_svfiprintf_r+0x2e>
 80045ec:	230c      	movs	r3, #12
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	f04f 30ff 	mov.w	r0, #4294967295
 80045f4:	e0d1      	b.n	800479a <_svfiprintf_r+0x1d2>
 80045f6:	2340      	movs	r3, #64	; 0x40
 80045f8:	616b      	str	r3, [r5, #20]
 80045fa:	2300      	movs	r3, #0
 80045fc:	9309      	str	r3, [sp, #36]	; 0x24
 80045fe:	2320      	movs	r3, #32
 8004600:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004604:	2330      	movs	r3, #48	; 0x30
 8004606:	f04f 0901 	mov.w	r9, #1
 800460a:	f8cd 800c 	str.w	r8, [sp, #12]
 800460e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80047b4 <_svfiprintf_r+0x1ec>
 8004612:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004616:	4623      	mov	r3, r4
 8004618:	469a      	mov	sl, r3
 800461a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800461e:	b10a      	cbz	r2, 8004624 <_svfiprintf_r+0x5c>
 8004620:	2a25      	cmp	r2, #37	; 0x25
 8004622:	d1f9      	bne.n	8004618 <_svfiprintf_r+0x50>
 8004624:	ebba 0b04 	subs.w	fp, sl, r4
 8004628:	d00b      	beq.n	8004642 <_svfiprintf_r+0x7a>
 800462a:	465b      	mov	r3, fp
 800462c:	4622      	mov	r2, r4
 800462e:	4629      	mov	r1, r5
 8004630:	4638      	mov	r0, r7
 8004632:	f7ff ff6d 	bl	8004510 <__ssputs_r>
 8004636:	3001      	adds	r0, #1
 8004638:	f000 80aa 	beq.w	8004790 <_svfiprintf_r+0x1c8>
 800463c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800463e:	445a      	add	r2, fp
 8004640:	9209      	str	r2, [sp, #36]	; 0x24
 8004642:	f89a 3000 	ldrb.w	r3, [sl]
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 80a2 	beq.w	8004790 <_svfiprintf_r+0x1c8>
 800464c:	2300      	movs	r3, #0
 800464e:	f04f 32ff 	mov.w	r2, #4294967295
 8004652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004656:	f10a 0a01 	add.w	sl, sl, #1
 800465a:	9304      	str	r3, [sp, #16]
 800465c:	9307      	str	r3, [sp, #28]
 800465e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004662:	931a      	str	r3, [sp, #104]	; 0x68
 8004664:	4654      	mov	r4, sl
 8004666:	2205      	movs	r2, #5
 8004668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800466c:	4851      	ldr	r0, [pc, #324]	; (80047b4 <_svfiprintf_r+0x1ec>)
 800466e:	f000 fa41 	bl	8004af4 <memchr>
 8004672:	9a04      	ldr	r2, [sp, #16]
 8004674:	b9d8      	cbnz	r0, 80046ae <_svfiprintf_r+0xe6>
 8004676:	06d0      	lsls	r0, r2, #27
 8004678:	bf44      	itt	mi
 800467a:	2320      	movmi	r3, #32
 800467c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004680:	0711      	lsls	r1, r2, #28
 8004682:	bf44      	itt	mi
 8004684:	232b      	movmi	r3, #43	; 0x2b
 8004686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800468a:	f89a 3000 	ldrb.w	r3, [sl]
 800468e:	2b2a      	cmp	r3, #42	; 0x2a
 8004690:	d015      	beq.n	80046be <_svfiprintf_r+0xf6>
 8004692:	4654      	mov	r4, sl
 8004694:	2000      	movs	r0, #0
 8004696:	f04f 0c0a 	mov.w	ip, #10
 800469a:	9a07      	ldr	r2, [sp, #28]
 800469c:	4621      	mov	r1, r4
 800469e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046a2:	3b30      	subs	r3, #48	; 0x30
 80046a4:	2b09      	cmp	r3, #9
 80046a6:	d94e      	bls.n	8004746 <_svfiprintf_r+0x17e>
 80046a8:	b1b0      	cbz	r0, 80046d8 <_svfiprintf_r+0x110>
 80046aa:	9207      	str	r2, [sp, #28]
 80046ac:	e014      	b.n	80046d8 <_svfiprintf_r+0x110>
 80046ae:	eba0 0308 	sub.w	r3, r0, r8
 80046b2:	fa09 f303 	lsl.w	r3, r9, r3
 80046b6:	4313      	orrs	r3, r2
 80046b8:	46a2      	mov	sl, r4
 80046ba:	9304      	str	r3, [sp, #16]
 80046bc:	e7d2      	b.n	8004664 <_svfiprintf_r+0x9c>
 80046be:	9b03      	ldr	r3, [sp, #12]
 80046c0:	1d19      	adds	r1, r3, #4
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	9103      	str	r1, [sp, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	bfbb      	ittet	lt
 80046ca:	425b      	neglt	r3, r3
 80046cc:	f042 0202 	orrlt.w	r2, r2, #2
 80046d0:	9307      	strge	r3, [sp, #28]
 80046d2:	9307      	strlt	r3, [sp, #28]
 80046d4:	bfb8      	it	lt
 80046d6:	9204      	strlt	r2, [sp, #16]
 80046d8:	7823      	ldrb	r3, [r4, #0]
 80046da:	2b2e      	cmp	r3, #46	; 0x2e
 80046dc:	d10c      	bne.n	80046f8 <_svfiprintf_r+0x130>
 80046de:	7863      	ldrb	r3, [r4, #1]
 80046e0:	2b2a      	cmp	r3, #42	; 0x2a
 80046e2:	d135      	bne.n	8004750 <_svfiprintf_r+0x188>
 80046e4:	9b03      	ldr	r3, [sp, #12]
 80046e6:	3402      	adds	r4, #2
 80046e8:	1d1a      	adds	r2, r3, #4
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	9203      	str	r2, [sp, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	bfb8      	it	lt
 80046f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80046f6:	9305      	str	r3, [sp, #20]
 80046f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80047c4 <_svfiprintf_r+0x1fc>
 80046fc:	2203      	movs	r2, #3
 80046fe:	4650      	mov	r0, sl
 8004700:	7821      	ldrb	r1, [r4, #0]
 8004702:	f000 f9f7 	bl	8004af4 <memchr>
 8004706:	b140      	cbz	r0, 800471a <_svfiprintf_r+0x152>
 8004708:	2340      	movs	r3, #64	; 0x40
 800470a:	eba0 000a 	sub.w	r0, r0, sl
 800470e:	fa03 f000 	lsl.w	r0, r3, r0
 8004712:	9b04      	ldr	r3, [sp, #16]
 8004714:	3401      	adds	r4, #1
 8004716:	4303      	orrs	r3, r0
 8004718:	9304      	str	r3, [sp, #16]
 800471a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800471e:	2206      	movs	r2, #6
 8004720:	4825      	ldr	r0, [pc, #148]	; (80047b8 <_svfiprintf_r+0x1f0>)
 8004722:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004726:	f000 f9e5 	bl	8004af4 <memchr>
 800472a:	2800      	cmp	r0, #0
 800472c:	d038      	beq.n	80047a0 <_svfiprintf_r+0x1d8>
 800472e:	4b23      	ldr	r3, [pc, #140]	; (80047bc <_svfiprintf_r+0x1f4>)
 8004730:	bb1b      	cbnz	r3, 800477a <_svfiprintf_r+0x1b2>
 8004732:	9b03      	ldr	r3, [sp, #12]
 8004734:	3307      	adds	r3, #7
 8004736:	f023 0307 	bic.w	r3, r3, #7
 800473a:	3308      	adds	r3, #8
 800473c:	9303      	str	r3, [sp, #12]
 800473e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004740:	4433      	add	r3, r6
 8004742:	9309      	str	r3, [sp, #36]	; 0x24
 8004744:	e767      	b.n	8004616 <_svfiprintf_r+0x4e>
 8004746:	460c      	mov	r4, r1
 8004748:	2001      	movs	r0, #1
 800474a:	fb0c 3202 	mla	r2, ip, r2, r3
 800474e:	e7a5      	b.n	800469c <_svfiprintf_r+0xd4>
 8004750:	2300      	movs	r3, #0
 8004752:	f04f 0c0a 	mov.w	ip, #10
 8004756:	4619      	mov	r1, r3
 8004758:	3401      	adds	r4, #1
 800475a:	9305      	str	r3, [sp, #20]
 800475c:	4620      	mov	r0, r4
 800475e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004762:	3a30      	subs	r2, #48	; 0x30
 8004764:	2a09      	cmp	r2, #9
 8004766:	d903      	bls.n	8004770 <_svfiprintf_r+0x1a8>
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0c5      	beq.n	80046f8 <_svfiprintf_r+0x130>
 800476c:	9105      	str	r1, [sp, #20]
 800476e:	e7c3      	b.n	80046f8 <_svfiprintf_r+0x130>
 8004770:	4604      	mov	r4, r0
 8004772:	2301      	movs	r3, #1
 8004774:	fb0c 2101 	mla	r1, ip, r1, r2
 8004778:	e7f0      	b.n	800475c <_svfiprintf_r+0x194>
 800477a:	ab03      	add	r3, sp, #12
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	462a      	mov	r2, r5
 8004780:	4638      	mov	r0, r7
 8004782:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <_svfiprintf_r+0x1f8>)
 8004784:	a904      	add	r1, sp, #16
 8004786:	f3af 8000 	nop.w
 800478a:	1c42      	adds	r2, r0, #1
 800478c:	4606      	mov	r6, r0
 800478e:	d1d6      	bne.n	800473e <_svfiprintf_r+0x176>
 8004790:	89ab      	ldrh	r3, [r5, #12]
 8004792:	065b      	lsls	r3, r3, #25
 8004794:	f53f af2c 	bmi.w	80045f0 <_svfiprintf_r+0x28>
 8004798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800479a:	b01d      	add	sp, #116	; 0x74
 800479c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a0:	ab03      	add	r3, sp, #12
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	462a      	mov	r2, r5
 80047a6:	4638      	mov	r0, r7
 80047a8:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <_svfiprintf_r+0x1f8>)
 80047aa:	a904      	add	r1, sp, #16
 80047ac:	f000 f87c 	bl	80048a8 <_printf_i>
 80047b0:	e7eb      	b.n	800478a <_svfiprintf_r+0x1c2>
 80047b2:	bf00      	nop
 80047b4:	08004e16 	.word	0x08004e16
 80047b8:	08004e20 	.word	0x08004e20
 80047bc:	00000000 	.word	0x00000000
 80047c0:	08004511 	.word	0x08004511
 80047c4:	08004e1c 	.word	0x08004e1c

080047c8 <_printf_common>:
 80047c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047cc:	4616      	mov	r6, r2
 80047ce:	4699      	mov	r9, r3
 80047d0:	688a      	ldr	r2, [r1, #8]
 80047d2:	690b      	ldr	r3, [r1, #16]
 80047d4:	4607      	mov	r7, r0
 80047d6:	4293      	cmp	r3, r2
 80047d8:	bfb8      	it	lt
 80047da:	4613      	movlt	r3, r2
 80047dc:	6033      	str	r3, [r6, #0]
 80047de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047e2:	460c      	mov	r4, r1
 80047e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047e8:	b10a      	cbz	r2, 80047ee <_printf_common+0x26>
 80047ea:	3301      	adds	r3, #1
 80047ec:	6033      	str	r3, [r6, #0]
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	0699      	lsls	r1, r3, #26
 80047f2:	bf42      	ittt	mi
 80047f4:	6833      	ldrmi	r3, [r6, #0]
 80047f6:	3302      	addmi	r3, #2
 80047f8:	6033      	strmi	r3, [r6, #0]
 80047fa:	6825      	ldr	r5, [r4, #0]
 80047fc:	f015 0506 	ands.w	r5, r5, #6
 8004800:	d106      	bne.n	8004810 <_printf_common+0x48>
 8004802:	f104 0a19 	add.w	sl, r4, #25
 8004806:	68e3      	ldr	r3, [r4, #12]
 8004808:	6832      	ldr	r2, [r6, #0]
 800480a:	1a9b      	subs	r3, r3, r2
 800480c:	42ab      	cmp	r3, r5
 800480e:	dc28      	bgt.n	8004862 <_printf_common+0x9a>
 8004810:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004814:	1e13      	subs	r3, r2, #0
 8004816:	6822      	ldr	r2, [r4, #0]
 8004818:	bf18      	it	ne
 800481a:	2301      	movne	r3, #1
 800481c:	0692      	lsls	r2, r2, #26
 800481e:	d42d      	bmi.n	800487c <_printf_common+0xb4>
 8004820:	4649      	mov	r1, r9
 8004822:	4638      	mov	r0, r7
 8004824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004828:	47c0      	blx	r8
 800482a:	3001      	adds	r0, #1
 800482c:	d020      	beq.n	8004870 <_printf_common+0xa8>
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	68e5      	ldr	r5, [r4, #12]
 8004832:	f003 0306 	and.w	r3, r3, #6
 8004836:	2b04      	cmp	r3, #4
 8004838:	bf18      	it	ne
 800483a:	2500      	movne	r5, #0
 800483c:	6832      	ldr	r2, [r6, #0]
 800483e:	f04f 0600 	mov.w	r6, #0
 8004842:	68a3      	ldr	r3, [r4, #8]
 8004844:	bf08      	it	eq
 8004846:	1aad      	subeq	r5, r5, r2
 8004848:	6922      	ldr	r2, [r4, #16]
 800484a:	bf08      	it	eq
 800484c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004850:	4293      	cmp	r3, r2
 8004852:	bfc4      	itt	gt
 8004854:	1a9b      	subgt	r3, r3, r2
 8004856:	18ed      	addgt	r5, r5, r3
 8004858:	341a      	adds	r4, #26
 800485a:	42b5      	cmp	r5, r6
 800485c:	d11a      	bne.n	8004894 <_printf_common+0xcc>
 800485e:	2000      	movs	r0, #0
 8004860:	e008      	b.n	8004874 <_printf_common+0xac>
 8004862:	2301      	movs	r3, #1
 8004864:	4652      	mov	r2, sl
 8004866:	4649      	mov	r1, r9
 8004868:	4638      	mov	r0, r7
 800486a:	47c0      	blx	r8
 800486c:	3001      	adds	r0, #1
 800486e:	d103      	bne.n	8004878 <_printf_common+0xb0>
 8004870:	f04f 30ff 	mov.w	r0, #4294967295
 8004874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004878:	3501      	adds	r5, #1
 800487a:	e7c4      	b.n	8004806 <_printf_common+0x3e>
 800487c:	2030      	movs	r0, #48	; 0x30
 800487e:	18e1      	adds	r1, r4, r3
 8004880:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800488a:	4422      	add	r2, r4
 800488c:	3302      	adds	r3, #2
 800488e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004892:	e7c5      	b.n	8004820 <_printf_common+0x58>
 8004894:	2301      	movs	r3, #1
 8004896:	4622      	mov	r2, r4
 8004898:	4649      	mov	r1, r9
 800489a:	4638      	mov	r0, r7
 800489c:	47c0      	blx	r8
 800489e:	3001      	adds	r0, #1
 80048a0:	d0e6      	beq.n	8004870 <_printf_common+0xa8>
 80048a2:	3601      	adds	r6, #1
 80048a4:	e7d9      	b.n	800485a <_printf_common+0x92>
	...

080048a8 <_printf_i>:
 80048a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048ac:	460c      	mov	r4, r1
 80048ae:	7e27      	ldrb	r7, [r4, #24]
 80048b0:	4691      	mov	r9, r2
 80048b2:	2f78      	cmp	r7, #120	; 0x78
 80048b4:	4680      	mov	r8, r0
 80048b6:	469a      	mov	sl, r3
 80048b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048be:	d807      	bhi.n	80048d0 <_printf_i+0x28>
 80048c0:	2f62      	cmp	r7, #98	; 0x62
 80048c2:	d80a      	bhi.n	80048da <_printf_i+0x32>
 80048c4:	2f00      	cmp	r7, #0
 80048c6:	f000 80d9 	beq.w	8004a7c <_printf_i+0x1d4>
 80048ca:	2f58      	cmp	r7, #88	; 0x58
 80048cc:	f000 80a4 	beq.w	8004a18 <_printf_i+0x170>
 80048d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048d8:	e03a      	b.n	8004950 <_printf_i+0xa8>
 80048da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048de:	2b15      	cmp	r3, #21
 80048e0:	d8f6      	bhi.n	80048d0 <_printf_i+0x28>
 80048e2:	a001      	add	r0, pc, #4	; (adr r0, 80048e8 <_printf_i+0x40>)
 80048e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80048e8:	08004941 	.word	0x08004941
 80048ec:	08004955 	.word	0x08004955
 80048f0:	080048d1 	.word	0x080048d1
 80048f4:	080048d1 	.word	0x080048d1
 80048f8:	080048d1 	.word	0x080048d1
 80048fc:	080048d1 	.word	0x080048d1
 8004900:	08004955 	.word	0x08004955
 8004904:	080048d1 	.word	0x080048d1
 8004908:	080048d1 	.word	0x080048d1
 800490c:	080048d1 	.word	0x080048d1
 8004910:	080048d1 	.word	0x080048d1
 8004914:	08004a63 	.word	0x08004a63
 8004918:	08004985 	.word	0x08004985
 800491c:	08004a45 	.word	0x08004a45
 8004920:	080048d1 	.word	0x080048d1
 8004924:	080048d1 	.word	0x080048d1
 8004928:	08004a85 	.word	0x08004a85
 800492c:	080048d1 	.word	0x080048d1
 8004930:	08004985 	.word	0x08004985
 8004934:	080048d1 	.word	0x080048d1
 8004938:	080048d1 	.word	0x080048d1
 800493c:	08004a4d 	.word	0x08004a4d
 8004940:	680b      	ldr	r3, [r1, #0]
 8004942:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004946:	1d1a      	adds	r2, r3, #4
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	600a      	str	r2, [r1, #0]
 800494c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004950:	2301      	movs	r3, #1
 8004952:	e0a4      	b.n	8004a9e <_printf_i+0x1f6>
 8004954:	6825      	ldr	r5, [r4, #0]
 8004956:	6808      	ldr	r0, [r1, #0]
 8004958:	062e      	lsls	r6, r5, #24
 800495a:	f100 0304 	add.w	r3, r0, #4
 800495e:	d50a      	bpl.n	8004976 <_printf_i+0xce>
 8004960:	6805      	ldr	r5, [r0, #0]
 8004962:	600b      	str	r3, [r1, #0]
 8004964:	2d00      	cmp	r5, #0
 8004966:	da03      	bge.n	8004970 <_printf_i+0xc8>
 8004968:	232d      	movs	r3, #45	; 0x2d
 800496a:	426d      	negs	r5, r5
 800496c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004970:	230a      	movs	r3, #10
 8004972:	485e      	ldr	r0, [pc, #376]	; (8004aec <_printf_i+0x244>)
 8004974:	e019      	b.n	80049aa <_printf_i+0x102>
 8004976:	f015 0f40 	tst.w	r5, #64	; 0x40
 800497a:	6805      	ldr	r5, [r0, #0]
 800497c:	600b      	str	r3, [r1, #0]
 800497e:	bf18      	it	ne
 8004980:	b22d      	sxthne	r5, r5
 8004982:	e7ef      	b.n	8004964 <_printf_i+0xbc>
 8004984:	680b      	ldr	r3, [r1, #0]
 8004986:	6825      	ldr	r5, [r4, #0]
 8004988:	1d18      	adds	r0, r3, #4
 800498a:	6008      	str	r0, [r1, #0]
 800498c:	0628      	lsls	r0, r5, #24
 800498e:	d501      	bpl.n	8004994 <_printf_i+0xec>
 8004990:	681d      	ldr	r5, [r3, #0]
 8004992:	e002      	b.n	800499a <_printf_i+0xf2>
 8004994:	0669      	lsls	r1, r5, #25
 8004996:	d5fb      	bpl.n	8004990 <_printf_i+0xe8>
 8004998:	881d      	ldrh	r5, [r3, #0]
 800499a:	2f6f      	cmp	r7, #111	; 0x6f
 800499c:	bf0c      	ite	eq
 800499e:	2308      	moveq	r3, #8
 80049a0:	230a      	movne	r3, #10
 80049a2:	4852      	ldr	r0, [pc, #328]	; (8004aec <_printf_i+0x244>)
 80049a4:	2100      	movs	r1, #0
 80049a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049aa:	6866      	ldr	r6, [r4, #4]
 80049ac:	2e00      	cmp	r6, #0
 80049ae:	bfa8      	it	ge
 80049b0:	6821      	ldrge	r1, [r4, #0]
 80049b2:	60a6      	str	r6, [r4, #8]
 80049b4:	bfa4      	itt	ge
 80049b6:	f021 0104 	bicge.w	r1, r1, #4
 80049ba:	6021      	strge	r1, [r4, #0]
 80049bc:	b90d      	cbnz	r5, 80049c2 <_printf_i+0x11a>
 80049be:	2e00      	cmp	r6, #0
 80049c0:	d04d      	beq.n	8004a5e <_printf_i+0x1b6>
 80049c2:	4616      	mov	r6, r2
 80049c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80049c8:	fb03 5711 	mls	r7, r3, r1, r5
 80049cc:	5dc7      	ldrb	r7, [r0, r7]
 80049ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049d2:	462f      	mov	r7, r5
 80049d4:	42bb      	cmp	r3, r7
 80049d6:	460d      	mov	r5, r1
 80049d8:	d9f4      	bls.n	80049c4 <_printf_i+0x11c>
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d10b      	bne.n	80049f6 <_printf_i+0x14e>
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	07df      	lsls	r7, r3, #31
 80049e2:	d508      	bpl.n	80049f6 <_printf_i+0x14e>
 80049e4:	6923      	ldr	r3, [r4, #16]
 80049e6:	6861      	ldr	r1, [r4, #4]
 80049e8:	4299      	cmp	r1, r3
 80049ea:	bfde      	ittt	le
 80049ec:	2330      	movle	r3, #48	; 0x30
 80049ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049f6:	1b92      	subs	r2, r2, r6
 80049f8:	6122      	str	r2, [r4, #16]
 80049fa:	464b      	mov	r3, r9
 80049fc:	4621      	mov	r1, r4
 80049fe:	4640      	mov	r0, r8
 8004a00:	f8cd a000 	str.w	sl, [sp]
 8004a04:	aa03      	add	r2, sp, #12
 8004a06:	f7ff fedf 	bl	80047c8 <_printf_common>
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	d14c      	bne.n	8004aa8 <_printf_i+0x200>
 8004a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a12:	b004      	add	sp, #16
 8004a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a18:	4834      	ldr	r0, [pc, #208]	; (8004aec <_printf_i+0x244>)
 8004a1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a1e:	680e      	ldr	r6, [r1, #0]
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a26:	061f      	lsls	r7, r3, #24
 8004a28:	600e      	str	r6, [r1, #0]
 8004a2a:	d514      	bpl.n	8004a56 <_printf_i+0x1ae>
 8004a2c:	07d9      	lsls	r1, r3, #31
 8004a2e:	bf44      	itt	mi
 8004a30:	f043 0320 	orrmi.w	r3, r3, #32
 8004a34:	6023      	strmi	r3, [r4, #0]
 8004a36:	b91d      	cbnz	r5, 8004a40 <_printf_i+0x198>
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	f023 0320 	bic.w	r3, r3, #32
 8004a3e:	6023      	str	r3, [r4, #0]
 8004a40:	2310      	movs	r3, #16
 8004a42:	e7af      	b.n	80049a4 <_printf_i+0xfc>
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	f043 0320 	orr.w	r3, r3, #32
 8004a4a:	6023      	str	r3, [r4, #0]
 8004a4c:	2378      	movs	r3, #120	; 0x78
 8004a4e:	4828      	ldr	r0, [pc, #160]	; (8004af0 <_printf_i+0x248>)
 8004a50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a54:	e7e3      	b.n	8004a1e <_printf_i+0x176>
 8004a56:	065e      	lsls	r6, r3, #25
 8004a58:	bf48      	it	mi
 8004a5a:	b2ad      	uxthmi	r5, r5
 8004a5c:	e7e6      	b.n	8004a2c <_printf_i+0x184>
 8004a5e:	4616      	mov	r6, r2
 8004a60:	e7bb      	b.n	80049da <_printf_i+0x132>
 8004a62:	680b      	ldr	r3, [r1, #0]
 8004a64:	6826      	ldr	r6, [r4, #0]
 8004a66:	1d1d      	adds	r5, r3, #4
 8004a68:	6960      	ldr	r0, [r4, #20]
 8004a6a:	600d      	str	r5, [r1, #0]
 8004a6c:	0635      	lsls	r5, r6, #24
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	d501      	bpl.n	8004a76 <_printf_i+0x1ce>
 8004a72:	6018      	str	r0, [r3, #0]
 8004a74:	e002      	b.n	8004a7c <_printf_i+0x1d4>
 8004a76:	0671      	lsls	r1, r6, #25
 8004a78:	d5fb      	bpl.n	8004a72 <_printf_i+0x1ca>
 8004a7a:	8018      	strh	r0, [r3, #0]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	4616      	mov	r6, r2
 8004a80:	6123      	str	r3, [r4, #16]
 8004a82:	e7ba      	b.n	80049fa <_printf_i+0x152>
 8004a84:	680b      	ldr	r3, [r1, #0]
 8004a86:	1d1a      	adds	r2, r3, #4
 8004a88:	600a      	str	r2, [r1, #0]
 8004a8a:	681e      	ldr	r6, [r3, #0]
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	4630      	mov	r0, r6
 8004a90:	6862      	ldr	r2, [r4, #4]
 8004a92:	f000 f82f 	bl	8004af4 <memchr>
 8004a96:	b108      	cbz	r0, 8004a9c <_printf_i+0x1f4>
 8004a98:	1b80      	subs	r0, r0, r6
 8004a9a:	6060      	str	r0, [r4, #4]
 8004a9c:	6863      	ldr	r3, [r4, #4]
 8004a9e:	6123      	str	r3, [r4, #16]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aa6:	e7a8      	b.n	80049fa <_printf_i+0x152>
 8004aa8:	4632      	mov	r2, r6
 8004aaa:	4649      	mov	r1, r9
 8004aac:	4640      	mov	r0, r8
 8004aae:	6923      	ldr	r3, [r4, #16]
 8004ab0:	47d0      	blx	sl
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	d0ab      	beq.n	8004a0e <_printf_i+0x166>
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	079b      	lsls	r3, r3, #30
 8004aba:	d413      	bmi.n	8004ae4 <_printf_i+0x23c>
 8004abc:	68e0      	ldr	r0, [r4, #12]
 8004abe:	9b03      	ldr	r3, [sp, #12]
 8004ac0:	4298      	cmp	r0, r3
 8004ac2:	bfb8      	it	lt
 8004ac4:	4618      	movlt	r0, r3
 8004ac6:	e7a4      	b.n	8004a12 <_printf_i+0x16a>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	4632      	mov	r2, r6
 8004acc:	4649      	mov	r1, r9
 8004ace:	4640      	mov	r0, r8
 8004ad0:	47d0      	blx	sl
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	d09b      	beq.n	8004a0e <_printf_i+0x166>
 8004ad6:	3501      	adds	r5, #1
 8004ad8:	68e3      	ldr	r3, [r4, #12]
 8004ada:	9903      	ldr	r1, [sp, #12]
 8004adc:	1a5b      	subs	r3, r3, r1
 8004ade:	42ab      	cmp	r3, r5
 8004ae0:	dcf2      	bgt.n	8004ac8 <_printf_i+0x220>
 8004ae2:	e7eb      	b.n	8004abc <_printf_i+0x214>
 8004ae4:	2500      	movs	r5, #0
 8004ae6:	f104 0619 	add.w	r6, r4, #25
 8004aea:	e7f5      	b.n	8004ad8 <_printf_i+0x230>
 8004aec:	08004e27 	.word	0x08004e27
 8004af0:	08004e38 	.word	0x08004e38

08004af4 <memchr>:
 8004af4:	4603      	mov	r3, r0
 8004af6:	b510      	push	{r4, lr}
 8004af8:	b2c9      	uxtb	r1, r1
 8004afa:	4402      	add	r2, r0
 8004afc:	4293      	cmp	r3, r2
 8004afe:	4618      	mov	r0, r3
 8004b00:	d101      	bne.n	8004b06 <memchr+0x12>
 8004b02:	2000      	movs	r0, #0
 8004b04:	e003      	b.n	8004b0e <memchr+0x1a>
 8004b06:	7804      	ldrb	r4, [r0, #0]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	428c      	cmp	r4, r1
 8004b0c:	d1f6      	bne.n	8004afc <memchr+0x8>
 8004b0e:	bd10      	pop	{r4, pc}

08004b10 <memmove>:
 8004b10:	4288      	cmp	r0, r1
 8004b12:	b510      	push	{r4, lr}
 8004b14:	eb01 0402 	add.w	r4, r1, r2
 8004b18:	d902      	bls.n	8004b20 <memmove+0x10>
 8004b1a:	4284      	cmp	r4, r0
 8004b1c:	4623      	mov	r3, r4
 8004b1e:	d807      	bhi.n	8004b30 <memmove+0x20>
 8004b20:	1e43      	subs	r3, r0, #1
 8004b22:	42a1      	cmp	r1, r4
 8004b24:	d008      	beq.n	8004b38 <memmove+0x28>
 8004b26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b2e:	e7f8      	b.n	8004b22 <memmove+0x12>
 8004b30:	4601      	mov	r1, r0
 8004b32:	4402      	add	r2, r0
 8004b34:	428a      	cmp	r2, r1
 8004b36:	d100      	bne.n	8004b3a <memmove+0x2a>
 8004b38:	bd10      	pop	{r4, pc}
 8004b3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b42:	e7f7      	b.n	8004b34 <memmove+0x24>

08004b44 <_free_r>:
 8004b44:	b538      	push	{r3, r4, r5, lr}
 8004b46:	4605      	mov	r5, r0
 8004b48:	2900      	cmp	r1, #0
 8004b4a:	d043      	beq.n	8004bd4 <_free_r+0x90>
 8004b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b50:	1f0c      	subs	r4, r1, #4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	bfb8      	it	lt
 8004b56:	18e4      	addlt	r4, r4, r3
 8004b58:	f000 f8d0 	bl	8004cfc <__malloc_lock>
 8004b5c:	4a1e      	ldr	r2, [pc, #120]	; (8004bd8 <_free_r+0x94>)
 8004b5e:	6813      	ldr	r3, [r2, #0]
 8004b60:	4610      	mov	r0, r2
 8004b62:	b933      	cbnz	r3, 8004b72 <_free_r+0x2e>
 8004b64:	6063      	str	r3, [r4, #4]
 8004b66:	6014      	str	r4, [r2, #0]
 8004b68:	4628      	mov	r0, r5
 8004b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b6e:	f000 b8cb 	b.w	8004d08 <__malloc_unlock>
 8004b72:	42a3      	cmp	r3, r4
 8004b74:	d90a      	bls.n	8004b8c <_free_r+0x48>
 8004b76:	6821      	ldr	r1, [r4, #0]
 8004b78:	1862      	adds	r2, r4, r1
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	bf01      	itttt	eq
 8004b7e:	681a      	ldreq	r2, [r3, #0]
 8004b80:	685b      	ldreq	r3, [r3, #4]
 8004b82:	1852      	addeq	r2, r2, r1
 8004b84:	6022      	streq	r2, [r4, #0]
 8004b86:	6063      	str	r3, [r4, #4]
 8004b88:	6004      	str	r4, [r0, #0]
 8004b8a:	e7ed      	b.n	8004b68 <_free_r+0x24>
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	b10b      	cbz	r3, 8004b96 <_free_r+0x52>
 8004b92:	42a3      	cmp	r3, r4
 8004b94:	d9fa      	bls.n	8004b8c <_free_r+0x48>
 8004b96:	6811      	ldr	r1, [r2, #0]
 8004b98:	1850      	adds	r0, r2, r1
 8004b9a:	42a0      	cmp	r0, r4
 8004b9c:	d10b      	bne.n	8004bb6 <_free_r+0x72>
 8004b9e:	6820      	ldr	r0, [r4, #0]
 8004ba0:	4401      	add	r1, r0
 8004ba2:	1850      	adds	r0, r2, r1
 8004ba4:	4283      	cmp	r3, r0
 8004ba6:	6011      	str	r1, [r2, #0]
 8004ba8:	d1de      	bne.n	8004b68 <_free_r+0x24>
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	4401      	add	r1, r0
 8004bb0:	6011      	str	r1, [r2, #0]
 8004bb2:	6053      	str	r3, [r2, #4]
 8004bb4:	e7d8      	b.n	8004b68 <_free_r+0x24>
 8004bb6:	d902      	bls.n	8004bbe <_free_r+0x7a>
 8004bb8:	230c      	movs	r3, #12
 8004bba:	602b      	str	r3, [r5, #0]
 8004bbc:	e7d4      	b.n	8004b68 <_free_r+0x24>
 8004bbe:	6820      	ldr	r0, [r4, #0]
 8004bc0:	1821      	adds	r1, r4, r0
 8004bc2:	428b      	cmp	r3, r1
 8004bc4:	bf01      	itttt	eq
 8004bc6:	6819      	ldreq	r1, [r3, #0]
 8004bc8:	685b      	ldreq	r3, [r3, #4]
 8004bca:	1809      	addeq	r1, r1, r0
 8004bcc:	6021      	streq	r1, [r4, #0]
 8004bce:	6063      	str	r3, [r4, #4]
 8004bd0:	6054      	str	r4, [r2, #4]
 8004bd2:	e7c9      	b.n	8004b68 <_free_r+0x24>
 8004bd4:	bd38      	pop	{r3, r4, r5, pc}
 8004bd6:	bf00      	nop
 8004bd8:	2000103c 	.word	0x2000103c

08004bdc <_malloc_r>:
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	1ccd      	adds	r5, r1, #3
 8004be0:	f025 0503 	bic.w	r5, r5, #3
 8004be4:	3508      	adds	r5, #8
 8004be6:	2d0c      	cmp	r5, #12
 8004be8:	bf38      	it	cc
 8004bea:	250c      	movcc	r5, #12
 8004bec:	2d00      	cmp	r5, #0
 8004bee:	4606      	mov	r6, r0
 8004bf0:	db01      	blt.n	8004bf6 <_malloc_r+0x1a>
 8004bf2:	42a9      	cmp	r1, r5
 8004bf4:	d903      	bls.n	8004bfe <_malloc_r+0x22>
 8004bf6:	230c      	movs	r3, #12
 8004bf8:	6033      	str	r3, [r6, #0]
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bfe:	f000 f87d 	bl	8004cfc <__malloc_lock>
 8004c02:	4921      	ldr	r1, [pc, #132]	; (8004c88 <_malloc_r+0xac>)
 8004c04:	680a      	ldr	r2, [r1, #0]
 8004c06:	4614      	mov	r4, r2
 8004c08:	b99c      	cbnz	r4, 8004c32 <_malloc_r+0x56>
 8004c0a:	4f20      	ldr	r7, [pc, #128]	; (8004c8c <_malloc_r+0xb0>)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	b923      	cbnz	r3, 8004c1a <_malloc_r+0x3e>
 8004c10:	4621      	mov	r1, r4
 8004c12:	4630      	mov	r0, r6
 8004c14:	f000 f862 	bl	8004cdc <_sbrk_r>
 8004c18:	6038      	str	r0, [r7, #0]
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	f000 f85d 	bl	8004cdc <_sbrk_r>
 8004c22:	1c43      	adds	r3, r0, #1
 8004c24:	d123      	bne.n	8004c6e <_malloc_r+0x92>
 8004c26:	230c      	movs	r3, #12
 8004c28:	4630      	mov	r0, r6
 8004c2a:	6033      	str	r3, [r6, #0]
 8004c2c:	f000 f86c 	bl	8004d08 <__malloc_unlock>
 8004c30:	e7e3      	b.n	8004bfa <_malloc_r+0x1e>
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	1b5b      	subs	r3, r3, r5
 8004c36:	d417      	bmi.n	8004c68 <_malloc_r+0x8c>
 8004c38:	2b0b      	cmp	r3, #11
 8004c3a:	d903      	bls.n	8004c44 <_malloc_r+0x68>
 8004c3c:	6023      	str	r3, [r4, #0]
 8004c3e:	441c      	add	r4, r3
 8004c40:	6025      	str	r5, [r4, #0]
 8004c42:	e004      	b.n	8004c4e <_malloc_r+0x72>
 8004c44:	6863      	ldr	r3, [r4, #4]
 8004c46:	42a2      	cmp	r2, r4
 8004c48:	bf0c      	ite	eq
 8004c4a:	600b      	streq	r3, [r1, #0]
 8004c4c:	6053      	strne	r3, [r2, #4]
 8004c4e:	4630      	mov	r0, r6
 8004c50:	f000 f85a 	bl	8004d08 <__malloc_unlock>
 8004c54:	f104 000b 	add.w	r0, r4, #11
 8004c58:	1d23      	adds	r3, r4, #4
 8004c5a:	f020 0007 	bic.w	r0, r0, #7
 8004c5e:	1ac2      	subs	r2, r0, r3
 8004c60:	d0cc      	beq.n	8004bfc <_malloc_r+0x20>
 8004c62:	1a1b      	subs	r3, r3, r0
 8004c64:	50a3      	str	r3, [r4, r2]
 8004c66:	e7c9      	b.n	8004bfc <_malloc_r+0x20>
 8004c68:	4622      	mov	r2, r4
 8004c6a:	6864      	ldr	r4, [r4, #4]
 8004c6c:	e7cc      	b.n	8004c08 <_malloc_r+0x2c>
 8004c6e:	1cc4      	adds	r4, r0, #3
 8004c70:	f024 0403 	bic.w	r4, r4, #3
 8004c74:	42a0      	cmp	r0, r4
 8004c76:	d0e3      	beq.n	8004c40 <_malloc_r+0x64>
 8004c78:	1a21      	subs	r1, r4, r0
 8004c7a:	4630      	mov	r0, r6
 8004c7c:	f000 f82e 	bl	8004cdc <_sbrk_r>
 8004c80:	3001      	adds	r0, #1
 8004c82:	d1dd      	bne.n	8004c40 <_malloc_r+0x64>
 8004c84:	e7cf      	b.n	8004c26 <_malloc_r+0x4a>
 8004c86:	bf00      	nop
 8004c88:	2000103c 	.word	0x2000103c
 8004c8c:	20001040 	.word	0x20001040

08004c90 <_realloc_r>:
 8004c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c92:	4607      	mov	r7, r0
 8004c94:	4614      	mov	r4, r2
 8004c96:	460e      	mov	r6, r1
 8004c98:	b921      	cbnz	r1, 8004ca4 <_realloc_r+0x14>
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ca0:	f7ff bf9c 	b.w	8004bdc <_malloc_r>
 8004ca4:	b922      	cbnz	r2, 8004cb0 <_realloc_r+0x20>
 8004ca6:	f7ff ff4d 	bl	8004b44 <_free_r>
 8004caa:	4625      	mov	r5, r4
 8004cac:	4628      	mov	r0, r5
 8004cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cb0:	f000 f830 	bl	8004d14 <_malloc_usable_size_r>
 8004cb4:	42a0      	cmp	r0, r4
 8004cb6:	d20f      	bcs.n	8004cd8 <_realloc_r+0x48>
 8004cb8:	4621      	mov	r1, r4
 8004cba:	4638      	mov	r0, r7
 8004cbc:	f7ff ff8e 	bl	8004bdc <_malloc_r>
 8004cc0:	4605      	mov	r5, r0
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d0f2      	beq.n	8004cac <_realloc_r+0x1c>
 8004cc6:	4631      	mov	r1, r6
 8004cc8:	4622      	mov	r2, r4
 8004cca:	f7ff fbd1 	bl	8004470 <memcpy>
 8004cce:	4631      	mov	r1, r6
 8004cd0:	4638      	mov	r0, r7
 8004cd2:	f7ff ff37 	bl	8004b44 <_free_r>
 8004cd6:	e7e9      	b.n	8004cac <_realloc_r+0x1c>
 8004cd8:	4635      	mov	r5, r6
 8004cda:	e7e7      	b.n	8004cac <_realloc_r+0x1c>

08004cdc <_sbrk_r>:
 8004cdc:	b538      	push	{r3, r4, r5, lr}
 8004cde:	2300      	movs	r3, #0
 8004ce0:	4d05      	ldr	r5, [pc, #20]	; (8004cf8 <_sbrk_r+0x1c>)
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	4608      	mov	r0, r1
 8004ce6:	602b      	str	r3, [r5, #0]
 8004ce8:	f7fb fd36 	bl	8000758 <_sbrk>
 8004cec:	1c43      	adds	r3, r0, #1
 8004cee:	d102      	bne.n	8004cf6 <_sbrk_r+0x1a>
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	b103      	cbz	r3, 8004cf6 <_sbrk_r+0x1a>
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	bd38      	pop	{r3, r4, r5, pc}
 8004cf8:	20001114 	.word	0x20001114

08004cfc <__malloc_lock>:
 8004cfc:	4801      	ldr	r0, [pc, #4]	; (8004d04 <__malloc_lock+0x8>)
 8004cfe:	f000 b811 	b.w	8004d24 <__retarget_lock_acquire_recursive>
 8004d02:	bf00      	nop
 8004d04:	2000111c 	.word	0x2000111c

08004d08 <__malloc_unlock>:
 8004d08:	4801      	ldr	r0, [pc, #4]	; (8004d10 <__malloc_unlock+0x8>)
 8004d0a:	f000 b80c 	b.w	8004d26 <__retarget_lock_release_recursive>
 8004d0e:	bf00      	nop
 8004d10:	2000111c 	.word	0x2000111c

08004d14 <_malloc_usable_size_r>:
 8004d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d18:	1f18      	subs	r0, r3, #4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	bfbc      	itt	lt
 8004d1e:	580b      	ldrlt	r3, [r1, r0]
 8004d20:	18c0      	addlt	r0, r0, r3
 8004d22:	4770      	bx	lr

08004d24 <__retarget_lock_acquire_recursive>:
 8004d24:	4770      	bx	lr

08004d26 <__retarget_lock_release_recursive>:
 8004d26:	4770      	bx	lr

08004d28 <_init>:
 8004d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2a:	bf00      	nop
 8004d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2e:	bc08      	pop	{r3}
 8004d30:	469e      	mov	lr, r3
 8004d32:	4770      	bx	lr

08004d34 <_fini>:
 8004d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d36:	bf00      	nop
 8004d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3a:	bc08      	pop	{r3}
 8004d3c:	469e      	mov	lr, r3
 8004d3e:	4770      	bx	lr
